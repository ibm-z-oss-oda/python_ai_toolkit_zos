[{
"name": "aniso8601",
"tags": [ "utility" ],
"versions": " 9.0.1",
"info":
{
"description": "<p>'Another ISO 8601 parser for Python'</p><p>This is a Python package for parsing the ISO 8601 Date/Time format. ISO 8601 is an international standard for formatting date/time data, maintained by the International Organization for Standardization.</p><p>Features of this package include:</p><ul><li>Pure Python implementation</li><li>Logical behavior</li><li>UTC offset represented as fixed-offset tzinfo</li><li>Parser separate from representation, allowing parsing to different datetime representations</li><li>No regular expressions</li></ul><div>  Current sha265 values:  <div>(py3) <code>aniso8601==9.0.1 --hash=sha256:cf9e7fa3cf8f85ed2e99e1aaddff98c27a37c7b3d90c77074aa7415123f66c5a</code></div></div>",
"usageNotes": "<div class=&ldquo;section&ldquo; id=&ldquo;parsing-datetimes'><h2>Parsing datetimes</h2><p><em>Consider</em> <a class=&ldquo;reference external&ldquo; href=&ldquo;https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat'>datetime.datetime.fromisoformat</a> <em>for basic ISO 8601 datetime parsing</em></p><p>To parse a typical ISO 8601 datetime string:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; aniso8601.parse_datetime('1977-06-10T12:00:00Z')<br>datetime.datetime(1977, 6, 10, 12, 0, tzinfo=+0:00:00 UTC)<br></pre><p>Alternative delimiters can be specified, for example, a space:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_datetime('1977-06-10 12:00:00Z', delimiter=' ')<br>datetime.datetime(1977, 6, 10, 12, 0, tzinfo=+0:00:00 UTC)<br></pre><p>UTC offsets are supported:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_datetime('1979-06-05T08:00:00-08:00')<br>datetime.datetime(1979, 6, 5, 8, 0, tzinfo=-8:00:00 UTC)<br></pre><p>If a UTC offset is not specified, the returned datetime will be naive:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_datetime('1983-01-22T08:00:00')<br>datetime.datetime(1983, 1, 22, 8, 0)<br></pre><p>Leap seconds are currently not supported and attempting to parse one raises a <code>LeapSecondError</code>:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_datetime('2018-03-06T23:59:60')<br>Traceback (most recent call last):<br>  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/time.py&quot;, line 196, in parse_datetime<br>    return builder.build_datetime(datepart, timepart)<br>  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/python.py&quot;, line 237, in build_datetime<br>    cls._build_object(time))<br>  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/__init__.py&quot;, line 336, in _build_object<br>    return cls.build_time(hh=parsetuple.hh, mm=parsetuple.mm,<br>  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/python.py&quot;, line 191, in build_time<br>    hh, mm, ss, tz = cls.range_check_time(hh, mm, ss, tz)<br>  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/__init__.py&quot;, line 266, in range_check_time<br>    raise LeapSecondError('Leap seconds are not supported.')<br>aniso8601.exceptions.LeapSecondError: Leap seconds are not supported.<br></pre><p>To get the resolution of an ISO 8601 datetime string:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.get_datetime_resolution('1977-06-10T12:00:00Z') == aniso8601.resolution.TimeResolution.Seconds<br>True<br>&gt;&gt;&gt; aniso8601.get_datetime_resolution('1977-06-10T12:00') == aniso8601.resolution.TimeResolution.Minutes<br>True<br>&gt;&gt;&gt; aniso8601.get_datetime_resolution('1977-06-10T12') == aniso8601.resolution.TimeResolution.Hours<br>True<br></pre><p>Note that datetime resolutions map to <code>TimeResolution</code> as a valid datetime must have at least one time member so the resolution mapping is equivalent.</p></div><div class=&ldquo;section&ldquo; id=&ldquo;parsing-dates'><h2>Parsing dates</h2><p><em>Consider</em> <a class=&ldquo;reference external&ldquo; href=&ldquo;https://docs.python.org/3/library/datetime.html#datetime.date.fromisoformat'>datetime.date.fromisoformat</a> <em>for basic ISO 8601 date parsing</em></p><p>To parse a date represented in an ISO 8601 string:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; aniso8601.parse_date('1984-04-23')<br>datetime.date(1984, 4, 23)<br></pre><p>Basic format is supported as well:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_date('19840423')<br>datetime.date(1984, 4, 23)<br></pre><p>To parse a date using the ISO 8601 week date format:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_date('1986-W38-1')<br>datetime.date(1986, 9, 15)<br></pre><p>To parse an ISO 8601 ordinal date:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_date('1988-132')<br>datetime.date(1988, 5, 11)<br></pre><p>To get the resolution of an ISO 8601 date string:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.get_date_resolution('1981-04-05') == aniso8601.resolution.DateResolution.Day<br>True<br>&gt;&gt;&gt; aniso8601.get_date_resolution('1981-04') == aniso8601.resolution.DateResolution.Month<br>True<br>&gt;&gt;&gt; aniso8601.get_date_resolution('1981') == aniso8601.resolution.DateResolution.Year<br>True<br></pre></div><div class=&ldquo;section&ldquo; id=&ldquo;parsing-times'><h2>Parsing times</h2><p><em>Consider</em> <a class=&ldquo;reference external&ldquo; href=&ldquo;https://docs.python.org/3/library/datetime.html#datetime.time.fromisoformat'>datetime.time.fromisoformat</a> <em>for basic ISO 8601 time parsing</em></p><p>To parse a time formatted as an ISO 8601 string:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; aniso8601.parse_time('11:31:14')<br>datetime.time(11, 31, 14)<br></pre><p>As with all of the above, basic format is supported:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_time('113114')<br>datetime.time(11, 31, 14)<br></pre><p>A UTC offset can be specified for times:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_time('17:18:19-02:30')<br>datetime.time(17, 18, 19, tzinfo=-2:30:00 UTC)<br>&gt;&gt;&gt; aniso8601.parse_time('171819Z')<br>datetime.time(17, 18, 19, tzinfo=+0:00:00 UTC)<br></pre><p>Reduced accuracy is supported:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_time('21:42')<br>datetime.time(21, 42)<br>&gt;&gt;&gt; aniso8601.parse_time('22')<br>datetime.time(22, 0)<br></pre><p>A decimal fraction is always allowed on the lowest order element of an ISO 8601 formatted time:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_time('22:33.5')<br>datetime.time(22, 33, 30)<br>&gt;&gt;&gt; aniso8601.parse_time('23.75')<br>datetime.time(23, 45)<br></pre><p>The decimal fraction can be specified with a comma instead of a full-stop:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_time('22:33,5')<br>datetime.time(22, 33, 30)<br>&gt;&gt;&gt; aniso8601.parse_time('23,75')<br>datetime.time(23, 45)<br></pre><p>Leap seconds are currently not supported and attempting to parse one raises a <code>LeapSecondError</code>:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_time('23:59:60')<br>Traceback (most recent call last):<br>  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/time.py&quot;, line 174, in parse_time<br>    return builder.build_time(hh=hourstr, mm=minutestr, ss=secondstr, tz=tz)<br>  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/python.py&quot;, line 191, in build_time<br>    hh, mm, ss, tz = cls.range_check_time(hh, mm, ss, tz)<br>  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/__init__.py&quot;, line 266, in range_check_time<br>    raise LeapSecondError('Leap seconds are not supported.')<br>aniso8601.exceptions.LeapSecondError: Leap seconds are not supported.<br></pre><p>To get the resolution of an ISO 8601 time string:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.get_time_resolution('11:31:14') == aniso8601.resolution.TimeResolution.Seconds<br>True<br>&gt;&gt;&gt; aniso8601.get_time_resolution('11:31') == aniso8601.resolution.TimeResolution.Minutes<br>True<br>&gt;&gt;&gt; aniso8601.get_time_resolution('11') == aniso8601.resolution.TimeResolution.Hours<br>True<br></pre></div><div class=&ldquo;section&ldquo; id=&ldquo;parsing-durations'><h2>Parsing durations</h2><p>To parse a duration formatted as an ISO 8601 string:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; aniso8601.parse_duration('P1Y2M3DT4H54M6S')<br>datetime.timedelta(428, 17646)<br></pre><p>Reduced accuracy is supported:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_duration('P1Y')<br>datetime.timedelta(365)<br></pre><p>A decimal fraction is allowed on the lowest order element:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_duration('P1YT3.5M')<br>datetime.timedelta(365, 210)<br></pre><p>The decimal fraction can be specified with a comma instead of a full-stop:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_duration('P1YT3,5M')<br>datetime.timedelta(365, 210)<br></pre><p>Parsing a duration from a combined date and time is supported as well:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_duration('P0001-01-02T01:30:05')<br>datetime.timedelta(397, 5405)<br></pre><p>To get the resolution of an ISO 8601 duration string:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M3DT4H54M6S') == aniso8601.resolution.DurationResolution.Seconds<br>True<br>&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M3DT4H54M') == aniso8601.resolution.DurationResolution.Minutes<br>True<br>&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M3DT4H') == aniso8601.resolution.DurationResolution.Hours<br>True<br>&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M3D') == aniso8601.resolution.DurationResolution.Days<br>True<br>&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M') == aniso8601.resolution.DurationResolution.Months<br>True<br>&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y') == aniso8601.resolution.DurationResolution.Years<br>True<br></pre><p>The default <code>PythonTimeBuilder</code> assumes years are 365 days, and months are 30 days. Where calendar level accuracy is required, a <a class=&ldquo;reference external&ldquo; href=&ldquo;https://bitbucket.org/nielsenb/relativetimebuilder'>RelativeTimeBuilder</a> can be used, see also <a class=&ldquo;reference external&ldquo; href=&ldquo;/BUILDERS.rst'>Builders</a>.</p></div><div class=&ldquo;section&ldquo; id=&ldquo;parsing-intervals'><h2>Parsing intervals</h2><p>To parse an interval specified by a start and end:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00/2008-05-11T15:30:00')<br>(datetime.datetime(2007, 3, 1, 13, 0), datetime.datetime(2008, 5, 11, 15, 30))<br></pre><p>Intervals specified by a start time and a duration are supported:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00Z/P1Y2M10DT2H30M')<br>(datetime.datetime(2007, 3, 1, 13, 0, tzinfo=+0:00:00 UTC), datetime.datetime(2008, 5, 9, 15, 30, tzinfo=+0:00:00 UTC))<br></pre><p>A duration can also be specified by a duration and end time:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_interval('P1M/1981-04-05')<br>(datetime.date(1981, 4, 5), datetime.date(1981, 3, 6))<br></pre><p>Notice that the result of the above parse is not in order from earliest to latest. If sorted intervals are required, simply use the <code>sorted</code> keyword as shown below:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; sorted(aniso8601.parse_interval('P1M/1981-04-05'))<br>[datetime.date(1981, 3, 6), datetime.date(1981, 4, 5)]<br></pre><p>The end of an interval is returned as a datetime when required to maintain the resolution specified by a duration, even if the duration start is given as a date:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_interval('2014-11-12/PT4H54M6.5S')<br>(datetime.date(2014, 11, 12), datetime.datetime(2014, 11, 12, 4, 54, 6, 500000))<br>&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01/P1.5D')<br>(datetime.date(2007, 3, 1), datetime.datetime(2007, 3, 2, 12, 0))<br></pre><p>Concise representations are supported:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_interval('2020-01-01/02')<br>(datetime.date(2020, 1, 1), datetime.date(2020, 1, 2))<br>&gt;&gt;&gt; aniso8601.parse_interval('2007-12-14T13:30/15:30')<br>(datetime.datetime(2007, 12, 14, 13, 30), datetime.datetime(2007, 12, 14, 15, 30))<br>&gt;&gt;&gt; aniso8601.parse_interval('2008-02-15/03-14')<br>(datetime.date(2008, 2, 15), datetime.date(2008, 3, 14))<br>&gt;&gt;&gt; aniso8601.parse_interval('2007-11-13T09:00/15T17:00')<br>(datetime.datetime(2007, 11, 13, 9, 0), datetime.datetime(2007, 11, 15, 17, 0))<br></pre><p>Repeating intervals are supported as well, and return a <a class=&ldquo;reference external&ldquo; href=&ldquo;https://wiki.python.org/moin/Generators'>generator</a>:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_repeating_interval('R3/1981-04-05/P1D')<br>&lt;generator object _date_generator at 0x7fd800d3b320&gt;<br>&gt;&gt;&gt; list(aniso8601.parse_repeating_interval('R3/1981-04-05/P1D'))<br>[datetime.date(1981, 4, 5), datetime.date(1981, 4, 6), datetime.date(1981, 4, 7)]<br></pre><p>Repeating intervals are allowed to go in the reverse direction:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; list(aniso8601.parse_repeating_interval('R2/PT1H2M/1980-03-05T01:01:00'))<br>[datetime.datetime(1980, 3, 5, 1, 1), datetime.datetime(1980, 3, 4, 23, 59)]<br></pre><p>Unbounded intervals are also allowed (Python 2):</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; result = aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00')<br>&gt;&gt;&gt; result.next()<br>datetime.datetime(1980, 3, 5, 1, 1)<br>&gt;&gt;&gt; result.next()<br>datetime.datetime(1980, 3, 4, 23, 59)<br></pre><p>or for Python 3:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; result = aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00')<br>&gt;&gt;&gt; next(result)<br>datetime.datetime(1980, 3, 5, 1, 1)<br>&gt;&gt;&gt; next(result)<br>datetime.datetime(1980, 3, 4, 23, 59)<br></pre><p>Note that you should never try to convert a generator produced by an unbounded interval to a list:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; list(aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00'))<br>Traceback (most recent call last):<br>  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/python.py&quot;, line 560, in _date_generator_unbounded<br>    currentdate += timedelta<br>OverflowError: date value out of range<br></pre><p>To get the resolution of an ISO 8601 interval string:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03-01T13:00:00/2008-05-11T15:30:00') == aniso8601.resolution.IntervalResolution.Seconds<br>True<br>&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03-01T13:00/2008-05-11T15:30') == aniso8601.resolution.IntervalResolution.Minutes<br>True<br>&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03-01T13/2008-05-11T15') == aniso8601.resolution.IntervalResolution.Hours<br>True<br>&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03-01/2008-05-11') == aniso8601.resolution.IntervalResolution.Day<br>True<br>&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03/P1Y') == aniso8601.resolution.IntervalResolution.Month<br>True<br>&gt;&gt;&gt; aniso8601.get_interval_resolution('2007/P1Y') == aniso8601.resolution.IntervalResolution.Year<br>True<br></pre><p>And for repeating ISO 8601 interval strings:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.get_repeating_interval_resolution('R3/1981-04-05/P1D') == aniso8601.resolution.IntervalResolution.Day<br>True<br>&gt;&gt;&gt; aniso8601.get_repeating_interval_resolution('R/PT1H2M/1980-03-05T01:01:00') == aniso8601.resolution.IntervalResolution.Seconds<br>True<br></pre></div><div class=&ldquo;section&ldquo; id=&ldquo;builders'><h1>Builders</h1><p>Builders can be used to change the output format of a parse operation. All parse functions have a <code>builder</code> keyword argument which accepts a builder class.</p><p>Two builders are included. The <code>PythonTimeBuilder</code> (the default) in the <code>aniso8601.builders.python</code> module, and the <code>TupleBuilder</code> which returns the parse result as a corresponding named tuple and is located in the <code>aniso8601.builders</code> module.</p><p>Information on writing a builder can be found in <a class=&ldquo;reference external&ldquo; href=&ldquo;/BUILDERS.rst'>BUILDERS</a>.</p><p>The following builders are available as separate projects:</p><ul class=&ldquo;simple'><li><a class=&ldquo;reference external&ldquo; href=&ldquo;https://bitbucket.org/nielsenb/relativetimebuilder'>RelativeTimeBuilder</a> supports parsing to <a class=&ldquo;reference external&ldquo; href=&ldquo;https://dateutil.readthedocs.io/en/stable/relativedelta.html'>datetutil relativedelta types</a> for calendar level accuracy</li><li><a class=&ldquo;reference external&ldquo; href=&ldquo;https://bitbucket.org/nielsenb/attotimebuilder'>AttoTimeBuilder</a> supports parsing directly to <a class=&ldquo;reference external&ldquo; href=&ldquo;https://bitbucket.org/nielsenb/attotime'>attotime attodatetime and attotimedelta types</a> which support sub-nanosecond precision</li><li><a class=&ldquo;reference external&ldquo; href=&ldquo;https://bitbucket.org/nielsenb/numpytimebuilder'>NumPyTimeBuilder</a> supports parsing directly to <a class=&ldquo;reference external&ldquo; href=&ldquo;https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html'>NumPy datetime64 and timedelta64 types</a></li></ul><div class=&ldquo;section&ldquo; id=&ldquo;tuplebuilder'><h2>TupleBuilder</h2><p>The <code>TupleBuilder</code> returns parse results as <a class=&ldquo;reference external&ldquo; href=&ldquo;https://docs.python.org/3/library/collections.html#collections.namedtuple'>named tuples</a>. It is located in the <code>aniso8601.builders</code> module.</p><div class=&ldquo;section&ldquo; id=&ldquo;datetimes'><h3>Datetimes</h3><p>Parsing a datetime returns a <code>DatetimeTuple</code> containing <code>Date</code> and <code>Time</code> tuples . The date tuple contains the following parse components: <code>YYYY</code>, <code>MM</code>, <code>DD</code>, <code>Www</code>, <code>D</code>, <code>DDD</code>. The time tuple contains the following parse components <code>hh</code>, <code>mm</code>, <code>ss</code>, <code>tz</code>, where <code>tz</code> itself is a tuple with the following components <code>negative</code>, <code>Z</code>, <code>hh</code>, <code>mm</code>, <code>name</code> with <code>negative</code> and <code>Z</code> being booleans:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>&gt;&gt;&gt; aniso8601.parse_datetime('1977-06-10T12:00:00', builder=TupleBuilder)<br>Datetime(date=Date(YYYY='1977', MM='06', DD='10', Www=None, D=None, DDD=None), time=Time(hh='12', mm='00', ss='00', tz=None))<br>&gt;&gt;&gt; aniso8601.parse_datetime('1979-06-05T08:00:00-08:00', builder=TupleBuilder)<br>Datetime(date=Date(YYYY='1979', MM='06', DD='05', Www=None, D=None, DDD=None), time=Time(hh='08', mm='00', ss='00', tz=Timezone(negative=True, Z=None, hh='08', mm='00', name='-08:00')))<br></pre></div><div class=&ldquo;section&ldquo; id=&ldquo;dates'><h3>Dates</h3><p>Parsing a date returns a <code>DateTuple</code> containing the following parse components: <code>YYYY</code>, <code>MM</code>, <code>DD</code>, <code>Www</code>, <code>D</code>, <code>DDD</code>:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>&gt;&gt;&gt; aniso8601.parse_date('1984-04-23', builder=TupleBuilder)<br>Date(YYYY='1984', MM='04', DD='23', Www=None, D=None, DDD=None)<br>&gt;&gt;&gt; aniso8601.parse_date('1986-W38-1', builder=TupleBuilder)<br>Date(YYYY='1986', MM=None, DD=None, Www='38', D='1', DDD=None)<br>&gt;&gt;&gt; aniso8601.parse_date('1988-132', builder=TupleBuilder)<br>Date(YYYY='1988', MM=None, DD=None, Www=None, D=None, DDD='132')<br></pre></div><div class=&ldquo;section&ldquo; id=&ldquo;times'><h3>Times</h3><p>Parsing a time returns a <code>TimeTuple</code> containing following parse components: <code>hh</code>, <code>mm</code>, <code>ss</code>, <code>tz</code>, where <code>tz</code> is a <code>TimezoneTuple</code> with the following components <code>negative</code>, <code>Z</code>, <code>hh</code>, <code>mm</code>, <code>name</code>, with <code>negative</code> and <code>Z</code> being booleans:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>&gt;&gt;&gt; aniso8601.parse_time('11:31:14', builder=TupleBuilder)<br>Time(hh='11', mm='31', ss='14', tz=None)<br>&gt;&gt;&gt; aniso8601.parse_time('171819Z', builder=TupleBuilder)<br>Time(hh='17', mm='18', ss='19', tz=Timezone(negative=False, Z=True, hh=None, mm=None, name='Z'))<br>&gt;&gt;&gt; aniso8601.parse_time('17:18:19-02:30', builder=TupleBuilder)<br>Time(hh='17', mm='18', ss='19', tz=Timezone(negative=True, Z=None, hh='02', mm='30', name='-02:30'))<br></pre></div><div class=&ldquo;section&ldquo; id=&ldquo;durations'><h3>Durations</h3><p>Parsing a duration returns a <code>DurationTuple</code> containing the following parse components: <code>PnY</code>, <code>PnM</code>, <code>PnW</code>, <code>PnD</code>, <code>TnH</code>, <code>TnM</code>, <code>TnS</code>:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>&gt;&gt;&gt; aniso8601.parse_duration('P1Y2M3DT4H54M6S', builder=TupleBuilder)<br>Duration(PnY='1', PnM='2', PnW=None, PnD='3', TnH='4', TnM='54', TnS='6')<br>&gt;&gt;&gt; aniso8601.parse_duration('P7W', builder=TupleBuilder)<br>Duration(PnY=None, PnM=None, PnW='7', PnD=None, TnH=None, TnM=None, TnS=None)<br></pre></div><div class=&ldquo;section&ldquo; id=&ldquo;intervals'><h3>Intervals</h3><p>Parsing an interval returns an <code>IntervalTuple</code> containing the following parse components: <code>start</code>, <code>end</code>, <code>duration</code>, <code>start</code> and <code>end</code> may both be datetime or date tuples, <code>duration</code> is a duration tuple:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; import aniso8601<br>&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00/2008-05-11T15:30:00', builder=TupleBuilder)<br>Interval(start=Datetime(date=Date(YYYY='2007', MM='03', DD='01', Www=None, D=None, DDD=None), time=Time(hh='13', mm='00', ss='00', tz=None)), end=Datetime(date=Date(YYYY='2008', MM='05', DD='11', Www=None, D=None, DDD=None), time=Time(hh='15', mm='30', ss='00', tz=None)), duration=None)<br>&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00Z/P1Y2M10DT2H30M', builder=TupleBuilder)<br>Interval(start=Datetime(date=Date(YYYY='2007', MM='03', DD='01', Www=None, D=None, DDD=None), time=Time(hh='13', mm='00', ss='00', tz=Timezone(negative=False, Z=True, hh=None, mm=None, name='Z'))), end=None, duration=Duration(PnY='1', PnM='2', PnW=None, PnD='10', TnH='2', TnM='30', TnS=None))<br>&gt;&gt;&gt; aniso8601.parse_interval('P1M/1981-04-05', builder=TupleBuilder)<br>Interval(start=None, end=Date(YYYY='1981', MM='04', DD='05', Www=None, D=None, DDD=None), duration=Duration(PnY=None, PnM='1', PnW=None, PnD=None, TnH=None, TnM=None, TnS=None))<br></pre><p>A repeating interval returns a <code>RepeatingIntervalTuple</code> containing the following parse components: <code>R</code>, <code>Rnn</code>, <code>interval</code>, where <code>R</code> is a boolean, <code>True</code> for an unbounded interval, <code>False</code> otherwise.:</p><pre class=&ldquo;literal-block'>&gt;&gt;&gt; aniso8601.parse_repeating_interval('R3/1981-04-05/P1D', builder=TupleBuilder)<br>RepeatingInterval(R=False, Rnn='3', interval=Interval(start=Date(YYYY='1981', MM='04', DD='05', Www=None, D=None, DDD=None), end=None, duration=Duration(PnY=None, PnM=None, PnW=None, PnD='1', TnH=None, TnM=None, TnS=None)))<br>&gt;&gt;&gt; aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00', builder=TupleBuilder)<br>RepeatingInterval(R=True, Rnn=None, interval=Interval(start=None, end=Datetime(date=Date(YYYY='1980', MM='03', DD='05', Www=None, D=None, DDD=None), time=Time(hh='01', mm='01', ss='00', tz=None)), duration=Duration(PnY=None, PnM=None, PnW=None, PnD=None, TnH='1', TnM='2', TnS=None)))<br></pre></div></div></div>",
"linkToSite": "https://bitbucket.org/nielsenb/aniso8601/src/master/",
"siteName": "bitbucket.org",
"license": "BSD3",
"linkToLicense": "https://bitbucket.org/nielsenb/aniso8601/src/master/LICENSE",
"version": "9.0.1",
"installCommand": "aniso8601==9.0.1--hash=sha256:<hash>"
}
},
{
"name": "argon2-cffi",
"tags": [ "security" ],
"versions": " 21.3.0",
"info":
{
"description": "<p>Argon2 is a secure password hashing algorithm. It is designed to have both a configurable runtime as well as memory consumption.</p><p>This means that you can decide how long it takes to hash a password and how much memory is required.</p><p>Argon2 won the <a href='https://www.password-hashing.net/'>Password Hashing Competition</a> and argon2-cffi is the simplest way to use it in Python and PyPy.</p><div>Current sha265 values:<div>(cp310) <code>argon2-cffi==21.3.0 --hash=sha256:ca8776f6acbb0d565b739f1276dea6b6642c3d82d07d5e3456f3a806795eb3ac</code></div></div>",
"usageNotes": "<h4>Example of usage:</h4><pre><code>>>> from argon2 import PasswordHasher<br>>>> ph = PasswordHasher()<br>>>> hash = ph.hash(&ldquo;correct horse battery staple&ldquo;)<br>>>> hash  # doctest: +SKIP<br>'$argon2id$v=19$m=65536,t=3,p=4$MIIRqgvgQbgj220jfp0MPA$YfwJSVjtjSU0zzV/P3S9nnQ/USre2wvJMjfCIjrTQbg'<br>>>> ph.verify(hash, &ldquo;correct horse battery staple&ldquo;)<br>True<br>>>> ph.check_needs_rehash(hash)<br>False<br>>>> ph.verify(hash, &ldquo;Tr0ub4dor&3&ldquo;)<br>Traceback (most recent call last):<br>  ...<br>argon2.exceptions.VerifyMismatchError: The password does not match the supplied hash<br></code></pre><p>Further documentation is available via the <a href='https://argon2-cffi.readthedocs.io/en/stable/#user-s-guide'>User's Guide</a></p>",
"linkToSite": "https://argon2-cffi.readthedocs.io/en/stable/",
"siteName": "readthedocs.io",
"license": "MIT",
"linkToLicense": "https://github.com/hynek/argon2-cffi/blob/main/LICENSE",
"version": "21.3.0",
"installCommand": "argon2-cffi==21.3.0--hash=sha256:<hash>"
}
},
{
"name": "argon2-cffi-bindings",
"tags": [ "utility" ],
"versions": " 21.2.0",
"info":
{
"description": "<p>argon2-cffi-bindings provides low-level <a href='https://cffi.readthedocs.io/'>CFFI</a> bindings to the <a href='https://github.com/p-h-c/phc-winner-argon2'>Argon2</a> password hashing algorithm including a vendored version of them.</p><p>If you want to hash passwords in an application, this package is not for you. Have a look at argon2-cffi with its high-level abstractions!</p><p>These bindings have been extracted from <a href='https://argon2-cffi.readthedocs.io/'>argon2-cffi</a> and it remains its main consumer. However, they may be used by other packages that want to use the Argon2 library without dealing with C-related complexities.</p><div>Current sha265 values:<div>(cp310) <code>argon2-cffi-bindings==21.2.0 --hash=sha256:f126bf5a7693fe683605f27403aea204404794fed4c17d6d8ecdab5bb417f1e1</code></div><div>(cp311) <code>argon2-cffi-bindings==21.2.0 --hash=sha256:08a0ec6fa4d22a8b00e82ae7711ef74a50f9717664893b96dc9ebaeb71677e6a</code></div></div>",
"usageNotes": "<p>Since this package is intended to be an implementation detail, it uses a private module name to prevent your users from using it by accident.</p><p>Therefore you have to import the symbols from <code>_argon2_cffi_bindings</code>:</p><pre><code>from _argon2_cffi_bindings import ffi, lib<br></code></pre><p>Please refer to <a href='https://cffi.readthedocs.io/en/latest/using.html'>cffi</a> documentation on how to use the <code>ffi</code> and <code>lib</code> objects.</p><p>The list of symbols that are provided can be found in the <a href='https://github.com/hynek/argon2-cffi-bindings/blob/main/src/_argon2_cffi_bindings/_ffi_build.py'>_ffi_build.py</a> file on github.</p>",
"linkToSite": "https://github.com/hynek/argon2-cffi-bindings",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/hynek/argon2-cffi-bindings/blob/main/LICENSE",
"version": "21.2.0",
"installCommand": "argon2-cffi-bindings==21.2.0--hash=sha256:<hash>"
}
},
{
"name": "asttokens",
"tags": [ "utility","programming_tools" ],
"versions": " 2.2.1",
"info":
{
"description": "<p>The <code>asttokens</code> module annotates Python abstract syntax trees (ASTs) with the positions of tokens and text in the source code that generated them.</p><p>It makes it possible for tools that work with logical AST nodes to find the particular text that resulted in those nodes, for example for automated refactoring or highlighting.</p><div>Current sha265 values:<div>(py3) <code>asttokens==2.2.1 --hash=sha256:6b0ac9e93fb0335014d382b8fa9b3afa7df546984258005da0b9e7095b3deb1c</code></div></div>",
"usageNotes": "<p>ASTTokens can annotate both trees built by <a href='https://docs.python.org/2/library/ast.html'>ast</a>, AND those built by <a href='https://github.com/PyCQA/astroid'>astroid</a>.</p><p>Here’s an example:</p><pre><code>import asttokens, ast<br>source = &ldquo;Robot('blue').walk(steps=10*n)&ldquo;<br>atok = asttokens.ASTTokens(source, parse=True)<br></code></pre><p>Once the tree has been marked, nodes get <code>.first_token</code>, <code>.last_token</code> attributes, and the <code>ASTTokens</code> object offers helpful methods:</p><pre><code>attr_node = next(n for n in ast.walk(atok.tree) if isinstance(n, ast.Attribute))<br>print(atok.get_text(attr_node))<br>start, end = attr_node.last_token.startpos, attr_node.last_token.endpos<br>print(atok.text[:start] + 'RUN' + atok.text[end:])<br></code></pre><p>Which produces this output:</p><pre><code>Robot('blue').walk<br>Robot('blue').RUN(steps=10*n)<br></code></pre><p>The <code>ASTTokens</code> object also offers methods to walk and search the list of tokens that make up the code (or a particular AST node), which is more useful and powerful than dealing with the text directly.</p><p>Refer to <a href='https://asttokens.readthedocs.io/en/latest/api-index.html'>readthedocs.io</a> for further reference.</p>",
"linkToSite": "https://github.com/gristlabs/asttokens",
"siteName": "github",
"license": "APACHE2",
"linkToLicense": "https://github.com/gristlabs/asttokens/blob/master/LICENSE",
"version": "2.2.1",
"installCommand": "asttokens==2.2.1--hash=sha256:<hash>"
}
},
{
"name": "attrs",
"tags": [ "programming_tools" ],
"versions": " 22.2.0",
"info":
{
"description": "<p><tt class='docutils literal'>attrs</tt> is the Python package that will bring back the <strong>joy</strong> of <strong>writing classes</strong> by relieving you from the drudgery of implementing object protocols (aka <a class='reference external' href='https://www.attrs.org/en/latest/glossary.html#term-dunder-methods'>dunder methods</a>).<a class='reference external' href='https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-badge'>Trusted by NASA</a> for Mars missions since 2020!</p><p>Its main goal is to help you to write <strong>concise</strong> and <strong>correct</strong> software without slowing down your code.</p><!-- teaser-end --><p>For that, it gives you a class decorator and a way to declaratively define the attributes on that class. After <em>declaring</em> your attributes <tt class='docutils literal'>attrs</tt> will also give you:</p><ul class='simple'><li>a concise and explicit overview of the class's attributes,</li><li>a nice human-readable <tt class='docutils literal'>__repr__</tt>,</li><li>equality-checking methods,</li><li>an initializer,</li><li>and much more,</li></ul><p><em>without</em> writing dull boilerplate code again and again and <em>without</em> runtime performance penalties.</p><p><strong>Hate type annotations</strong>!?No problem!Types are entirely <strong>optional</strong> with <tt class='docutils literal'>attrs</tt>.Simply assign <tt class='docutils literal'>attrs.field()</tt> to the attributes instead of annotating them with types.</p><div>Current sha265 values:<div>(py3) <code>attrs==22.2.0 --hash=sha256:29e95c7f6778868dbd49170f98f8818f78f3dc5e0e37c0b1f474e3561b240836</code></div></div>",
"usageNotes": "<h4>Example of usage:</h4><pre><code>>>> from attrs import asdict, define, make_class, Factory<br><br>>>> @define<br>... class SomeClass:<br>...     a_number: int = 42<br>...     list_of_numbers: list[int] = Factory(list)<br>...<br>...     def hard_math(self, another_number):<br>...         return self.a_number + sum(self.list_of_numbers) * another_number<br><br><br>>>> sc = SomeClass(1, [1, 2, 3])<br>>>> sc<br>SomeClass(a_number=1, list_of_numbers=[1, 2, 3])<br><br>>>> sc.hard_math(3)<br>19<br>>>> sc == SomeClass(1, [1, 2, 3])<br>True<br>>>> sc != SomeClass(2, [3, 2, 1])<br>True<br><br>>>> asdict(sc)<br>{'a_number': 1, 'list_of_numbers': [1, 2, 3]}<br><br>>>> SomeClass()<br>SomeClass(a_number=42, list_of_numbers=[])<br><br>>>> C = make_class(&ldquo;C&ldquo;, [&ldquo;a&ldquo;, &ldquo;b&ldquo;])<br>>>> C(&ldquo;foo&ldquo;, &ldquo;bar&ldquo;)<br>C(a='foo', b='bar')<br></code></pre><p>Further documentation is available on the <a href='https://www.attrs.org/en/stable/#getting-started'>getting started</a> guide.</p>",
"linkToSite": "https://www.attrs.org/en/stable/",
"siteName": "attrs.org",
"license": "MIT",
"linkToLicense": "https://github.com/python-attrs/attrs/blob/main/LICENSE",
"version": "22.2.0",
"installCommand": "attrs==22.2.0--hash=sha256:<hash>"
}
},
{
"name": "backcall",
"tags": [ "programming_tools" ],
"versions": " 0.2.0",
"info":
{
"description": "<p>Specifications for callback functions passed in to an API</p><P>If your code lets other people supply callback functions, it’s important to specify the function signature you expect, and check that functions support that. Adding extra parameters later would break other peoples code unless you’re careful.</p><p>backcall provides a way of specifying the callback signature using a prototype function.</p><p>If the callback takes fewer parameters than your prototype, backcall will wrap it in a function that discards the extra arguments. If the callback expects more arguments, a TypeError is thrown when it is registered.</p><div>Current sha265 values:<div>(py3) <code>backcall==0.2.0 --hash=sha256:e0a55adb4d86fa337ea93cf29c79a27b063945a4f8d5ca16122cd0fa9fbc5222</code></div></div>",
"usageNotes": "<p>Example of specifying the callback signature using the prototype function:</p><pre><code>from backcall import callback_prototype<br><br>@callback_prototype<br>def handle_ping(sender, delay=None):<br>    # Specify positional parameters without a default, and keyword<br>    # parameters with a default.<br>    pass<br><br>def register_ping_handler(callback):<br>    # This checks and adapts the function passed in:<br>    callback = handle_ping.adapt(callback)<br>    ping_callbacks.append(callback)<br></code></pre><p>For more details, see the <a href='https://backcall.readthedocs.io/en/latest/'>docs</a> or the <a href='https://nbviewer.org/github/takluyver/backcall/blob/master/Demo.ipynb'>Demo notebook</a>.</p>",
"linkToSite": "https://github.com/takluyver/backcall",
"siteName": "github",
"license": "BSD3",
"linkToLicense": "https://github.com/takluyver/backcall/blob/master/LICENSE",
"version": "0.2.0",
"installCommand": "backcall==0.2.0--hash=sha256:<hash>"
}
},
{
"name": "beautifulsoup4",
"tags": [ "utility","web" ],
"versions": " 4.11.1",
"info":
{
"description": "<p>Beautiful Soup is a library that makes it easy to scrape information from web pages. It sits atop an HTML or XML parser, providing Pythonic idioms for iterating, searching, and modifying the parse tree.</p><div>Current sha265 values:<div>(py3) <code>beautifulsoup4==4.11.1 --hash=sha256:1d24392d77fafbbec078c74ec0cff269424ec8323302970bfe0cf44a24cccf0b</code></div></div>",
"usageNotes": "<p>For advanced tool documentation, refer to <a href='https://www.crummy.com/software/BeautifulSoup/'>www.crummy.com/software/BeautifulSoup/</a>.</p>",
"linkToSite": "https://www.crummy.com/software/BeautifulSoup/",
"siteName": "https://www.crummy.com/software/BeautifulSoup/",
"license": "MIT License (MIT)",
"linkToLicense": "https://github.com/wention/BeautifulSoup4/blob/master/COPYING.txt",
"version": "4.11.1",
"installCommand": "beautifulsoup4==4.11.1--hash=sha256:<hash>"
}
},
{
"name": "bz2file",
"tags": [ "utility" ],
"versions": " 0.98",
"info":
{
"description": "<p>Bz2file is a Python library for reading and writing bzip2-compressed files.</p><p>It contains a drop-in replacement for the file interface in the standard library's bz2 module, including features from the latest development version of CPython that are not available in older releases.</p><p>Bz2file is compatible with CPython 2.6, 2.7, and 3.0 through 3.4, as well as PyPy 2.0.</p><div>Current sha265 values:<div>(py3) <code>bz2file==0.98 --hash=sha256:d597ac953f7e0a66604a2d497f6b2091bae1585333830e4d316baeafe61db715</code></div></div>",
"usageNotes": "The <code>open()</code> function and <code>BZ2File</code> class in this module provide the same features and interface as the ones in the standard library's <code>bz2</code> module in the current development version of CPython, documented <a href='https://docs.python.org/dev/library/bz2.html'>here</a>.",
"linkToSite": "https://github.com/nvawda/bz2file",
"siteName": "github",
"license": "github",
"linkToLicense": "MISSING",
"version": "0.98",
"installCommand": "bz2file==0.98--hash=sha256:<hash>"
}
},
{
"name": "cairocffi",
"tags": [ "graphics" ],
"versions": " 1.3.0",
"info":
{
"description": "<p>cairocffi is a <a href='https://cffi.readthedocs.org/'>CFFI</a>-based drop-in replacement for <a href='https://pycairo.readthedocs.io/'>Pycairo</a>, a set of Python bindings and object-oriented API for <a href='http://cairographics.org/'>cairo</a>. Cairo is a 2D vector graphics library with support for multiple backends including image buffers, PNG, PostScript, PDF, and SVG file output.</p><p>Additionally, the <code>cairocffi.pixbuf</code> module uses <a href='https://gitlab.gnome.org/GNOME/gdk-pixbuf'>GDK-PixBuf</a> to decode various image formats for use in cairo.</p><div>Current sha265 values:<div>(py3) <code>cairocffi==1.3.0 --hash=sha256:397d362668c25afc748648eed9826f4ec63ee59b6c5d7bd47cc62a92a94c3107</code></div></div>",
"usageNotes": "<p>Basic usage example:</p><p>For doing something useful with cairo, you need at least a surface and a context:<p><pre><code>import cairocffi as cairo<br><br>surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 300, 200)<br>context = cairo.Context(surface)<br>with context:<br>    context.set_source_rgb(1, 1, 1)  # White<br>    context.paint()<br># Restore the default source which is black.<br>context.move_to(90, 140)<br>context.rotate(-0.5)<br>context.set_font_size(20)<br>context.show_text('Hi from cairo!')<br>surface.write_to_png('example.png')<br></code></pre><p>The <code>Surface</code> represents the target. There are various types of surface for various output backends. The <code>Context</code> holds internal state and is used for drawing. We’re only using solid colors here, but more complex <code>Pattern</code> types are also available.</p><p>Further documentation is available on <a href='https://cairocffi.readthedocs.io/en/stable/'>readthedocs.io</a></p>",
"linkToSite": "https://github.com/Kozea/cairocffi",
"siteName": "github",
"license": "BSD3",
"linkToLicense": "https://github.com/Kozea/cairocffi/blob/master/LICENSE",
"version": "1.3.0",
"installCommand": "cairocffi==1.3.0--hash=sha256:<hash>"
}
},
{
"name": "certifi",
"tags": [ "security" ],
"versions": " 2022.12.7",
"info":
{
"description": "<p>Certifi provides Mozilla’s carefully curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. It has been extracted from the <a href='https://requests.readthedocs.io/en/master/'>Requests</a> project.</p><div>Current sha265 values:<div>(py3) <code>certifi==2022.12.7 --hash=sha256:4ad3232f5e926d6718ec31cfc1fcadfde020920e278684144551c91769c7bc18</code></div></div>",
"usageNotes": "<p>To reference the installed certificate authority (CA) bundle, you can use the built-in function:</p><pre><code>>>> import certifi<br><br>>>> certifi.where()<br>'/usr/local/lib/python3.7/site-packages/certifi/cacert.pem'<br></code></pre><br><p>Or from the command line:</p><br><pre><code><br>$ python -m certifi<br>/usr/local/lib/python3.7/site-packages/certifi/cacert.pem<br></code></pre><p>Additional documentation is available via <a href='https://certifiio.readthedocs.io/en/latest/'>readthedocs.io</a></p>",
"linkToSite": "https://certifiio.readthedocs.io/en/latest/",
"siteName": "readthedocs.io",
"license": "MPL",
"linkToLicense": "https://github.com/certifi/python-certifi/blob/master/LICENSE",
"version": "2022.12.7",
"installCommand": "certifi==2022.12.7--hash=sha256:<hash>"
}
},
{
"name": "cffi",
"tags": [ "languages" ],
"versions": " 1.14.6",
"info":
{
"description": "<p>C Foreign Function Interface for Python. Interact with almost any C code from Python, based on C-like declarations that you can often copy-paste from header files or documentation.</p><div>Current sha265 values:<div>(cp310) <code>cffi==1.14.6 --hash=sha256:b4a0f3f44181f07e85d5f6720b8fa3347c24cb481d32d34d25185ec2ad27f7e6</code></div><div>(cp311) <code>cffi==1.14.6 --hash=sha256:667bffd6ab6ef45bf67d8a05ed5d03300ca0e241eb2b4005661e99fb45f2fc8b</code></div></div>",
"usageNotes": "<p>Full documentation is available on <a href='https://cffi.readthedocs.io/en/latest/overview.html'>readthedocs.io</a>.</p>",
"linkToSite": "https://cffi.readthedocs.io/en/latest/",
"siteName": "readthedocs.io",
"license": "MIT",
"linkToLicense": "https://foss.heptapod.net/pypy/cffi/-/blob/branch/default/LICENSE",
"version": "1.14.6",
"installCommand": "cffi==1.14.6--hash=sha256:<hash>"
}
},
{
"name": "chardet",
"tags": [ "utility" ],
"versions": " 5.0.0",
"info":
{
"description": "<p>Character encoding auto-detection in Python. As smart as your browser. Open source.Character encoding auto-detection in Python. As smart as your browser. Open source.</p><p>Detects:</p><ul><li>ASCII, UTF-8, UTF-16 (2 variants), UTF-32 (4 variants) </li><li>Big5, GB2312, EUC-TW, HZ-GB-2312, ISO-2022-CN (Traditional and Simplified Chinese) </li><li>EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP (Japanese) </li><li>EUC-KR, ISO-2022-KR (Korean) </li><li>KOI8-R, MacCyrillic, IBM855, IBM866, ISO-8859-5, windows-1251 (Cyrillic) </li><li>ISO-8859-5, windows-1251 (Bulgarian) </li><li>ISO-8859-1, windows-1252 (Western European languages) </li><li>ISO-8859-7, windows-1253 (Greek) </li><li>ISO-8859-8, windows-1255 (Visual and Logical Hebrew) </li><li>TIS-620 (Thai) </li></ul><div>Current sha265 values:<div>(py3) <code>chardet==5.0.0 --hash=sha256:94d1ca5fdadb2b4ae24a1f83b8dd15cfe7a735620cc86d626dc50dc271476750</code></div></div>",
"usageNotes": "<p>The easiest way to use the Universal Encoding Detector library is with the <code>detect</code> function.</p><p>The <code>detect</code> function takes one argument, a non-Unicode string. It returns a dictionary containing the auto-detected character encoding and a confidence level from <code>0</code> to <code>1</code>.</p><pre><code>&gt;&gt;&gt; import urllib.request<br>&gt;&gt;&gt; rawdata = urllib.request.urlopen('http://yahoo.co.jp/').read()<br>&gt;&gt;&gt; import chardet<br>&gt;&gt;&gt; chardet.detect(rawdata)<br>{'encoding': 'EUC-JP', 'confidence': 0.99}<br></code></pre><p>Additional docs can be found on <a href='https://chardet.readthedocs.io/en/latest/usage.html#basic-usage'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/chardet/chardet",
"siteName": "github",
"license": "LGPL",
"linkToLicense": "https://github.com/chardet/chardet/blob/master/LICENSE",
"version": "5.0.0",
"installCommand": "chardet==5.0.0--hash=sha256:<hash>"
}
},
{
"name": "charset-normalizer",
"tags": [ "utility" ],
"versions": " 2.1.0",
"info":
{
"description": "<p>A library that helps you read text from an unknown charset encoding.</p><p> Motivated by <code>chardet</code>, this implements various performance improvements in comparison, especially on files about 1MB in size. All IANA character set names for which the Python core library provides codecs are supported.</p><div>Current sha265 values:<div>(py3) <code>charset-normalizer==2.1.0 --hash=sha256:a9fb9096afe6c8ef0ba41d9ab53c0ea1d9d9a12755d881333df314a57c4d318d</code></div></div>",
"usageNotes": "<h4>Basic usage:</h4><pre><code>from charset_normalizer import from_bytes, from_path<br><br># This is going to print out your sequence once properly decoded<br>print(<br>    str(<br>        from_bytes(<br>            my_byte_str<br>        ).best()<br>    )<br>)<br><br># You could also want the same from a file<br>print(<br>    str(<br>        from_path(<br>            './data/sample.1.ar.srt'<br>        ).best()<br>    )<br>)<br></code></pre><h4>Compatibility with <code>chardet</code>:</h4><p>For users familiar with the <code>chardet</code> library, the same <code>detect()</code> function is implemented here. This should be mostly backwards-compatible with <code>chardet</code>, allowing painless migration.</p><pre><code>from charset_normalizer import detect<br><br># This will behave exactly the same as python chardet<br>result = detect(my_byte_str)<br><br>if result['encoding'] is not None:<br>    print('got', result['encoding'], 'as detected encoding')<br></code></pre><p>Further documentation is available on <a href='https://charset-normalizer.readthedocs.io/en/latest/index.html'>readthedocs.io</a></p>",
"linkToSite": "https://github.com/ousret/charset_normalizer",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/Ousret/charset_normalizer/blob/master/LICENSE",
"version": "2.1.0",
"installCommand": "charset-normalizer==2.1.0--hash=sha256:<hash>"
}
},
{
"name": "cycler",
"tags": [ "programming_tools","utility" ],
"versions": " 0.11.0",
"info":
{
"description": "<p>The public API of cycler consists of a class <code>Cycler</code>, a factory function <code>cycler()</code>, and a concatenation function <code>concat()</code>. The factory function provides a simple interface for creating ‘base’ Cycler objects while the class takes care of the composition and iteration logic.</p><div>Current sha265 values:<div>(py3) <code>cycler==0.11.0 --hash=sha256:9a5d8a7d291a226322e0ba5ce133e7055ffb89846bfcf194e8f27215bf97f17b</code></div></div>",
"usageNotes": "<p>A single entry Cycler object can be used to easily cycle over a single style. To create the Cycler use the <code>cycler()</code> function to link a key/style/kwarg to series of values. The key must be hashable (as it will eventually be used as the key in a dict).</p><pre><code>In [1]: from __future__ import print_function<br><br>In [2]: from cycler import cycler<br><br>In [3]: color_cycle = cycler(color=['r', 'g', 'b'])<br><br>In [4]: color_cycle<br>Out[4]: cycler('color', ['r', 'g', 'b'])<br><br></code></pre><p>The Cycler knows it’s length and keys:</p><pre><code>In [5]: len(color_cycle)<br>Out[5]: 3<br><br>In [6]: color_cycle.keys<br>Out[6]: {'color'}<br></code></pre><p>Iterating over this object will yield a series of dict objects keyed on the label</p><pre><code>In [7]: for v in color_cycle:<br>   ...    print(v)<br>   ...   <br>{'color': 'r'}<br>{'color': 'g'}<br>{'color': 'b'}<br></code></pre><p>Cycler objects can be passed as the argument to cycler() which returns a new Cycler with a new label, but the same values.</p><pre><code>In [8]: cycler(ec=color_cycle)<br>Out[8]: cycler('ec', ['r', 'g', 'b'])<br></code></pre><p>Iterating over a Cycler results in the finite list of entries, to get an infinite cycle, call the Cycler object (a-la a generator)</p><pre><code>In [9]: cc = color_cycle()<br>In [10]: for j, c in zip(range(5),  cc):<br>   ...    print(j, c)<br>   ...<br>0 {'color': 'r'}<br>1 {'color': 'g'}<br>2 {'color': 'b'}<br>3 {'color': 'r'}<br>4 {'color': 'g'}<br></code></pre><p>See the <a href='https://matplotlib.org/cycler/'>website</a> for further instructions.</p>",
"linkToSite": "https://matplotlib.org/cycler/",
"siteName": "matplotlib.org",
"license": "BSD3",
"linkToLicense": "https://github.com/matplotlib/cycler/blob/main/LICENSE",
"version": "0.11.0",
"installCommand": "cycler==0.11.0--hash=sha256:<hash>"
}
},
{
"name": "decorator",
"tags": [ "programming_tools" ],
"versions": " 5.1.1",
"info":
{
"description": "<p>The goal of the decorator module is to make it easy to define signature-preserving function decorators and decorator factories. It also includes an implementation of multiple dispatch and other niceties.</p><div>Current sha265 values:<div>(py3) <code>decorator==5.1.1 --hash=sha256:b7b96928da4fe199532fc066c932e3854954249ed01d5596025a0740a07ad4e6</code></div></div>",
"usageNotes": "<p>Here is an example of how to define a family of decorators tracing slow operations:</p><pre><code>from decorator import decorator<br><br>@decorator<br>def warn_slow(func, timelimit=60, *args, **kw):<br>    t0 = time.time()<br>    result = func(*args, **kw)<br>    dt = time.time() - t0<br>    if dt > timelimit:<br>        logging.warn('%s took %d seconds', func.__name__, dt)<br>    else:<br>        logging.info('%s took %d seconds', func.__name__, dt)<br>    return result<br><br>@warn_slow  # warn if it takes more than 1 minute<br>def preprocess_input_files(inputdir, tempdir):<br>    ...<br><br>@warn_slow(timelimit=600)  # warn if it takes more than 10 minutes<br>def run_calculation(tempdir, outdir):<br>    ...<br></code></pre><p>See further documentation <a href='https://github.com/micheles/decorator/blob/master/docs/documentation.md'>here</a>.</p>",
"linkToSite": "https://github.com/micheles/decorator",
"siteName": "github",
"license": "BSD2",
"linkToLicense": "https://github.com/micheles/decorator/blob/master/LICENSE.txt",
"version": "5.1.1",
"installCommand": "decorator==5.1.1--hash=sha256:<hash>"
}
},
{
"name": "defusedxml",
"tags": [ "security" ],
"versions": " 0.7.1",
"info":
{
"description": "<p>The results of an attack on a vulnerable XML library can be fairly dramatic. With just a few hundred Bytes of XML data an attacker can occupy several Gigabytes of memory within seconds. An attacker can also keep CPUs busy for a long time with a small to medium size request. Under some circumstances it is even possible to access local files on your server, to circumvent a firewall, or to abuse services to rebound attacks to third parties.</p><p>The attacks use and abuse less common features of XML and its parsers. The majority of developers are unacquainted with features such as processing instructions and entity expansions that XML inherited from SGML. At best they know about <code>&lt;!DOCTYPE&gt;</code> from experience with HTML but they are not aware that a document type definition (DTD) can generate an HTTP request or load a file from the file system.</p><p>None of the issues is new. They have been known for a long time. Billion laughs was first reported in 2003. Nevertheless some XML libraries and applications are still vulnerable and even heavy users of XML are surprised by these features. It's hard to say whom to blame for the situation. It's too short sighted to shift all blame on XML parsers and XML libraries for using insecure default settings. After all they properly implement XML specifications. Application developers must not rely that a library is always configured for security and potential harmful data by default.</p><p>The defusedxml package contains several Python-only workarounds and fixes for denial of service and other vulnerabilities in Python's XML libraries.</p><div>Current sha265 values:<div>(py3) <code>defusedxml==0.7.1 --hash=sha256:09078b85bd1e6c8c1185dddf14c6dd65293d89698159ce66ca8bca554a3209c0</code></div></div>",
"usageNotes": "<p>In order to benefit from the protection you just have to import and use the listed functions / classes from the right defusedxml module instead of the original module. Merely defusedxml.xmlrpc is implemented as monkey patch.</p><p>Instead of:</p><pre><code>from xml.etree.ElementTree import parse<br>et = parse(xmlfile)<br></code></pre><p>alter code to:</p><pre><code>from defusedxml.ElementTree import parse<br>et = parse(xmlfile)<br></code></pre><p>Additionally the package has an untested function to monkey patch all stdlib modules with <code>defusedxml.defuse_stdlib()</code>.</p><p>Please refer to <a href='https://github.com/tiran/defusedxml#readme'>github</a> for extensive usage notes and tips.</p>",
"linkToSite": "https://github.com/tiran/defusedxml",
"siteName": "github",
"license": "OTHER",
"linkToLicense": "https://github.com/tiran/defusedxml/blob/main/LICENSE",
"version": "0.7.1",
"installCommand": "defusedxml==0.7.1--hash=sha256:<hash>"
}
},
{
"name": "distlib",
"tags": [ "utility" ],
"versions": " 0.3.6",
"info":
{
"description": "<p>Distlib is a library which implements low-level functions that relate to packaging and distribution of Python software.   </p><div>Current sha265 values:<div>(py3) <code>distlib==0.3.6 --hash=sha256:f35c4b692542ca110de7ef0bea44d73981caeb34ca0b9b6b2e6d7790dda8f80e</code></div></div>",
"usageNotes": "<p>For advanced tool documentation, refer to <a href='https://distlib.readthedocs.io/en/latest/'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/pypa/distlib",
"siteName": "https://github.com/pypa/distlib",
"license": "Python Software Foundation",
"linkToLicense": "https://github.com/pypa/distlib/blob/master/LICENSE.txt",
"version": "0.3.6",
"installCommand": "distlib==0.3.6--hash=sha256:<hash>"
}
},
{
"name": "ebcdic",
"tags": [ "na" ],
"versions": " 1.1.1",
"info":
{
"description": "To be added<div>Current sha265 values:<div>(py3) <code>ebcdic==1.1.1--hash=sha256:5f7084965467af4931278f1464629f4c273c41a182248cdbe7b3ad0de4158c2e</code></div></div>",
"usageNotes": "na",
"linkToSite": "na",
"siteName": "na",
"license": "na",
"linkToLicense": "na",
"version": "1.1.1",
"installCommand": "ebcdic==1.1.1--hash=sha256:<hash>"
}
},
{
"name": "entrypoints",
"tags": [ "utility","programming_tools" ],
"versions": " 0.4",
"info":
{
"description": "<p>Entry points are a way for Python packages to advertise objects with some common interface. The most common examples are <code>console_scripts</code> entry points, which define shell commands by identifying a Python function to run.</p><p>Groups of entry points, such as <code>console_scripts</code>, point to objects with similar interfaces. An application might use a group to find its plugins, or multiple groups if it has different kinds of plugins.</p><p>The entrypoints module contains functions to find and load entry points.</p><div>Current sha265 values:<div>(py3) <code>entrypoints==0.4 --hash=sha256:49c1e85ebfaa0d251db6e2d1f6dba2c69316e88907c71048f1cb4cde33aac320</code></div></div>",
"usageNotes": "<p>To use this image, refer to <a href='https://github.com/takluyver/entrypoints/blob/master/README.rst'>github</a> and the <a href='https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/#entry-points'>entry_points</a> section of the Python Packaging User Guide.</p>",
"linkToSite": "https://github.com/takluyver/entrypoints",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/takluyver/entrypoints/blob/master/LICENSE",
"version": "0.4",
"installCommand": "entrypoints==0.4--hash=sha256:<hash>"
}
},
{
"name": "executing",
"tags": [ "utility" ],
"versions": " 1.2.0",
"info":
{
"description": "<p>Get the currently executing AST node of a frame, and other information. This mini-package lets you get information about what a frame is currently doing, particularly the AST node being executed.</p><div>Current sha265 values:<div>(py3) <code>executing==1.2.0 --hash=sha256:0314a69e37426e3608aada02473b4161d4caf5a4b244d1d0c48072b8fee7bacc</code></div></div>",
"usageNotes": "<h3>Getting the AST node:</h3><pre><code>import executing<br><br>node = executing.Source.executing(frame).node<br></code></pre><p>Then <code>node</code> will be an AST node (from the <code>ast</code> standard library module) or None if the node couldn't be identified (which may happen often and should always be checked).</p><p><code>node</code> will always be the same instance for multiple calls with frames at the same point of execution.</p><p>If you have a traceback object, pass it directly to <code>Source.executing()</code> rather than the <code>tb_frame</code> attribute to get the correct node.</p><h3>Getting the source code of the node:</h3><p>For this you will need to separately install the <code>asttokens</code> library, then obtain an <code>ASTTokens</code> object:</p><pre><code>executing.Source.executing(frame).source.asttokens()<br></code></pre><p>or:</p><pre><code>executing.Source.for_frame(frame).asttokens()<br></code></pre><p>or use one of the convenience methods:</p><pre><code>executing.Source.executing(frame).text()<br>executing.Source.executing(frame).text_range()<br></code></pre><h3>Getting the __qualname__ of the current function:</h3><pre><code>executing.Source.executing(frame).code_qualname()<br></code></pre><p>or:</p><pre><code>executing.Source.for_frame(frame).code_qualname(frame.f_code)<br></code></pre><h3>The Source class:</h3><p>Everything goes through the <code>Source</code> class. Only one instance of the class is created for each filename. Subclassing it to add more attributes on creation or methods is recommended. The classmethods such as <code>executing</code> will respect this. See the source code and docstrings for more detail.</p>",
"linkToSite": "https://github.com/alexmojaki/executing",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/alexmojaki/executing/blob/master/LICENSE.txt",
"version": "1.2.0",
"installCommand": "executing==1.2.0--hash=sha256:<hash>"
}
},
{
"name": "fastjsonschema",
"tags": [ "languages" ],
"versions": " 2.15.3",
"info":
{
"description": "<p>Fastest Python implementation of JSON schema.</p><p><code>fastjsonschema</code> implements validation of JSON documents by JSON schema. The library implements JSON schema drafts 04, 06 and 07. The main purpose is to have a really fast implementation.</p><div>Current sha265 values:<div>(py3) <code>fastjsonschema==2.15.3 --hash=sha256:865ce7445a01980c71db1a3c3c7624621dc5cad6ec381a231e9a2c575aeda48c</code></div></div>",
"usageNotes": "<p>Full documentation is available <a href='https://horejsek.github.io/python-fastjsonschema/'>here</a>.</p>",
"linkToSite": "https://horejsek.github.io/python-fastjsonschema/",
"siteName": "github.io",
"license": "BSD3",
"linkToLicense": "https://github.com/horejsek/python-fastjsonschema/blob/master/LICENSE",
"version": "2.15.3",
"installCommand": "fastjsonschema==2.15.3--hash=sha256:<hash>"
}
},
{
"name": "filelock",
"tags": [ "utility" ],
"versions": " 3.9.0",
"info":
{
"description": "<p>This package contains a single module, which implements a platform independent file lock in Python, which provides a simple way of inter-process communication. </p><div>Current sha265 values:<div>(py3) <code>filelock==3.9.0 --hash=sha256:f58d535af89bb9ad5cd4df046f741f8553a418c01a7856bf0d173bbc9f6bd16d</code></div></div>",
"usageNotes": "<p>For advanced tool documentation, refer to <a href='https://py-filelock.readthedocs.io/en/latest/index.html'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/tox-dev/py-filelock",
"siteName": "https://github.com/tox-dev/py-filelock",
"license": "Unlicense",
"linkToLicense": "https://github.com/tox-dev/py-filelock/blob/main/LICENSE",
"version": "3.9.0",
"installCommand": "filelock==3.9.0--hash=sha256:<hash>"
}
},
{
"name": "flask",
"tags": [ "web" ],
"versions": " 2.0.2",
"info":
{
"description": "<p>Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around Werkzeug and Jinja and has become one of the most popular Python web application frameworks.</p><p>Flask offers suggestions, but doesn’t enforce any dependencies or project layout. It is up to the developer to choose the tools and libraries they want to use. There are many extensions provided by the community that make adding new functionality easy.</p><div>Current sha265 values:<div>(py3) <code>flask==2.0.2 --hash=sha256:9bc3ffe78eab96550031cbb81e2252b614b92973f12b1107ae10e843e7e1985b</code></div></div>",
"usageNotes": "<h4>A simple example:</h4><pre><code># save this as app.py<br>from flask import Flask<br><br>app = Flask(__name__)<br><br>@app.route(&ldquo;/&ldquo;)<br>def hello():<br>    return &ldquo;Hello, World!&ldquo;<br></code></pre><br><pre><code>$ flask run<br>  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)<br></code></pre><p>Accessing <code>http://127.0.0.1:5000/</code> should now bring up the &ldquo;Hello, World!&ldquo; page!</p><p>Further usage notes are available <a href='https://flask.palletsprojects.com/en/2.0.x/'>here</a>.</p>",
"linkToSite": "https://palletsprojects.com/p/flask/",
"siteName": "palletsprojects.com/p/flask",
"license": "BSD3",
"linkToLicense": "https://github.com/pallets/flask/blob/main/LICENSE.rst",
"version": "2.0.2",
"installCommand": "flask==2.0.2--hash=sha256:<hash>"
}
},
{
"name": "fontconfig",
"tags": [ "utility" ],
"versions": " 2.14.1",
"info":
{
"description": "<p>Fontconfig is a library for configuring and customizing font access. </p><p>Fontconfig can: </p><ul><li>discover new fonts when installed automatically, removing a common source of configuration problems. </li><li>perform font name substitution, so that appropriate alternative fonts can be selected if fonts are missing. </li><li>identify the set of fonts required to completely cover a set of languages. </li><li>have GUI configuration tools built as it uses an XML-based configuration file (though with autodiscovery, we believe this need is minimized). </li><li>efficiently and quickly find the fonts you need among the set of fonts you have installed, even if you have installed thousands of fonts, while minimzing memory usage. </li><li>be used in concert with the X Render Extension and <a href='https://www.freedesktop.org/wiki/Software/FreeType/'>FreeType</a> to implement high quality, anti-aliased and subpixel rendered text on a display. </li></ul><p>Fontconfig does not: </p><ul><li>render the fonts themselves (this is left to FreeType or other rendering mechanisms) </li><li>depend on the X Window System in any fashion, so that printer only applications do not have such dependencies </li></ul><div>Current sha265 values:<div>(py3) <code>fontconfig==2.14.1 --hash=sha256:f0914abdfd034acf83b39bc1f7513c9a00a84795adaffe2b6c2bfa8ab7c73d92</code></div></div>",
"usageNotes": "<p>Please refer to <a href='https://www.freedesktop.org/software/fontconfig/fontconfig-user.html'>freedesktop.org</a> for complete documentation.</p>",
"linkToSite": "https://www.freedesktop.org/wiki/Software/fontconfig/",
"siteName": "freedesktop.org",
"license": "OTHER",
"linkToLicense": "https://github.com/freedesktop/fontconfig/blob/master/COPYING",
"version": "2.14.1",
"installCommand": "fontconfig==2.14.1--hash=sha256:<hash>"
}
},
{
"name": "freetype2",
"tags": [ "graphics" ],
"versions": " 2.12.2",
"info":
{
"description": "<p>FreeType is a software font engine that is designed to be small, efficient, highly customizable, and portable while capable of producing high-quality output (glyph images). It can be used in graphics libraries, display servers, font conversion tools, text image generation tools, and many other products as well.</p><p>Note that FreeType is a font service and doesn't provide APIs to perform higher-level features like text layout or graphics processing (e.g., colored text rendering, ‘hollowing’, etc.). However, it greatly simplifies these tasks by providing a simple, easy to use, and uniform interface to access the content of font files.</p><p>Please note that ‘FreeType’ is also called ‘FreeType 2’, to distinguish it from the old, deprecated ‘FreeType 1’ library, a predecessor no longer maintained and supported.</p><div>Current sha265 values:<div>(py3) <code>freetype2==2.12.2--hash=sha256:17ab65cda7aa6830db2c3b936236c8081c10dfd4c5a5d76d4c36a07cc45d3499</code></div></div>",
"usageNotes": "<p>Please refer to documentation on <a href='https://freetype.org/freetype2/docs/documentation.html'>freetype.org</a>.</p>",
"linkToSite": "https://freetype.org/freetype2/docs/index.html",
"siteName": "freetype.org",
"license": "OTHER",
"linkToLicense": "https://gitlab.freedesktop.org/freetype/freetype/-/blob/master/LICENSE.TXT",
"version": "2.12.2",
"installCommand": "freetype2==2.12.2--hash=sha256:<hash>"
}
},
{
"name": "glib",
"tags": [ "graphics" ],
"versions": " 2.56.4",
"info":
{
"description": "<p>This is a python graphics library that piggy-backs off of pyqt5</p><h1>Problem: No link to source repo AT ALL on <a herf='https://pypi.org/project/glib/'>pypi.org</a>. Must fix!</h1><div>Current sha265 values:<div>(py3) <code>glib==2.56.4 --hash=sha256:06150a7e52afe8317d8843e13b55a8f8f6b99af3f35721e9bd3322a12e2c3693</code></div></div>",
"usageNotes": "na",
"linkToSite": "na",
"siteName": "na",
"license": "na",
"linkToLicense": "na",
"version": "2.56.4",
"installCommand": "glib==2.56.4--hash=sha256:<hash>"
}
},
{
"name": "harfbuzz",
"tags": [ "graphics","languages" ],
"versions": " 6.0.0",
"info":
{
"description": "<p> HarfBuzz is a text shaping library. Using the HarfBuzz library allows programs to convert a sequence of Unicode input into properly formatted and positioned glyph output—for any writing system and language. </p><div>Current sha265 values:<div>(py3) <code>harfbuzz==6.0.0 --hash=sha256:c0a28dca275ab068c715e0f5d90dcd2549b183590ba7dafc6db5c2d1057e4f2c</code></div></div>",
"usageNotes": "<p>Please see the <a href='https://harfbuzz.github.io/user-manual.html'>user manual</a> for instructions on how to use this image.</p>",
"linkToSite": "https://harfbuzz.github.io/",
"siteName": "harfbuzz.github.io",
"license": "OTHER",
"linkToLicense": "https://github.com/harfbuzz/harfbuzz/blob/main/COPYING",
"version": "6.0.0",
"installCommand": "harfbuzz==6.0.0--hash=sha256:<hash>"
}
},
{
"name": "heapdict",
"tags": [ "na" ],
"versions": " 1.0.1",
"info":
{
"description": "</p>heapdict implements the MutableMapping ABC, meaning it works pretty much like a regular Python dict. It’s designed to be used as a priority queue. </p><p>Compared to an ordinary dict, a heapdict has the following differences:</p><p>popitem():<br>     - Remove and return the (key, priority) pair with the lowest priority, instead of a random object.</p><p>peekitem():<br>     - Return the (key, priority) pair with the lowest priority, without removing it. </p><p>Unlike the Python standard library’s heapq module, the heapdict supports efficiently changing the priority of an existing object (often called “decrease-key” in textbooks). Altering the priority is important for many algorithms such as Dijkstra’s Algorithm and A*.</p><h1>Link to site on pypi.org is blocked by IBM firewall for GAMBLING. This one is getting me in trouble! I don't like that!</h1><div>Current sha265 values:<div>(py3) <code>heapdict==1.0.1 --hash=sha256:8faa6f10f7581117cad3195cb00d80792b08f7c534c99b1e294b869b6eb0c94f</code></div></div>",
"usageNotes": "na",
"linkToSite": "na",
"siteName": "na",
"license": "na",
"linkToLicense": "na",
"version": "1.0.1",
"installCommand": "heapdict==1.0.1--hash=sha256:<hash>"
}
},
{
"name": "idna",
"tags": [ "languages","utility" ],
"versions": " 3.3",
"info":
{
"description": "<p>Support for the Internationalised Domain Names in Applications (IDNA) protocol as specified in <a href='https://tools.ietf.org/html/rfc5891'>RFC 5891</a>. This is the latest version of the protocol and is sometimes referred to as “IDNA 2008”.</p><p>This library also provides support for Unicode Technical Standard 46, <a href='https://unicode.org/reports/tr46/'>Unicode IDNA Compatibility Processing</a>.</p><p>This acts as a suitable replacement for the “encodings.idna” module that comes with the Python standard library, but which only supports the older superseded IDNA specification <a href='https://tools.ietf.org/html/rfc3490'>(RFC 3490)</a>.</p><div>Current sha265 values:<div>(py3) <code>idna==3.3 --hash=sha256:1ed8c0d7826bbde921eef0023f9253acbec94cb7338ad1973251ce10592d0355</code></div></div>",
"usageNotes": "<p>For typical usage, the <code>encode</code> and <code>decode</code> functions will take a domain name argument and perform a conversion to A-labels or U-labels respectively.</p><pre><code>&gt;&gt;&gt; import idna<br>&gt;&gt;&gt; idna.encode('ドメイン.テスト')<br>b'xn--eckwd4c7c.xn--zckzah'<br>&gt;&gt;&gt; print(idna.decode('xn--eckwd4c7c.xn--zckzah'))<br>ドメイン.テスト<br></code></pre><p>You may use the codec encoding and decoding methods using the idna.codec module:</p><pre><code>&gt;&gt;&gt; import idna.codec<br>&gt;&gt;&gt; print('домен.испытание'.encode('idna'))<br>b'xn--d1acufc.xn--80akhbyknj4f'<br>&gt;&gt;&gt; print(b'xn--d1acufc.xn--80akhbyknj4f'.decode('idna'))<br>домен.испытание<br></code></pre><p>Conversions can be applied at a per-label basis using the ulabel or alabel functions if necessary:</p><pre><code>>>> idna.alabel('测试')<br>b'xn--0zwm56d'<br></code></pre><p>Please refer to <a href='https://github.com/kjd/idna/blob/master/README.rst'>github</a> for further usage instructions.</p>",
"linkToSite": "https://github.com/kjd/idna",
"siteName": "github",
"license": "BSD3",
"linkToLicense": "https://github.com/kjd/idna/blob/master/LICENSE.md",
"version": "3.3",
"installCommand": "idna==3.3--hash=sha256:<hash>"
}
},
{
"name": "importlib_metadata",
"tags": [ "utility" ],
"versions": " 4.10.0",
"info":
{
"description": "<p>Library to access the metadata for a Python package.</p><p>This package supplies third-party access to the functionality of <a href='https://docs.python.org/3/library/importlib.metadata.html'>importlib.metadata</a> including improvements added to subsequent Python versions.</p><div>Current sha265 values:<div>(py3) <code>importlib-metadata==4.10.0 --hash=sha256:26d991b239cd7aedce579f582dc125e72792f837f1032706842d47cc633728e5</code></div></div>",
"usageNotes": "<p>Let’s say you wanted to get the version string for a package you’ve installed using pip. We start by creating a virtual environment and installing something into it:</p><pre><code>$ python3 -m venv example<br>$ source example/bin/activate<br>(example) $ pip install importlib_metadata<br>(example) $ pip install wheel<br></code></pre><p>You can get the version string for <code>wheel</code> by running the following:</p><pre><code>(example) $ python<br>&gt;&gt;&gt; from importlib_metadata import version<br>&gt;&gt;&gt; version('wheel')<br>'0.32.3'<br></code></pre><p>You can also get a collection of entry points selectable by properties of the EntryPoint (typically ‘group’ or ‘name’), such as <code>console_scripts</code>, <code>distutils.commands</code> and others. Each group contains a collection of EntryPoint objects.</p><p>You can get the metadata for a distribution:</p><pre><code>&gt;&gt;&gt; list(metadata('wheel'))<br>['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', 'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', 'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', 'Requires-Dist']<br></code></pre><p>Please refer to the <a href='https://importlib-metadata.readthedocs.io/en/latest/using.html#using'>readthedocs.io</a> guide for more instructions on using this package.</p>",
"linkToSite": "https://github.com/python/importlib_metadata",
"siteName": "github",
"license": "APACHE2",
"linkToLicense": "https://github.com/python/importlib_metadata/blob/main/LICENSE",
"version": "4.10.0",
"installCommand": "importlib_metadata==4.10.0--hash=sha256:<hash>"
}
},
{
"name": "importlib_resources",
"tags": [ "programming_tools" ],
"versions": " 5.8.0",
"info":
{
"description": "<p><code>importlib_resources</code> is a backport of Python standard library <a href='https://docs.python.org/3/library/importlib.html#module-importlib.resources'>importlib.resources</a> module for older Pythons.</p><p>The key goal of this module is to replace parts of <a href='https://setuptools.readthedocs.io/en/latest/pkg_resources.html'>pkg_resources</a> with a solution in Python's stdlib that relies on well-defined APIs. This makes reading resources included in packages easier, with more stable and consistent semantics.</p><div>Current sha265 values:<div>(py3) <code>importlib-resources==5.8.0 --hash=sha256:0d3cfa39a26f3ea991cbc07a1cf4213606573b8d54e8799e04a33a82d9d1abe4</code></div></div>",
"usageNotes": "<h4>Example of usage:</h4><p>Let’s say you are writing an email parsing library and in your test suite you have a sample email message in a file called <code>message.eml</code>. You would like to access the contents of this file for your tests, so you put this in your project under the <code>email/tests/data/message.eml</code> path. Let’s say your unit tests live in <code>email/tests/test_email.py</code>.</p><p>Your test could read the data file by doing something like:</p><pre><code>data_dir = os.path.join(os.path.dirname(__file__), 'tests', 'data')<br>data_path = os.path.join(data_dir, 'message.eml')<br>with open(data_path, encoding='utf-8') as fp:<br>    eml = fp.read()<br></code></pre><p>But there’s a problem with this! The use of <code>__file__</code> doesn’t work if your package lives inside a zip file, since in that case this code does not live on the file system.</p><p><code>importlib_resources</code> provides a performant solution to this scenario by being built entirely on the back of the stdlib <code>importlib</code>. By taking advantage of all the efficiencies in Python’s import system, and the fact that it’s built into Python, using <code>importlib_resources</code> can be extremely performant. Our solution using <code>importlib_resources</code> would look like:</p><pre><code>from importlib_resources import files<br># Reads contents with UTF-8 encoding and returns str.<br>eml = files('email.tests.data').joinpath('message.eml').read_text()<br></code></pre><p>Further usage notes are available on <a href='https://importlib-resources.readthedocs.io/en/latest/using.html'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/python/importlib_resources",
"siteName": "github",
"license": "APACHE2",
"linkToLicense": "https://github.com/python/importlib_resources/blob/main/LICENSE",
"version": "5.8.0",
"installCommand": "importlib_resources==5.8.0--hash=sha256:<hash>"
}
},
{
"name": "iniconfig",
"tags": [ "programming_tools","utility" ],
"versions": " 2.0.0",
"info":
{
"description": "<p>Brain-dead simple parsing of ini files.</p><p>iniconfig is a small and simple INI-file parser module having a unique set of features:</p><ul><li>tested against Python2.4 across to Python3.2, Jython, PyPy</li><li>maintains order of sections and entries</li><li>supports multi-line values with or without line-continuations</li><li>supports “#” comments everywhere</li><li>raises errors with proper line-numbers</li><li>no bells and whistles like automatic substitutions</li><li>iniconfig raises an Error if two sections have the same name.</li></ul><div>Current sha265 values:<div>(py3) <code>iniconfig==2.0.0 --hash=sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374</code></div></div>",
"usageNotes": "<h4>Basic Example:</h4><p>If you have an ini file like this:</p><pre><code># content of example.ini<br>[section1] # comment<br>name1=value1  # comment<br>name1b=value1,value2  # comment<br><br>[section2]<br>name2=<br>    line1<br>    line2<br></code></pre><p>then you can perform:</p><pre><code>&gt;&gt;&gt; import iniconfig<br>&gt;&gt;&gt; ini = iniconfig.IniConfig(&ldquo;example.ini&ldquo;)<br>&gt;&gt;&gt; ini['section1']['name1'] # raises KeyError if not exists<br>'value1'<br>&gt;&gt;&gt; ini.get('section1', 'name1b', [], lambda x: x.split(&ldquo;,&ldquo;))<br>['value1', 'value2']<br>&gt;&gt;&gt; ini.get('section1', 'notexist', [], lambda x: x.split(&ldquo;,&ldquo;))<br>[]<br>&gt;&gt;&gt; [x.name for x in list(ini)]<br>['section1', 'section2']<br>&gt;&gt;&gt; list(list(ini)[0].items())<br>[('name1', 'value1'), ('name1b', 'value1,value2')]<br>&gt;&gt;&gt; 'section1' in ini<br>True<br>&gt;&gt;&gt; 'inexistendsection' in ini<br>False<br></code></pre>",
"linkToSite": "https://github.com/pytest-dev/iniconfig",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/pytest-dev/iniconfig/blob/master/LICENSE",
"version": "2.0.0",
"installCommand": "iniconfig==2.0.0--hash=sha256:<hash>"
}
},
{
"name": "ipython-gentuils",
"tags": [ "na" ],
"versions": " 0.3.0",
"info":
{
"description": "<p>Pretend this doesn’t exist. Nobody should use it.</p><h1>Obviously this description raises eyebrows</h1><div>Current sha265 values:<div>(py3) <code>ipython-genutils==0.3.0 --hash=sha256:d9411249d0a53101a0482e3a66166b443e68da1b4b1b337aea4acba94a640a74</code></div></div>",
"usageNotes": "<p>TBA</p>",
"linkToSite": "http://ipython.org/",
"siteName": "ipython.org",
"license": "BSD3",
"linkToLicense": "https://github.com/ipython/ipython_genutils/blob/master/COPYING.md",
"version": "0.3.0",
"installCommand": "ipython-gentuils==0.3.0--hash=sha256:<hash>"
}
},
{
"name": "itsdangerous",
"tags": [ "security" ],
"versions": " 2.1.2",
"info":
{
"description": "<p>'… so better sign this'</p><p>Various helpers to pass data to untrusted environments and to get it back safe and sound. Data is cryptographically signed to ensure that a token has not been tampered with.</p><p>It’s possible to customize how data is serialized. Data is compressed as needed. A timestamp can be added and verified automatically while loading a token.</p><div>Current sha265 values:<div>(py3) <code>itsdangerous==2.1.2 --hash=sha256:51eb7c970c4feead7f18525f75a1aac91c60decd0c1342f313c8c2d8511a8c51</code></div></div>",
"usageNotes": "<p>A Simple Example:<br>Here’s how you could generate a token for transmitting a user’s id and name between web requests.</p><p><code>from itsdangerous import URLSafeSerializer<br>auth_s = URLSafeSerializer(&ldquo;secret key&ldquo;, &ldquo;auth&ldquo;)<br>token = auth_s.dumps({&ldquo;id&ldquo;: 5, &ldquo;name&ldquo;: &ldquo;itsdangerous&ldquo;})<br><br>print(token)<br># eyJpZCI6NSwibmFtZSI6Iml0c2Rhbmdlcm91cyJ9.6YP6T0BaO67XP--9UzTrmurXSmg<br><br>data = auth_s.loads(token)<br>print(data[&ldquo;name&ldquo;])<br># itsdangerous<br></code></p><p>See the <a href='https://itsdangerous.palletsprojects.com/en/2.1.x/'>package documentation</a> for more information.</p>",
"linkToSite": "https://palletsprojects.com/p/itsdangerous/",
"siteName": "palletsprojects.com/p/itsdangerous",
"license": "BSD3",
"linkToLicense": "https://github.com/pallets/itsdangerous/blob/main/LICENSE.rst",
"version": "2.1.2",
"installCommand": "itsdangerous==2.1.2--hash=sha256:<hash>"
}
},
{
"name": "jedi",
"tags": [ "programming_tools","utility" ],
"versions": " 0.18.1",
"info":
{
"description": "<p>Jedi is a static analysis tool for Python that is typically used in IDEs/editors plugins. Jedi has a focus on autocompletion and goto functionality. Other features include refactoring, code search and finding references.</p><div>Current sha265 values:<div>(py3) <code>jedi==0.18.1 --hash=sha256:9933a5afe1a23f9292bb8c60d1bd662ff9e2ed1bfc5659c6db59fb16630ecfe8</code></div></div>",
"usageNotes": "<p>Here’s a simple example of the autocompletion feature:</p><pre><code>&gt;&gt;&gt; import jedi<br>&gt;&gt;&gt; source = '''<br>... import json<br>... json.lo'''<br>&gt;&gt;&gt; script = jedi.Script(source, path='example.py')<br>&gt;&gt;&gt; script<br><Script: 'example.py' ...><br>&gt;&gt;&gt; completions = script.complete(3, len('json.lo'))<br>&gt;&gt;&gt; completions<br>[<Completion: load>, <Completion: loads>]<br>&gt;&gt;&gt; print(completions[0].complete)<br>ad<br>&gt;&gt;&gt; print(completions[0].name)<br>load<br></code></pre><p>Further documentation should be referenced on <a href='https://jedi.readthedocs.io/en/latest/'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/davidhalter/jedi",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/davidhalter/jedi/blob/master/LICENSE.txt",
"version": "0.18.1",
"installCommand": "jedi==0.18.1--hash=sha256:<hash>"
}
},
{
"name": "jupyter",
"tags": [ "math" ],
"versions": " 1.1.0",
"info":
{
"description": "<p>Jupyter metapackage. Install all the Jupyter components in one go.</p><p>This will install the Jupyter system, including the notebook, qtconsole, and the IPython kernel.</p><div>Current sha265 values:<div>(py3) <code>jupyter==1.1.0 --hash=sha256:52dc0a9d37ea49189700cea3722afd89d5d781ace2c2954fae16e733b80c55ca</code></div></div>",
"usageNotes": "<p>Documentation for each of the included components can be found on <a href='https://docs.jupyter.org/en/latest/'>jupyter.org</a>.</p>",
"linkToSite": "https://jupyter.org/",
"siteName": "jupyter.org",
"license": "BSD3",
"linkToLicense": "https://opensource.org/licenses/BSD-3-Clause",
"version": "1.1.0",
"installCommand": "jupyter==1.1.0--hash=sha256:<hash>"
}
},
{
"name": "jupyter-cms",
"tags": [ "web","graphics","languages" ],
"versions": " 0.7.0",
"info":
{
"description": "<p>Content management extensions for Jupyter / IPython Notebook.</p><p>The content management extensions provide the following:</p><ul><li>Search dialog on dashboard, editor, and notebook screens to search over filenames and <code>.ipynb</code> content in the notebook directory</li><li>IPython kernel extension to make Python notebooks reusable as modules and cookbooks (see the <a href='https://github.com/jupyter-incubator/contentmanagement/blob/master/etc/notebooks/cookbooks_demo/use_cookbooks.ipynb'>cookbooks tutorial</a>)</li><li>Full-page drag-and-drop upload target</li><li>Pop-over table of contents navigation for notebooks</li></ul><div>Current sha265 values:<div>(py3) <code>jupyter-cms==0.7.0 --hash=sha256:ef333f779063a0e147cb08ab0553759e38627d5d8e340371166b8458be690cb9</code></div></div>",
"usageNotes": "<a>Please refer to the example notebooks provided on <a href='https://github.com/jupyter-incubator/contentmanagement/tree/master/etc/notebooks/cookbooks_demo'>github</a> for usage examples.</p>",
"linkToSite": "https://github.com/jupyter-incubator/contentmanagement",
"siteName": "github",
"license": "BSD3",
"linkToLicense": "https://github.com/jupyter-incubator/contentmanagement/blob/master/LICENSE.md",
"version": "0.7.0",
"installCommand": "jupyter-cms==0.7.0--hash=sha256:<hash>"
}
},
{
"name": "jupyter-core",
"tags": [ "base" ],
"versions": " 4.10.0",
"info":
{
"description": "<p>Jupyter core package. A base package on which Jupyter projects rely.</p><p>This package contains base application classes and configuration inherited by other projects. It doesn't do much on its own.</p><div>Current sha265 values:<div>(py3) <code>jupyter-core==4.10.0 --hash=sha256:118dac7945bad78831cced85ae6e3adfb3dcdbd4a39b14699023a6aa2975b528</code></div></div>",
"usageNotes": "<p>This package does very little on its own, but Jupyter documentation is available at <a href='https://docs.jupyter.org/en/latest/'>docs.jupyter.org</a>.</p>",
"linkToSite": "https://jupyter.org/",
"siteName": "jupyter.org",
"license": "BSD3",
"linkToLicense": "https://github.com/jupyter/jupyter_core/blob/main/COPYING.md",
"version": "4.10.0",
"installCommand": "jupyter-core==4.10.0--hash=sha256:<hash>"
}
},
{
"name": "kiwisolver",
"tags": [ "math" ],
"versions": " 1.4.4",
"info":
{
"description": "<p>Kiwi is an efficient C++ implementation of the Cassowary constraint solving algorithm. Kiwi is an implementation of the algorithm based on the <a href='https://constraints.cs.washington.edu/solvers/cassowary-tochi.pdf'>seminal Cassowary paper</a>. It is not a refactoring of the original C++ solver. Kiwi has been designed from the ground up to be lightweight and fast. Kiwi ranges from 10x to 500x faster than the original Cassowary solver with typical usecases gaining a 40x improvement. Memory savings are consistently > 5x.</p><p>In addition to the C++ solver, Kiwi ships with hand-rolled Python bindings for Python 3.7+.</p><div>Current sha265 values:<div>(cp310) <code>kiwisolver==1.4.4 --hash=sha256:94f45fd0e9164480a72674fc125621d4e5f6f8a2fdc99559160dc8cac6aa73db</code></div><div>(cp311) <code>kiwisolver==1.4.4--hash=sha256:02e278e80a1d8ff0087a9bafa3c9a56aff9eabc33b81d5e861bb99d5fc7e9a14</code></div></div>",
"usageNotes": "<p>Syntactical notes on the use of Kiwisolver are available on <a href='https://kiwisolver.readthedocs.io/en/latest/basis/index.html'>readthedocs.io</a>. These will cover basic usage such as creating a system of constraints, and solving and updating it. However, using this project generally will require familiarity with Cassowary, or with constraints solvers in general. Readthedocs.io also provides real-world <a href='https://kiwisolver.readthedocs.io/en/latest/use_cases/index.html'>use cases</a> to help explain the package's usage in practice.</p>",
"linkToSite": "https://github.com/nucleic/kiwi",
"siteName": "github",
"license": "BSD3",
"linkToLicense": "https://github.com/nucleic/kiwi/blob/main/LICENSE",
"version": "1.4.4",
"installCommand": "kiwisolver==1.4.4--hash=sha256:<hash>"
}
},
{
"name": "libcairo",
"tags": [ "graphics" ],
"versions": " 1.17.4",
"info":
{
"description": "<p>Cairo (stylized as cairo) is an open-source graphics library that provides a vector graphics-based, device-independent API for software developers. </p><div>Current sha265 values:<div>(py3) <code>libcairo==1.17.4 --hash=sha256:23db1c913d6720e65f41bff2b538fcafec61ed7af9e69e1ae602f8017275579a</code></div></div>",
"usageNotes": "<p>The cairo manual is available on <a href='https://www.cairographics.org/documentation/'>cairographics.org</a>.</p>",
"linkToSite": "https://www.cairographics.org/",
"siteName": "cairographics.org",
"license": "LGPL-2.1",
"linkToLicense": "https://github.com/freedesktop/cairo/blob/master/COPYING-LGPL-2.1",
"version": "1.17.4",
"installCommand": "libcairo==1.17.4--hash=sha256:<hash>"
}
},
{
"name": "libjpeg-turbo",
"tags": [ "graphics" ],
"versions": " 9e",
"info":
{
"description": "<p>Libjpeg is a widely used C library for reading and writing JPEG image files. </p><div>Current sha265 values:<div>(py3) <code>libjpeg-turbo==2.1.4 --hash=sha256:790ab4b147798c411f6f76ca81ceaaff75f0f6dfcd5833385536b828482c2a1f</code></div></div>",
"usageNotes": "<p>The libpng manual is available on <a href='http://www.faqs.org/faqs/jpeg-faq/'>faqs.org</a>.</p>",
"linkToSite": "https://libjpeg.sourceforge.net/",
"siteName": "sourceforge.net",
"license": "OTHER",
"linkToLicense": "https://jpegclub.org/reference/libjpeg-license/",
"version": "9e",
"installCommand": "libjpeg-turbo==9e--hash=sha256:<hash>"
}
},
{
"name": "libpng",
"tags": [ "graphics" ],
"versions": " 1.6.39",
"info":
{
"description": "<p>libpng is the official PNG reference library. It supports almost all PNG features, is extensible, and has been extensively tested for over 23 years. </p><div>Current sha265 values:<div>(py3) <code>libpng==1.6.39 --hash=sha256:7339f4365a1e2cac27bb06aad2c5f79f3c643a3ea65efc16cca27b42dbf5f0eb</code></div></div>",
"usageNotes": "<p>The libpng manual is available on <a href='http://www.libpng.org/pub/png/libpng-manual.txt'>libpng.org</a>.</p>",
"linkToSite": "http://www.libpng.org/pub/png/libpng.html",
"siteName": "libpng.org",
"license": "OTHER",
"linkToLicense": "http://www.libpng.org/pub/png/src/libpng-LICENSE.txt",
"version": "1.6.39",
"installCommand": "libpng==1.6.39--hash=sha256:<hash>"
}
},
{
"name": "libtiff",
"tags": [ "graphics","utility" ],
"versions": " 4.4.0",
"info":
{
"description": "<p>PyLibTiff is a package that provides:</p>    <p>1- a wrapper to the <a href='http://www.simplesystems.org/libtiff/'>libtiff</a> library to Python using <a href='http://docs.python.org/library/ctypes.html'>ctypes</a>.</p>    <p>2 - a pure Python module for reading and writing TIFF and LSM files. The images are read as <code>numpy.memmap</code> objects so that it is possible to open images that otherwise would not fit to computers RAM. Both TIFF strips and tiles are supported for low-level data storage.</p><p>There exists many Python packages that support reading and writing TIFF files. The PyLibTiff project was started to have an efficient and direct way to read and write TIFF files using the libtiff library without the need to install any unnecessary packages or libraries. The pure Python module was created for reading 'broken' TIFF files such as LSM files that in some places use different interpretation of TIFF tags than what specified in the TIFF specification document. The libtiff library would just fail reading such files. In addition, the pure Python module is more memory efficient as the arrays are returned as memory maps. Support for compressed files is not implemented yet.</p><div>Current sha265 values:<div>(py3) <code>libtiff==4.4.0 --hash=sha256:dac98a04ff91852f9aab0ead8c927f586cc1b72848357d4e2a71b99c36e8300f</code></div></div>",
"usageNotes": "<p>Example usage of package:</p><pre><code>&gt;&gt;&gt; from libtiff import TIFFfile, TIFFimage<br>&gt;&gt;&gt; # to open a tiff file for reading<br>&gt;&gt;&gt; tif = TIFFfile('filename.tif')<br>&gt;&gt;&gt; # to return memmaps of images and sample names (eg channel names, SamplesPerPixel>=1)<br>&gt;&gt;&gt; samples, sample_names = tiff.get_samples()<br>&gt;&gt;&gt; # to create a tiff structure from image data<br>&gt;&gt;&gt; tiff = TIFFimage(data, description='')<br>&gt;&gt;&gt; # to write tiff structure to file<br>&gt;&gt;&gt; tiff.write_file('filename.tif', compression='none') # or 'lzw'<br>&gt;&gt;&gt; del tiff # flushes data to disk<br></code></pre><p>Additional usage notes are available on <a href='https://github.com/pearu/pylibtiff/blob/master/README.md'>github</a>.</p>",
"linkToSite": "https://github.com/pearu/pylibtiff",
"siteName": "github",
"license": "BSD3",
"linkToLicense": "https://github.com/pearu/pylibtiff/blob/master/LICENSE",
"version": "4.4.0",
"installCommand": "libtiff==4.4.0--hash=sha256:<hash>"
}
},
{
"name": "libxml2",
"tags": [ "languages" ],
"versions": " 2.10.3",
"info":
{
"description": "<p>Libxml2 is the XML C parser and toolkit developed for the Gnome project (but usable outside of the Gnome platform), it is free software available under the MIT License. XML itself is a metalanguage to design markup languages, i.e. text language where semantic and structure are added to the content using extra 'markup' information enclosed between angle brackets. HTML is the most well-known markup language. Though the library is written in C a variety of language bindings make it available in other environments.</p><div>Current sha265 values:<div>(py3) <code>libxml2==2.10.3 --hash=sha256:b57e1e016ade9d97de137b4fb7bcd925dab1e50f9118e7b665faa6d1fc280756</code></div></div>",
"usageNotes": "<p>A <a href='https://gnome.pages.gitlab.gnome.org/libxml2/devhelp/'>reference manual</a>, <a href='https://gnome.pages.gitlab.gnome.org/libxml2/tutorial/'>tutorial</a>, and <a href='https://gnome.pages.gitlab.gnome.org/libxml2/examples/'>a set of examples</a> are all available.</p>",
"linkToSite": "https://gitlab.gnome.org/GNOME/libxml2/-/wikis/home",
"siteName": "gitlab.gnome.org/GNOME/libxml2",
"license": "MIT",
"linkToLicense": "https://gitlab.gnome.org/GNOME/libxml2/-/blob/master/Copyright",
"version": "2.10.3",
"installCommand": "libxml2==2.10.3--hash=sha256:<hash>"
}
},
{
"name": "libxslt",
"tags": [ "programming_tools","utility" ],
"versions": " 1.1.37",
"info":
{
"description": "<p>libxslt is the <a href='https://www.w3.org/TR/xslt'>XSLT</a> C library developed for the GNOME project. XSLT itself is a an XML language to define transformation for XML. libxslt is based on libxml2, the XML C library developed for the GNOME project. It also implements most of the <a href='http://www.exslt.org/'>EXSLT</a> set of processor-portable extension functions and some of Saxon's evaluate and expressions extensions.</p><p>People can either embed the library in their application or use xsltproc, the command line processing tool. This library is free software and can be reused in commercial applications.</p><div>Current sha265 values:<div>(py3) <code>libxslt==1.1.37 --hash=sha256:c66d4769f69a2dd81a98408f362f14a046e29682d7c6bff358320e97e59e1da9</code></div></div>",
"usageNotes": "<p>A <a href='https://gnome.pages.gitlab.gnome.org/libxslt/devhelp/&ldquo;reference manual</a> and <a href='https://gnome.pages.gitlab.gnome.org/libxslt/tutorial/libxslttutorial.html'>tutorial</a> and <a href='https://gnome.pages.gitlab.gnome.org/libxslt/tutorial2/libxslt_pipes.html'>extended tutorial</a> are available for documentation.</p>",
"linkToSite": "https://gitlab.gnome.org/GNOME/libxslt/-/wikis/home",
"siteName": "gitlab.gnome.org/GNOME/libxslt/",
"license": "OTHER",
"linkToLicense": "https://github.com/GNOME/libxslt/blob/master/Copyright",
"version": "1.1.37",
"installCommand": "libxslt==1.1.37--hash=sha256:<hash>"
}
},
{
"name": "libyaml",
"tags": [ "languages","programming_tools","utility" ],
"versions": " 0.2.5",
"info":
{
"description": "<p>LibYAML is a YAML parser and emitter library.</p><p>LibYAML covers presenting and parsing processes. Thus LibYAML defines the following two processors:</p><p> - <i>Parser</i>, which takes an input stream of bytes and produces a sequence of parsing events.</p><p> - <i>Emitter</i>, which takes a sequence of events and produces a stream of bytes.</p><p>The processes of parsing and presenting are inverse to each other. Any sequence of events produced by parsing a well-formed YAML document should be acceptable by the Emitter, which should produce an equivalent document. Similarly, any document produced by emitting a sequence of events should be acceptable for the Parser, which should produce an equivalent sequence of events.</p><div>Current sha265 values:<div>(py3) <code>libyaml==0.2.5 --hash=sha256:e2e2f11ba01c127c856cca9f1c3fd9d79ffb9a8e7496cacb08b4cb5456d64ffc</code></div></div>",
"usageNotes": "<p>Documentation on using this image is available on <a href='https://pyyaml.org/wiki/LibYAML'>pyyaml.org</a>/</p>",
"linkToSite": "https://pyyaml.org/wiki/LibYAML",
"siteName": "pyyaml.org",
"license": "MIT",
"linkToLicense": "https://github.com/yaml/libyaml/blob/master/License",
"version": "0.2.5",
"installCommand": "libyaml==0.2.5--hash=sha256:<hash>"
}
},
{
"name": "locket",
"tags": [ "programming_tools" ],
"versions": " 1.0.0",
"info":
{
"description": "<p>Locket implements a lock that can be used by multiple processes provided they use the same path.</p><p>Locks largely behave as (non-reentrant) <code>Lock</code> instances from the <code>threading</code> module in the standard library. Specifically, their behaviour is:</p><ul><li>Locks are uniquely identified by the file being locked, both in the same process and across different processes.</li><li>Locks are either in a locked or unlocked state.</li><li>When the lock is unlocked, calling <code>acquire()</code> returns immediately and changes the lock state to locked.</li><li>When the lock is locked, calling <code>acquire()</code> will block until the lock state changes to unlocked, or until the timeout expires.</li><li>If a process holds a lock, any thread in that process can call <code>release()</code> to change the state to unlocked.</li><li>Behaviour of locks after <code>fork</code> is undefined.</li></ul><div>Current sha265 values:<div>(py3) <code>locket==1.0.0 --hash=sha256:055b7d11586a89b3dcd4172ce03a6257e057b4a62109966a76f64612d85dc74e</code></div></div>",
"usageNotes": "<p>Example of usage:</p><pre><code>import locket<br><br># Wait for lock<br>with locket.lock_file(&ldquo;path/to/lock/file&ldquo;):<br>    perform_action()<br><br># Raise error if lock cannot be acquired immediately<br>with locket.lock_file(&ldquo;path/to/lock/file&ldquo;, timeout=0):<br>    perform_action()<br><br># Raise error if lock cannot be acquired after thirty seconds<br>with locket.lock_file(&ldquo;path/to/lock/file&ldquo;, timeout=30):<br>    perform_action()<br><br># Without context managers:<br>lock = locket.lock_file(&ldquo;path/to/lock/file&ldquo;)<br>try:<br>    lock.acquire()<br>    perform_action()<br>finally:<br>    lock.release()<br></code></pre>",
"linkToSite": "https://github.com/mwilliamson/locket.py",
"siteName": "github",
"license": "BSD2",
"linkToLicense": "https://github.com/mwilliamson/locket.py/blob/master/LICENSE",
"version": "1.0.0",
"installCommand": "locket==1.0.0--hash=sha256:<hash>"
}
},
{
"name": "markdown-editor",
"tags": [ "utility","graphics","web" ],
"versions": " 1.0.6",
"info":
{
"description": "<p>Markdown-editor provides a standalone editor for your local markdown files.</p><p>Features include:</p><ul><li>Side-by-side markdown editor & html preview</li><li>Live, when you type html preview</li><li>Codehilite & markdown extra syntax support by default</li><li>Github syntax support</li><li>Github styles for rendering and codehilite</li><li>Scrollbars sync</li></ul><div>Current sha265 values:<div>(py3) <code>markdown-editor==1.0.6 --hash=sha256:c3186e44d15159f42c99542cf4dea71a8b56593a2c20ecd7f991d2b8c1ba2496</code></div></div>",
"usageNotes": "<p>Try entering <code>markdown_edit README.md</code> for a file <code>README.md</a></p><p>It will open the editor in your browser!</p><p>Launch editor without input file: <code>markdown_edit</code></p><p>Edit markdown file and save both markdown and html outputs: <code>markdown_edit -f README.html README.md</code></p><p>You can import this script as a module to write your own applications based on the markdown editor:</p><pre><code>from markdown_editor import web_edit<br>from markdown_editor.editor import MarkdownDocument<br><br># ...<br><br>MY_HTML_HEAD = 'Editor title'<br><br>def action_send(document):<br><br>    send_markdown_text(document.text)<br>    # or<br>    send_raw_html_code(document.getHtml())<br>    # or<br>    send_html_with_styles(document.getHtmlPage())<br><br>    return html_to_display_as_result, keep_running_local_server<br><br>if __name__ == '__main__:<br>    doc = MarkdownDocument()<br>    web_edit.start(doc,<br>        custom_actions=[<br>                ('Send', action_send),<br>        ],<br>        title=MY_HTML_HEAD)<br></code></pre>",
"linkToSite": "https://github.com/ncornette/Python-Markdown-Editor",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://opensource.org/licenses/MIT",
"version": "1.0.6",
"installCommand": "markdown-editor==1.0.6--hash=sha256:<hash>"
}
},
{
"name": "markupsafe",
"tags": [ "security","utility" ],
"versions": " 2.1.1",
"info":
{
"description": "<p>MarkupSafe implements a text object that escapes characters so it is safe to use in HTML and XML. Characters that have special meanings are replaced so that they display as the actual characters. This mitigates injection attacks, meaning untrusted user input can safely be displayed on a page.</p><div>Current sha265 values:<div>(py3) <code>markupSafe==2.1.1 --hash=sha256:e3ce34956b3cb61b9ff02216a7f3504447eb1c52e7e24c5053c1f10cb97e31eb</code></div></div>",
"usageNotes": "<p>Example of usage:</p><pre><code>&gt;&gt;&gt; from markupsafe import Markup, escape<br><br>&gt;&gt;&gt; # escape replaces special characters and wraps in Markup<br>&gt;&gt;&gt; escape(&ldquo;&lt;script&gt;alert(document.cookie);&lt;/script&gt;&ldquo;)<br>Markup('&amp;lt;script&amp;gt;alert(document.cookie);&amp;lt;/script&amp;gt;')<br><br>&gt;&gt;&gt; # wrap in Markup to mark text &ldquo;safe&ldquo; and prevent escaping<br>&gt;&gt;&gt; Markup(&ldquo;&lt;strong&gt;Hello&lt;/strong&gt;&ldquo;)<br>Markup('&lt;strong&gt;hello&lt;/strong&gt;')<br><br>&gt;&gt;&gt; escape(Markup(&ldquo;&lt;strong&gt;Hello&lt;/strong&gt;&ldquo;))<br>Markup('&lt;strong&gt;hello&lt;/strong&gt;')<br><br>&gt;&gt;&gt; # Markup is a str subclass<br>&gt;&gt;&gt; # methods and operators escape their arguments<br>&gt;&gt;&gt; template = Markup(&ldquo;Hello &lt;em&gt;{name}&lt;/em&gt;&ldquo;)<br>&gt;&gt;&gt; template.format(name='&ldquo;World&ldquo;')<br>Markup('Hello &lt;em&gt;&amp;#34;World&amp;#34;&lt;/em&gt;')<br></code></pre><p>See <a href='https://markupsafe.palletsprojects.com/en/2.1.x/'>markupsafe.pallasprojects.com</a> for additional documentation.</p>",
"linkToSite": "https://palletsprojects.com/p/markupsafe/",
"siteName": "palletsprojects.com/p/markupsafe",
"license": "BSD3",
"linkToLicense": "https://github.com/pallets/markupsafe/blob/main/LICENSE.rst",
"version": "2.1.1",
"installCommand": "markupsafe==2.1.1--hash=sha256:<hash>"
}
},
{
"name": "matplotlib-inline",
"tags": [ "math","graphics" ],
"versions": " 0.1.3",
"info":
{
"description": "<p>This package provides a Matplotlib Inline Back-end for IPython and Jupyter.</p><div>Current sha265 values:<div>(py3) <code>matplotlib_inline==0.1.3 --hash=sha256:25f22b7ee19ab5e5ed14345b851729362172250a9ef5bed85fc6e69c9bd5c48d</code></div></div>",
"usageNotes": "<p>This package is included in IPython and can be used in a Jupyter Notebook:</p><pre><code>%matplotlib inline<br><br>import matplotlib.pyplot as plt<br>import numpy as np<br><br>x = np.linspace(0, 3*np.pi, 500)<br>plt.plot(x, np.sin(x**2))<br>plt.title('A simple chirp');<br></code></pre><p>Please refer to <a href='https://github.com/ipython/matplotlib-inline/blob/master/README.md'>github</a> for more information.</p>",
"linkToSite": "https://github.com/ipython/matplotlib-inline",
"siteName": "github",
"license": "here",
"linkToLicense": "https://github.com/ipython/matplotlib-inline/blob/master/LICENSE",
"version": "0.1.3",
"installCommand": "matplotlib-inline==0.1.3--hash=sha256:<hash>"
}
},
{
"name": "mistune",
"tags": [ "utility" ],
"versions": " 2.0.4",
"info":
{
"description": "<p>A fast yet powerful Python Markdown parser with renderers and plugins, compatible with sane CommonMark rules.</p><div>Current sha265 values:<div>(py3) <code>mistune==2.0.4 --hash=sha256:fb1c77fba8078071b42325a4e1d103d450fdcd93cf8fd4d192ba9a31e7dee928</code></div></div>",
"usageNotes": "<p>Mistune is easy to use. Here is how you can convert Markdown formatted text into HTML:</p><pre><code>import mistune<br><br>mistune.html(YOUR_MARKDOWN_TEXT)<br></code></pre><p>The .html() methods has enabled all the features you might want by default:</p><ul><li>No escape of HTML tags</li><li>With strikethough plugin</li><li>With table plugin</li><li>With footnote plugin</li></ul><p>Please refer to <a href='https://mistune.readthedocs.io/en/v2.0.2/guide.html'>readthedocs.io</a> for more information.</p>",
"linkToSite": "https://github.com/lepture/mistune",
"siteName": "github",
"license": "BSD3",
"linkToLicense": "https://github.com/lepture/mistune/blob/master/LICENSE",
"version": "2.0.4",
"installCommand": "mistune==2.0.4--hash=sha256:<hash>"
}
},
{
"name": "msgpack",
"tags": [ "languages" ],
"versions": " 1.0.4",
"info":
{
"description": "<p>MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller. This package provides CPython bindings for reading and writing MessagePack data.</p><div>Current sha265 values:<div>(cp310) <code>msgpack==1.0.4 --hash=sha256:97a5a0d007802a612b6e1e845fdbd9194ed411cab640c30439cd503a298e72f3</code></div><div>(cp311) <code>msgpack==1.0.4 --hash=sha256:92b94cfb6ac7481bc99438412907a2a8444dc3fb7acc27363a03e55d82bfbe1d</code></div></div>",
"usageNotes": "<h4>Example of One-shot pack & unpack:</h4><p>Use <code>packb</code> for packing and <code>unpackb</code> for unpacking. msgpack provides <code>dumps</code> and <code>loads</code> as an alias for compatibility with <code>json</code> and <code>pickle</code>.</p><p><code>pack</code> and <code>dump</code> packs to a file-like object. <code>unpack</code> and <code>load</code> unpacks from a file-like object.</p><pre><code>&gt;&gt;&gt; import msgpack<br>&gt;&gt;&gt; msgpack.packb([1, 2, 3], use_bin_type=True)<br>'\\x93\\x01\\x02\\x03'<br>&gt;&gt;&gt; msgpack.unpackb(_, raw=False)<br>[1, 2, 3]<br></code></pre><p><code>unpack</code> unpacks msgpack's array to Python's list, but can also unpack to tuple:</p><pre><code>&gt;&gt;&gt; msgpack.unpackb(b'\\x93\\x01\\x02\\x03', use_list=False, raw=False)<br>(1, 2, 3)<br></code></pre><p>You should always specify the <code>use_list</code> keyword argument for backward compatibility.</p><p>Please refer to <a href='https://msgpack-python.readthedocs.io/en/latest/'>readthedocs.io</a> for further usage instructions.</p>",
"linkToSite": "https://msgpack.org/",
"siteName": "msgpack.org",
"license": "APACHE2",
"linkToLicense": "https://github.com/msgpack/msgpack-python/blob/main/COPYING",
"version": "1.0.4",
"installCommand": "msgpack==1.0.4--hash=sha256:<hash>"
}
},
{
"name": "nbformat",
"tags": [ "base" ],
"versions": " 5.4.0",
"info":
{
"description": "<p>The Jupyter Notebook format:</p><p>This package contains the base implementation of the <a href='https://nbformat.readthedocs.org/en/latest/format_description.html'>Jupyter Notebook format</a>, and Python APIs for working with notebooks.</p><p>There is also a JSON schema for notebook format versions >= 3.</p><div>Current sha265 values:<div>(py3) <code>nbformat==5.4.0 --hash=sha256:14097434590793425c9562fa05749ca85812aace61703cfd1503b3284cd71443</code></div></div>",
"usageNotes": "<p>Refer to <a href='https://nbformat.readthedocs.io/en/latest/'>readthedocs.io</a> for notes on the Jupyter Notebook Format.</p>",
"linkToSite": "https://jupyter.org/",
"siteName": "jupyter.org",
"license": "BSD3",
"linkToLicense": "https://github.com/jupyter/nbformat/blob/main/COPYING.md",
"version": "5.4.0",
"installCommand": "nbformat==5.4.0--hash=sha256:<hash>"
}
},
{
"name": "nest-asyncio",
"tags": [ "utility" ],
"versions": " 1.5.5",
"info":
{
"description": "<p>By design asyncio <a href='https://bugs.python.org/issue22239'>does not allow</a> its event loop to be nested. This presents a practical problem: When in an environment where the event loop is already running it’s impossible to run tasks and wait for the result. Trying to do so will give the error “<code>RuntimeError: This event loop is already running</code>'.</p><p>The issue pops up in various environments, such as web servers, GUI applications and in Jupyter notebooks.</p><p>This module patches asyncio to allow nested use of <code>asyncio.run</code> and <code>loop.run_until_complete</code>.</p><div>Current sha265 values:<div>(py3) <code>nest-asyncio==1.5.5 --hash=sha256:96f0a093f3fbbddf5a8ff5d9a0271eef47a43c989fb49103d2ce66f4c69e8e24</code></div></div>",
"usageNotes": "<p>Import and run with:</p><pre><code>import nest_asyncio<br>nest_asyncio.apply()<br></code></pre><p>Optionally the specific loop that needs patching can be given as argument to <code>apply</code>, otherwise the current event loop is used. An event loop can be patched whether it is already running or not. Only event loops from asyncio can be patched; Loops from other projects, such as uvloop or quamash, generally can’t be patched.</p>",
"linkToSite": "https://github.com/erdewit/nest_asyncio",
"siteName": "github",
"license": "BSD2",
"linkToLicense": "https://github.com/erdewit/nest_asyncio/blob/master/LICENSE",
"version": "1.5.5",
"installCommand": "nest-asyncio==1.5.5--hash=sha256:<hash>"
}
},
{
"name": "packaging",
"tags": [ "utility" ],
"versions": " 21.3",
"info":
{
"description": "<p>Reusable core utilities for various Python Packaging <a href='https://packaging.python.org/specifications/'>interoperability specifications</a>.</p><p>This library provides utilities that implement the interoperability specifications which have clearly one correct behaviour (eg: <a href='http://www.python.org/dev/peps/pep-0440'>PEP 440</a>) or benefit greatly from having a single shared implementation (eg: <a href='http://www.python.org/dev/peps/pep-0425'>PEP 425</a>).</p><p>The <code>packaging</code> project includes the following: version handling, specifiers, markers, requirements, tags, utilities.</p><div>Current sha265 values:<div>(py3) <code>packaging==21.3 --hash=sha256:3c34bfff58621b89d36a1069c633bd56669ff6753f62d3a09c5e90f0af8812d5</code></div></div>",
"usageNotes": "<p>A core requirement of dealing with packages is the ability to work with versions. <a href='https://www.python.org/dev/peps/pep-0440/'>PEP 440</a> defines the standard version scheme for Python packages which has been implemented by this module.</p><pre><code>from packaging.version import Version, parse<br>v1 = parse(&ldquo;1.0a5&ldquo;)<br>v2 = Version(&ldquo;1.0&ldquo;)<br>v1<br>   &lt;Version('1.0a5')&gt;<br>v2<br>   &lt;Version('1.0')&gt;<br>v1 &lt; v2<br>   True<br>v1.epoch<br>   0<br>v1.release<br>   (1, 0)<br>v1.pre<br>   ('a', 5)<br>v1.is_prerelease<br>   True<br>v2.is_prerelease<br>   False<br>Version(&ldquo;french toast&ldquo;)<br>   Traceback (most recent call last):<br>       ...<br>   InvalidVersion: Invalid version: 'french toast'<br>Version(&ldquo;1.0&ldquo;).post<br>Version(&ldquo;1.0&ldquo;).is_postrelease<br>   False<br>Version(&ldquo;1.0.post0&ldquo;).post<br>   0<br>Version(&ldquo;1.0.post0&ldquo;).is_postrelease<br>   True<br></code></pre><p>Please refer to <a href='https://packaging.pypa.io/en/latest/version.html'>packaging.pypa.io</a> for further documentation.</p>",
"linkToSite": "https://packaging.pypa.io/en/latest/",
"siteName": "packaging.pypa.io",
"license": "OTHER",
"linkToLicense": "https://github.com/pypa/packaging/blob/main/LICENSE",
"version": "21.3",
"installCommand": "packaging==21.3--hash=sha256:<hash>"
}
},
{
"name": "pandocfilters",
"tags": [ "programming_tools","utility" ],
"versions": " 1.5.0",
"info":
{
"description": "<p>A python module for writing <a href='http://pandoc.org/'>pandoc</a> filters.</p><p>Pandoc filters are pipes that read a JSON serialization of the Pandoc AST from stdin, transform it in some way, and write it to stdout. They can be used with pandoc (>= 1.12) either using pipes</p><pre><code>pandoc -t json -s | ./caps.py | pandoc -f json<br></code></pre><p>or using the <code>--filter</code> (or <code>-F</code>) command-line option.</p><pre><code>pandoc --filter ./caps.py -s<br></code></pre><div>Current sha265 values:<div>(py3) <code>pandocfilters==1.5.0 --hash=sha256:6cda7636904bb2c19ac02b634bcb8521641a641a4731564753a150bb2ebcab65</code></div></div>",
"usageNotes": "<p>Most users will only need <code>toJSONFilter</code>. Here is a simple example of its use:</p><pre><code>#!/usr/bin/env python<br><br>&ldquo;&ldquo;&ldquo;<br>Pandoc filter to convert all regular text to uppercase.<br>Code, link URLs, etc. are not affected.<br>&ldquo;&ldquo;&ldquo;<br><br>from pandocfilters import toJSONFilter, Str<br><br>def caps(key, value, format, meta):<br>  if key == 'Str':<br>    return Str(value.upper())<br><br>if __name__ == &ldquo;__main__&ldquo;:<br>  toJSONFilter(caps)<br></code></pre><p>Additional documentation is available on <a href='https://github.com/jgm/pandocfilters/blob/master/README.rst'>github</a>.</p>",
"linkToSite": "https://github.com/jgm/pandocfilters",
"siteName": "github",
"license": "BSD3",
"linkToLicense": "https://github.com/jgm/pandocfilters/blob/master/LICENSE",
"version": "1.5.0",
"installCommand": "pandocfilters==1.5.0--hash=sha256:<hash>"
}
},
{
"name": "parso",
"tags": [ "programming_tools","utility" ],
"versions": " 0.8.3",
"info":
{
"description": "<p>Parso is a Python parser that supports error recovery and round-trip parsing for different Python versions (in multiple Python versions). Parso is also able to list multiple syntax errors in your python file.</p><p>Parso has been battle-tested by <a href='https://github.com/davidhalter/jedi'>jedi</a>. It was pulled out of jedi to be useful for other projects as well.</p><p>Parso consists of a small API to parse Python and analyse the syntax tree.</p><div>Current sha265 values:<div>(py3) <code>parso==0.8.3 --hash=sha256:08d95674796cc92ce27d43ce8fe938cb9816e7438bff9f10694d42f07d6adfc1</code></div></div>",
"usageNotes": "<p>A simple example:</p><pre><code>&gt;&gt;&gt; import parso<br>&gt;&gt;&gt; module = parso.parse('hello + 1', version=&ldquo;3.9&ldquo;)<br>&gt;&gt;&gt; expr = module.children[0]<br>&gt;&gt;&gt; expr<br>PythonNode(arith_expr, [<Name: hello@1,0>, <Operator: +>, <Number: 1>])<br>&gt;&gt;&gt; print(expr.get_code())<br>hello + 1<br>&gt;&gt;&gt; name = expr.children[0]<br>&gt;&gt;&gt; name<br>&lt;Name: hello@1,0&gt;<br>&gt;&gt;&gt; name.end_pos<br>(1, 5)<br>&gt;&gt;&gt; expr.end_pos<br>(1, 9)<br></code></pre><p>See documentation on <a href='https://parso.readthedocs.io/en/latest/'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/davidhalter/parso",
"siteName": "github",
"license": "OTHER",
"linkToLicense": "https://github.com/davidhalter/parso/blob/master/LICENSE.txt",
"version": "0.8.3",
"installCommand": "parso==0.8.3--hash=sha256:<hash>"
}
},
{
"name": "pickleshare",
"tags": [ "programming_tools" ],
"versions": " 0.7.5",
"info":
{
"description": "<p>PickleShare - a small ‘shelve’ like datastore with concurrency support</p><p>Like shelve, a PickleShareDB object acts like a normal dictionary. Unlike shelve, many processes can access the database simultaneously. Changing a value in database is immediately visible to other processes accessing the same database.</p><p>Concurrency is possible because the values are stored in separate files. Hence the “database” is a directory where all files are governed by PickleShare.</p><div>Current sha265 values:<div>(py3) <code>pickleshare==0.7.5 --hash=sha256:23c3071dd0f39472a7d427b7ea2d9522be49d08053e8746579c095d570a77d08</code></div></div>",
"usageNotes": "<p>Example usage:</p><pre><code>from pickleshare import *<br>db = PickleShareDB('~/testpickleshare')<br>db.clear()<br>print(&ldquo;Should be empty:&ldquo;,db.items())<br>db['hello'] = 15<br>db['aku ankka'] = [1,2,313]<br>db['paths/are/ok/key'] = [1,(5,46)]<br>print(db.keys())<br></code></pre>",
"linkToSite": "https://github.com/pickleshare/pickleshare",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/pickleshare/pickleshare/blob/master/LICENSE",
"version": "0.7.5",
"installCommand": "pickleshare==0.7.5--hash=sha256:<hash>"
}
},
{
"name": "platformdirs",
"tags": [ "utility" ],
"versions": " 2.6.2",
"info":
{
"description": "<p>platformdirs will help you choose an appropriate storage location for different datasets/logging/cache etc..</p><div>Current sha265 values:<div>(py3) <code>platformdirs==2.6.2 --hash=sha256:83c8f6d04389165de7c9b6f0c682439697887bca0aa2f1c87ef1826be3584490</code></div></div>",
"usageNotes": "<p>For advanced tool documentation, refer to <a href='https://github.com/platformdirs/platformdirs'>github.com</a>.</p>",
"linkToSite": "https://github.com/ibm-z-oss-oda/platformdirs",
"siteName": "https://github.com/ibm-z-oss-oda/platformdirs",
"license": "MIT",
"linkToLicense": "https://github.com/ibm-z-oss-oda/platformdirs/blob/main/LICENSE.txt",
"version": "2.6.2",
"installCommand": "platformdirs==2.6.2--hash=sha256:<hash>"
}
},
{
"name": "pretend",
"tags": [ "utility" ],
"versions": " 1.0.9",
"info":
{
"description": "<p>Pretend is a library to make stubbing with Python easier.</p><div>Current sha265 values:<div>(py3) <code>pretend==1.0.9 --hash=sha256:0b08dd9b1de7a2fa9c0315f4a1d42b767def127a7f893f9285974a28e1d2219d</code></div></div>",
"usageNotes": "<p>For advanced tool documentation, refer to <a href='https://github.com/alex/pretend'>github.com</a>.</p>",
"linkToSite": "https://github.com/ibm-z-oss-oda/pretend",
"siteName": "https://github.com/ibm-z-oss-oda/pretend",
"license": "BSD 3",
"linkToLicense": "https://github.com/ibm-z-oss-oda/pretend/blob/master/LICENSE.rst",
"version": "1.0.9",
"installCommand": "pretend==1.0.9--hash=sha256:<hash>"
}
},
{
"name": "prometheus-client",
"tags": [ "web","graphics" ],
"versions": " 0.14.0",
"info":
{
"description": "<p>This package provides the official Python client for <a href='https://prometheus.io/'>Prometheus</a>.</p><div>Current sha265 values:<div>(py3) <code>prometheus-client==0.14.0 --hash=sha256:b3095f0a1dc45b13bc420b14ecaeaccb6cf37cd4f3d60328d3945cd38437cf49</code></div></div>",
"usageNotes": "<p>Paste the following into your Python interpreter:</p><pre><code>from prometheus_client import start_http_server, Summary<br>import random<br>import time<br><br># Create a metric to track time spent and requests made.<br>REQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')<br><br># Decorate function with metric.<br>@REQUEST_TIME.time()<br>def process_request(t):<br>    &ldquo;&ldquo;&ldquo;A dummy function that takes some time.&ldquo;&ldquo;&ldquo;<br>    time.sleep(t)<br><br>if __name__ == '__main__':<br>    # Start up the server to expose the metrics.<br>    start_http_server(8000)<br>    # Generate some requests.<br>    while True:<br>        process_request(random.random())<br></code></pre><p>Visit http://localhost:8000/ to view the metrics.</p><p>From one easy to use decorator you get:</p><p><code>request_processing_seconds_count</code>: Number of times this function was called.</p><p><code>request_processing_seconds_sum</code>: Total amount of time spent in this function.</p><p>Prometheus's <code>rate</code> function allows calculation of both requests per second, and latency over time from this data.</p><p>See <a href='https://github.com/prometheus/client_python/blob/master/README.md'>github</a> for more documentation.</p>",
"linkToSite": "https://github.com/prometheus/client_python",
"siteName": "github",
"license": "APACHE2",
"linkToLicense": "https://github.com/prometheus/client_python/blob/master/LICENSE",
"version": "0.14.0",
"installCommand": "prometheus-client==0.14.0--hash=sha256:<hash>"
}
},
{
"name": "prompt-toolkit",
"tags": [ "programming_tools" ],
"versions": " 3.0.30",
"info":
{
"description": "<p><code>prompt-toolkit</code> is a library for building powerful interactive command line applications in Python.</p><div>Current sha265 values:<div>(py3) <code>prompt-toolkit==3.0.30 --hash=sha256:d6fab770f13b04978fcfd6370e99f0634db5a03380975b5cab8daa961f89efc1</code></div></div>",
"usageNotes": "<p>The following snippet is the most simple example, it uses the <code>prompt()</code> function to ask the user for input and returns the text. Just like <code>(raw_)input</code>.</p><pre><code>from prompt_toolkit import prompt<br><br>text = prompt('Give me some input: ')<br>print('You said: %s' % text)<br></code></pre><p>See <a href='https://python-prompt-toolkit.readthedocs.io/en/stable/pages/getting_started.html#getting-started'>documentation</a> on readthedocs.io.</p>",
"linkToSite": "https://python-prompt-toolkit.readthedocs.io/en/stable/",
"siteName": "readthedocs.io",
"license": "BSD3",
"linkToLicense": "https://github.com/prompt-toolkit/python-prompt-toolkit/blob/master/LICENSE",
"version": "3.0.30",
"installCommand": "prompt-toolkit==3.0.30--hash=sha256:<hash>"
}
},
{
"name": "ptyprocess",
"tags": [ "programming_tools","utility" ],
"versions": " 0.7.0",
"info":
{
"description": "<p>Launch a subprocess in a pseudo terminal (pty), and interact with both the process and its pty.</p><p>Sometimes, piping stdin and stdout is not enough. There might be a password prompt that doesn’t read from stdin, output that changes when it’s going to a pipe rather than a terminal, or curses-style interfaces that rely on a terminal. If you need to automate these things, running the process in a pseudo terminal (pty) is the answer.</p><div>Current sha265 values:<div>(py3) <code>ptyprocess==0.7.0 --hash=sha256:4b41f3967fce3af57cc7e94b888626c18bf37a083e3651ca8feeb66d492fef35</code></div></div>",
"usageNotes": "<p>Interface:</p><pre><code>p = PtyProcessUnicode.spawn(['python'])<br>p.read(20)<br>p.write('6+6\\n')<br>p.read(20)<br></code></pre><p>Refer to <a href='https://ptyprocess.readthedocs.io/en/latest/'>readthedocs.io</a> for documentation.</p>",
"linkToSite": "https://github.com/pexpect/ptyprocess",
"siteName": "github",
"license": "OTHER",
"linkToLicense": "https://github.com/pexpect/ptyprocess/blob/master/LICENSE",
"version": "0.7.0",
"installCommand": "ptyprocess==0.7.0--hash=sha256:<hash>"
}
},
{
"name": "pure-eval",
"tags": [ "utility" ],
"versions": " 0.2.2",
"info":
{
"description": "<p>This is a Python package that lets you safely evaluate certain AST nodes without triggering arbitrary code that may have unwanted side effects.</p><div>Current sha265 values:<div>(py3) <code>pure-eval==0.2.2 --hash=sha256:01eaab343580944bc56080ebe0a674b39ec44a945e6d09ba7db3cb8cec289350</code></div></div>",
"usageNotes": "<p>For advanced tool documentation, refer to <a href='https://github.com/alexmojaki/pure_eval'>github.com</a>.</p>",
"linkToSite": "https://github.com/ibm-z-oss-oda/pure_eval",
"siteName": "https://github.com/ibm-z-oss-oda/pure_eval",
"license": "MIT",
"linkToLicense": "https://github.com/ibm-z-oss-oda/pure_eval/blob/master/LICENSE.txt",
"version": "0.2.2",
"installCommand": "pure-eval==0.2.2--hash=sha256:<hash>"
}
},
{
"name": "pyasn1",
"tags": [ "programming_tools" ],
"versions": " 0.4.8",
"info":
{
"description": "<p>This is a free and open source implementation of ASN.1 types and codecs as a Python package. It has been first written to support particular protocol (SNMP) but then generalized to be suitable for a wide range of protocols based on <a href='https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.208-198811-W!!PDF-E&type=items'>ASN.1 specification</a>.</p><div>Current sha265 values:<div>(py3) <code>pyasn1==0.4.8 --hash=sha256:3303b237e4ec1f064f35caed9e4143e12ef1becf73f2a17ded0220f1353108b7</code></div></div>",
"usageNotes": "<p>With pyasn1 you can build Python objects from ASN.1 data structures. For example, the following ASN.1 data structure:</p><pre><code>Record ::= SEQUENCE {<br>  id        INTEGER,<br>  room  [0] INTEGER OPTIONAL,<br>  house [1] INTEGER DEFAULT 0<br>}<br></code></pre><p>Could be expressed in pyasn1 like this:</p><pre><code>class Record(Sequence):<br>    componentType = NamedTypes(<br>        NamedType('id', Integer()),<br>        OptionalNamedType(<br>            'room', Integer().subtype(<br>                implicitTag=Tag(tagClassContext, tagFormatSimple, 0)<br>            )<br>        ),<br>        DefaultedNamedType(<br>            'house', Integer(0).subtype(<br>                implicitTag=Tag(tagClassContext, tagFormatSimple, 1)<br>            )<br>        )<br>    )<br></code></pre><p>Refer to <a href='https://github.com/etingof/pyasn1/blob/master/README.md'>github</a> for more documentation.</p>",
"linkToSite": "https://github.com/etingof/pyasn1",
"siteName": "github",
"license": "BSD2",
"linkToLicense": "https://github.com/etingof/pyasn1/blob/master/LICENSE.rst",
"version": "0.4.8",
"installCommand": "pyasn1==0.4.8--hash=sha256:<hash>"
}
},
{
"name": "pycparser",
"tags": [ "languages" ],
"versions": " 2.20",
"info":
{
"description": "<p>pycparser is a complete parser of the C language, written in pure Python using the PLY parsing library. It parses C code into an AST and can serve as a front-end for C compilers or analysis tools.</p><div>Current sha265 values:<div>(py3) <code>pycparser==2.20 --hash=sha256:065c227e57443b8c3e8445071454286947ac1342e7e80cb37070cde8710398e2</code></div></div>",
"usageNotes": "<p>See <a href='https://github.com/eliben/pycparser#using'>github</a> for usage instructions.</p>",
"linkToSite": "https://github.com/eliben/pycparser",
"siteName": "github",
"license": "BSD3",
"linkToLicense": "https://github.com/eliben/pycparser/blob/master/LICENSE",
"version": "2.20",
"installCommand": "pycparser==2.20--hash=sha256:<hash>"
}
},
{
"name": "pygments",
"tags": [ "programming_tools","utility" ],
"versions": " 2.12.0",
"info":
{
"description": "<p>Pygments is a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code. Highlights are:</p><ul><li>a wide range of 530 languages and other text formats is supported</li><li>special attention is paid to details that increase highlighting quality</li><li>support for new languages and formats are added easily; most languages use a simple regex-based lexing mechanism</li><li>a number of output formats is available, among them HTML, RTF, LaTeX and ANSI sequences</li></ul><div>Current sha265 values:<div>(py3) <code>pygments==2.12.0 --hash=sha256:c631ba1dbb84c527a8d504f8f4d828bb66e981589b73ef4afe372667cd3d6341</code></div></div>",
"usageNotes": "<p>Here is a small example for highlighting Python code:</p><pre><code>from pygments import highlight<br>from pygments.lexers import PythonLexer<br>from pygments.formatters import HtmlFormatter<br><br>code = 'print &ldquo;Hello World&ldquo;'<br>print(highlight(code, PythonLexer(), HtmlFormatter()))<br></code></pre><p>Documentation is available on <a href='https://pygments.org/docs/'>pygments.org</a>.</p>",
"linkToSite": "https://pygments.org/",
"siteName": "pygments.org",
"license": "BSD2",
"linkToLicense": "https://github.com/pygments/pygments/blob/master/LICENSE",
"version": "2.12.0",
"installCommand": "pygments==2.12.0--hash=sha256:<hash>"
}
},
{
"name": "pymdown-extensions",
"tags": [ "programming_tools","utility" ],
"versions": " 9.5",
"info":
{
"description": "<p>PyMdown Extensions is a collection of extensions for Python Markdown. They were originally written to make writing documentation more enjoyable. They cover a wide range of solutions, and while not every extension is needed by all people, there is usually at least one useful extension for everybody.</p><div>Current sha265 values:<div>(py3) <code>pymdown_extensions==9.5 --hash=sha256:a25ddc704a775fcdc78b49e9068df45c7c591b0720c41b1282d7aaf9e5edf197</code></div></div>",
"usageNotes": "<p>All extensions are found under the module namespace of <code>pymdownx</code>. Assuming we wanted to specify the use of the MagicLink extension, we would include it in Python Markdown like so:</p><pre><code>&gt;&gt;&gt; import markdown<br>&gt;&gt;&gt; text = &ldquo;A link https://google.com&ldquo;<br>&gt;&gt;&gt; html = markdown.markdown(text, extensions=['pymdownx.magiclink'])<br>'&lt;p&gt;A link &lt;a href=&ldquo;https://google.com&ldquo;&gt;https://google.com&lt;/a&gt;&lt;/p&gt;'<br></code></pre><p>Documentation, including documentation on each extension and how to configure and use each one, is available on <a href='https://facelessuser.github.io/pymdown-extensions/'>github.io</a>.</p>",
"linkToSite": "https://github.com/facelessuser/pymdown-extensions",
"siteName": "github",
"license": "OTHER",
"linkToLicense": "https://github.com/facelessuser/pymdown-extensions/blob/main/LICENSE.md",
"version": "9.5",
"installCommand": "pymdown-extensions==9.5--hash=sha256:<hash>"
}
},
{
"name": "pyrsistent",
"tags": [ "programming_tools" ],
"versions": " 0.19.0",
"info":
{
"description": "<p>Pyrsistent is a number of persistent collections (by some referred to as functional data structures). Persistent in the sense that they are immutable.</p><p>All methods on a data structure that would normally mutate it instead return a new copy of the structure containing the requested updates. The original structure is left untouched.</p><p>This will simplify the reasoning about what a program does since no hidden side effects ever can take place to these data structures. You can rest assured that the object you hold a reference to will remain the same throughout its lifetime and need not worry that somewhere five stack levels below you in the darkest corner of your application someone has decided to remove that element that you expected to be there.</p><p>Pyrsistent is influenced by persistent data structures such as those found in the standard library of Clojure. The data structures are designed to share common elements through path copying. It aims at taking these concepts and make them as pythonic as possible so that they can be easily integrated into any python program without hassle.</p><div>Current sha265 values:<div>(py3) <code>pyrsistent==0.19.0 --hash=sha256:7bcef9446e74e5d65dec8e46fab92b9c1ef6d9bd9087a85db4be00ff0d84b6da</code></div></div>",
"usageNotes": "<p>Pyrsistent implements a number of different collection types and key features. Documentation should be referenced at <a href='https://pyrsistent.readthedocs.io/en/latest/intro.html'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/tobgu/pyrsistent/",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/tobgu/pyrsistent/blob/master/LICENSE.mit",
"version": "0.19.0",
"installCommand": "pyrsistent==0.19.0--hash=sha256:<hash>"
}
},
{
"name": "python-dateutil",
"tags": [ "programming_tools","utility" ],
"versions": " 2.8.2",
"info":
{
"description": "<p>The dateutil module provides powerful extensions to the standard datetime module, available in Python.</p><p>Features include:</p><ul><li>Computing of relative deltas (next month, next year, next Monday, last week of month, etc);</li><li>Computing of relative deltas between two given date and/or datetime objects;</li><li>Computing of dates based on very flexible recurrence rules, using a superset of the iCalendar specification. Parsing of RFC strings is supported as well.</li><li>Generic parsing of dates in almost any string format;</li><li>Timezone (tzinfo) implementations for tzfile(5) format files (/etc/localtime, /usr/share/zoneinfo, etc), TZ environment string (in all known formats), iCalendar format files, given ranges (with help from relative deltas), local machine timezone, fixed offset timezone, UTC timezone, and Windows registry-based time zones.</li><li>Internal up-to-date world timezone information based on Olson's database.</li><li>Computing of Easter Sunday dates for any given year, using Western, Orthodox or Julian algorithms;</li><li>A comprehensive test suite.</li></ul><div>Current sha265 values:<div>(py3) <code>python-dateutil==2.8.2 --hash=sha256:961d03dc3453ebbc59dbdea9e4e11c5651520a876d0f4db161e8674aae935da9</code></div></div>",
"usageNotes": "<p>Suppose you want to know how much time is left, in years/months/days/etc, before the next easter happening on a year with a Friday 13th in August, and you want to get today’s date out of the “date” unix system command. Here is the code:</p><pre><code>&gt;&gt;&gt; from dateutil.relativedelta import *<br>&gt;&gt;&gt; from dateutil.easter import *<br>&gt;&gt;&gt; from dateutil.rrule import *<br>&gt;&gt;&gt; from dateutil.parser import *<br>&gt;&gt;&gt; from datetime import *<br>&gt;&gt;&gt; now = parse(&ldquo;Sat Oct 11 17:13:46 UTC 2003&ldquo;)<br>&gt;&gt;&gt; today = now.date()<br>&gt;&gt;&gt; year = rrule(YEARLY,dtstart=now,bymonth=8,bymonthday=13,byweekday=FR)[0].year<br>&gt;&gt;&gt; rdelta = relativedelta(easter(year), today)<br>&gt;&gt;&gt; print(&ldquo;Today is: %s&ldquo; % today)<br>Today is: 2003-10-11<br>&gt;&gt;&gt; print(&ldquo;Year with next Aug 13th on a Friday is: %s&ldquo; % year)<br>Year with next Aug 13th on a Friday is: 2004<br>&gt;&gt;&gt; print(&ldquo;How far is the Easter of that year: %s&ldquo; % rdelta)<br>How far is the Easter of that year: relativedelta(months=+6)<br>&gt;&gt;&gt; print(&ldquo;And the Easter of that year is: %s&ldquo; % (today+rdelta))<br>And the Easter of that year is: 2004-04-11<br></code></pre><p>See documentation at <a href='https://dateutil.readthedocs.io/en/stable/'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/dateutil/dateutil",
"siteName": "github",
"license": "OTHER",
"linkToLicense": "https://github.com/dateutil/dateutil/blob/master/LICENSE",
"version": "2.8.2",
"installCommand": "python-dateutil==2.8.2--hash=sha256:<hash>"
}
},
{
"name": "pytz",
"tags": [ "utility" ],
"versions": " 2022.4",
"info":
{
"description": "<p>pytz brings the Olson tz database into Python. This library allows accurate and cross platform timezone calculations. It also solves the issue of ambiguous times at the end of daylight saving time, which you can read more about in the Python Library Reference (<code>datetime.tzinfo</code>).</p><p>Almost all of the Olson timezones are supported.</p><div>Current sha265 values:<div>(py3) <code>pytz==2022.4 --hash=sha256:6eb3220e93b321d88847ef5da93ac8036cca1ad821d3dc6e956139acc91c1264</code></div></div>",
"usageNotes": "<p>Localized times and date arithmetic:</p><pre><code>&gt;&gt;&gt; from datetime import datetime, timedelta<br>&gt;&gt;&gt; from pytz import timezone<br>&gt;&gt;&gt; import pytz<br>&gt;&gt;&gt; utc = pytz.utc<br>&gt;&gt;&gt; utc.zone<br>'UTC'<br>&gt;&gt;&gt; eastern = timezone('US/Eastern')<br>&gt;&gt;&gt; eastern.zone<br>'US/Eastern'<br>&gt;&gt;&gt; amsterdam = timezone('Europe/Amsterdam')<br>&gt;&gt;&gt; fmt = '%Y-%m-%d %H:%M:%S %Z%z'<br></code></pre><p>Further documentation is available on <a href='https://pythonhosted.org/pytz/&ldquo;pythonhosted.org</a>.</p>",
"linkToSite": "https://pythonhosted.org/pytz/",
"siteName": "pythonhosted.org/pytz",
"license": "MIT",
"linkToLicense": "https://github.com/stub42/pytz/blob/master/LICENSE.txt",
"version": "2022.4",
"installCommand": "pytz==2022.4--hash=sha256:<hash>"
}
},
{
"name": "pyyaml",
"tags": [ "programming_tools","utility" ],
"versions": " 6.0",
"info":
{
"description": "<p>YAML is a data serialization format designed for human readability and interaction with scripting languages. PyYAML is a YAML parser and emitter for Python.</p><p>PyYAML features a complete YAML 1.1 parser, Unicode support, pickle support, capable extension API, and sensible error messages. PyYAML supports standard YAML tags and provides Python-specific tags that allow to represent an arbitrary Python object.</p><p>PyYAML is applicable for a broad range of tasks from complex configuration files to object serialization and persistence.</p><div>Current sha265 values:<div>(cp310) <code>pyyaml==6.0 --hash=sha256:661b515bf11e0971a1267a2d0753f340c4113707cc139bbd3034c8295302761a</code></div><div>(cp311) <code>pyyaml==6.0 --hash=sha256:af61200e1e0b5f3c8180a2b72b9fcb812a4a9c76f7def2a85246a9dd34c27837</code></div></div>",
"usageNotes": "<p>The function <code>yaml.load</code> converts a YAML document to a Python object.</p><pre><code>&gt;&gt;&gt; yaml.load(&ldquo;&ldquo;&ldquo;<br>... - Hesperiidae<br>... - Papilionidae<br>... - Apatelodidae<br>... - Epiplemidae<br>... &ldquo;&ldquo;&ldquo;)<br><br>...<br><br>['Hesperiidae', 'Papilionidae', 'Apatelodidae', 'Epiplemidae']<br></code></pre><p>The counterpart <code>yaml.dump</code> function accepts a Python object and produces a YAML document.</p><p>Complete documentation can be found on <a href='https://pyyaml.org/wiki/PyYAMLDocumentation'>pyyaml.org</a>.</p>",
"linkToSite": "https://pyyaml.org/",
"siteName": "pyyaml.org",
"license": "MIT",
"linkToLicense": "https://github.com/yaml/pyyaml/blob/master/LICENSE",
"version": "6.0",
"installCommand": "pyyaml==6.0--hash=sha256:<hash>"
}
},
{
"name": "pyzmq",
"tags": [ "programming_tools","web","languages" ],
"versions": " 24.0.1",
"info":
{
"description": "<p>This package contains Python bindings for <a href='https://zeromq.org/'>ØMQ</a>. ØMQ is a lightweight and fast messaging implementation.</p><div>Current sha265 values:<div>(cp310) <code>pyzmq==24.0.1 --hash=sha256:6bae864246c61de2490afa75445928bff1098a05b1875303cd24413094c8352c</code></div><div>(cp311) <code>pyzmq==24.0.1 --hash=sha256:96787f42a61916311549aacd47e4bca100092d51ab0f098cbb3f778fcdd241fc</code></div></div>",
"usageNotes": "<p>For usage instructions, please refer to <a href='https://zguide.zeromq.org/'>zguide.zeromq.org</a>, which implements every example in pyzmq.</p>",
"linkToSite": "https://pyzmq.readthedocs.io/en/latest/",
"siteName": "readthedocs.io",
"license": "here",
"linkToLicense": "https://github.com/zeromq/pyzmq/blob/main/COPYING.BSD",
"version": "24.0.1",
"installCommand": "pyzmq==24.0.1--hash=sha256:<hash>"
}
},
{
"name": "readme-renderer",
"tags": [ "web","utility" ],
"versions": " 35.0",
"info":
{
"description": "<p>Readme Renderer is a library that will safely render arbitrary <code>README</code> files into HTML. It is designed to be used in <a href='https://github.com/pypa/warehouse'>Warehouse</a> to render the <code>long_description</code> for packages. It can handle Markdown, reStructuredText (<code>.rst</code>), and plain text.</p><div>Current sha265 values:<div>(py3) <code>readme_renderer==35.0 --hash=sha256:8159506c4943a47c9195315865f7881b9f792a39866b6affa36bb66eea9b20e7</code></div></div>",
"usageNotes": "<p>To locally check whether your long descriptions will render on PyPI, first build your distributions, and then use the <a href='https://packaging.python.org/guides/making-a-pypi-friendly-readme#validating-restructuredtext-markup'>twine check</a> command.</p><p>You can use <code>readme_renderer</code> on the command line to render an rST file as HTML like this:</p><pre><code>python -m readme_renderer README.rst -o /tmp/README.html<br></code></pre>",
"linkToSite": "https://github.com/pypa/readme_renderer",
"siteName": "github",
"license": "APACHE2",
"linkToLicense": "https://github.com/pypa/readme_renderer/blob/main/LICENSE",
"version": "35.0",
"installCommand": "readme-renderer==35.0--hash=sha256:<hash>"
}
},
{
"name": "requests-file",
"tags": [ "programming_tools","web" ],
"versions": " 1.5.1",
"info":
{
"description": "<p>Requests-File is a transport adapter for use with the Requests Python library to allow local filesystem access via <code>file://</code> URLs.</p><div>Current sha265 values:<div>(py3) <code>requests-file==1.5.1 --hash=sha256:fb65796b527fecaa64db5467168beb58ddcd2a69e21b5b83933628510bd527b4</code></div></div>",
"usageNotes": "<p>Use the package as such:</p><pre><code>import requests<br>from requests_file import FileAdapter<br><br>s = requests.Session()<br>s.mount('file://', FileAdapter())<br><br>resp = s.get('file:///path/to/file')<br></code></pre>",
"linkToSite": "https://github.com/dashea/requests-file",
"siteName": "github",
"license": "APACHE2",
"linkToLicense": "https://github.com/dashea/requests-file/blob/master/LICENSE",
"version": "1.5.1",
"installCommand": "requests-file==1.5.1--hash=sha256:<hash>"
}
},
{
"name": "requests-ftp",
"tags": [ "web" ],
"versions": " 0.3.1",
"info":
{
"description": "<p>Requests-FTP is an implementation of a very stupid FTP transport adapter for use with the awesome <a href='https://github.com/kennethreitz/requests'>Requests</a> Python library.</p><p>This library is not intended to be an example of Transport Adapters best practices. This library was cowboyed together in about 4 hours of total work, has no tests, and relies on a few ugly hacks. Instead, it is intended as both a starting point for future development and a useful example for how to implement transport adapters.</p><div>Current sha265 values:<div>(py3) <code>requests-ftp==0.3.1 --hash=sha256:ddfd6ce563516741ab87b67545f2b0f5acbcf7224391bf605f596395d49429d3</code></div></div>",
"usageNotes": "<p>Example of using the package:</p><pre><code>&gt;&gt;&gt; import requests<br>&gt;&gt;&gt; import requests_ftp<br>&gt;&gt;&gt; requests_ftp.monkeypatch_session()<br>&gt;&gt;&gt; s = requests.Session()<br>&gt;&gt;&gt; resp = s.list('ftp://127.0.0.1/', auth=('Lukasa', 'notmypass'))<br>&gt;&gt;&gt; resp.status_code<br>'226'<br>&gt;&gt;&gt; print resp.content<br>...snip...<br>&gt;&gt;&gt; resp = s.stor('ftp://127.0.0.1/test.txt', auth=('Lukasa', 'notmypass'),<br>                   files={'file': open('report.txt', 'rb')})<br></code></pre>",
"linkToSite": "https://github.com/Lukasa/requests-ftp",
"siteName": "github",
"license": "APACHE2",
"linkToLicense": "https://github.com/Lukasa/requests-ftp/blob/master/LICENSE",
"version": "0.3.1",
"installCommand": "requests-ftp==0.3.1--hash=sha256:<hash>"
}
},
{
"name": "requests-toolbelt",
"tags": [ "utility" ],
"versions": " 0.9.1",
"info":
{
"description": "<p>This is just a collection of utilities for <a href='https://github.com/kennethreitz/requests'>python-requests</a>, but which don’t really belong in <code>requests</code> proper.</p><div>Current sha265 values:<div>(py3) <code>requests-toolbelt==0.9.1 --hash=sha256:42015d97230243f82259fd6eb96c79b0c403eab0a9629a31750094c80523a3ae</code></div></div>",
"usageNotes": "<p>The main attraction is a streaming multipart form-data object, <code>MultipartEncoder</code>. Its API looks like this:</p><pre><code>from requests_toolbelt import MultipartEncoder<br>import requests<br><br>m = MultipartEncoder(<br>    fields={'field0': 'value', 'field1': 'value',<br>            'field2': ('filename', open('file.py', 'rb'), 'text/plain')}<br>    )<br><br>r = requests.post('http://httpbin.org/post', data=m,<br>                  headers={'Content-Type': m.content_type})<br></code></pre><p>You can also use <code>multipart/form-data</code> encoding for requests that don’t require files:</p><pre><code>from requests_toolbelt import MultipartEncoder<br>import requests<br><br>m = MultipartEncoder(fields={'field0': 'value', 'field1': 'value'})<br><br>r = requests.post('http://httpbin.org/post', data=m,<br>                  headers={'Content-Type': m.content_type})<br></code></pre><p>Or, you can just create the string and examine the data:</p><pre><code># Assuming `m` is one of the above<br>m.to_string()  # Always returns unicode<br></code></pre><p>Refer to <a href='https://toolbelt.readthedocs.io/en/latest/user.html'>readthedocs.io</a> for further usage information.</p>",
"linkToSite": "https://toolbelt.readthedocs.io/en/latest/",
"siteName": "readthedocs.io",
"license": "APACHE2",
"linkToLicense": "https://github.com/requests/toolbelt/blob/master/LICENSE",
"version": "0.9.1",
"installCommand": "requests-toolbelt==0.9.1--hash=sha256:<hash>"
}
},
{
"name": "seaborn",
"tags": [ "graphics","math" ],
"versions": " 0.11.0",
"info":
{
"description": "<p>Seaborn is a library for making statistical graphics in Python. It is built on top of <a href='https://matplotlib.org/'>matplotlib</a> and closely integrated with <a href='https://pandas.pydata.org/'>pandas</a> data structures.</p><p>Here is some of the functionality that seaborn offers:</p><ul><li>A dataset-oriented API for examining relationships between multiple variables </li><li>Convenient views onto the overall structure of complex datasets </li><li>Specialized support for using categorical variables to show observations or aggregate statistics </li><li>Options for visualizing univariate or bivariate distributions and for comparing them between subsets of data </li><li>Automatic estimation and plotting of linear regression models for different kinds of dependent variables </li><li>High-level abstractions for structuring multi-plot grids that let you easily build complex visualizations </li><li>Concise control over matplotlib figure styling with several built-in themes </li><li>Tools for choosing color palettes that faithfully reveal patterns in your data </li></ul><p>Seaborn aims to make visualization a central part of exploring and understanding data. Its dataset-oriented plotting functions operate on dataframes and arrays containing whole datasets and internally perform the necessary semantic mappings and statistical aggregations to produce informative plots.</p><div>Current sha265 values:<div>(py3) <code>seaborn==0.11.0 --hash=sha256:8c5fcbead711dd0c39f00701b11a0076de2186d6efce34b11418baf77024552a</code></div></div>",
"usageNotes": "<p>Extensive usage notes are available on <a href='https://seaborn.pydata.org/tutorial.html'>seaborn.pydata.org</a>.</p>",
"linkToSite": "https://seaborn.pydata.org/",
"siteName": "seaborn.pydata.org",
"license": "BSD3",
"linkToLicense": "https://github.com/mwaskom/seaborn/blob/master/LICENSE",
"version": "0.11.0",
"installCommand": "seaborn==0.11.0--hash=sha256:<hash>"
}
},
{
"name": "setuptools",
"tags": [ "utility" ],
"versions": " 67.1.0",
"info":
{
"description": "<p><code>setuptools</code> comprises a useful component for <a href='https://packaging.python.org/en/latest/tutorials/installing-packages/#ensure-pip-setuptools-and-wheel-are-up-to-date'>Python Packaging / Package Management</a> along with <code>pip</code> and <code>wheel</code>.</p><p>Setuptools is a fully-featured, actively-maintained, and stable library designed to facilitate packaging Python projects.</p><div>Current sha265 values:<div>(py3) <code>setuptools==67.1.0 --hash=sha256:a7687c12b444eaac951ea87a9627c4f904ac757e7abdc5aac32833234af90378</code></div></div>",
"usageNotes": "<p>For basic use of setuptools, you will need a <code>pyproject.toml</code> with the exact following info, which declares you want to use <code>setuptools</code> to package your project:</p><pre><code>[build-system]<br>requires = [&ldquo;setuptools&ldquo;]<br>build-backend = &ldquo;setuptools.build_meta&ldquo;[build-system]<br>requires = [&ldquo;setuptools&ldquo;]<br>build-backend = &ldquo;setuptools.build_meta&ldquo;<br></code></pre><p>Then, you will need to specify your package information such as metadata, contents, dependencies, etc.</p><p>Setuptools currently supports configurations from either <code>setup.cfg</code>, <code>setup.py</code> or <code>pyproject.toml</code> files, however, configuring new projects via setup.py is discouraged.</p><p>The following example demonstrates a minimum configuration: </p><h4>setup.cfg</h4><pre><code>[metadata]<br>name = mypackage<br>version = 0.0.1<br><br>[options]<br>packages = mypackage<br>install_requires =<br>    requests<br>    importlib-metadata; python_version &lt; &ldquo;3.8&ldquo;<br></code></pre><h4>setup.py</h4><pre><code>from setuptools import setup<br><br>setup(<br>    name='mypackage',<br>    version='0.0.1',<br>    packages=['mypackage'],<br>    install_requires=[<br>        'requests',<br>        'importlib-metadata; python_version == &ldquo;3.8&ldquo;',<br>    ],<br>)<br></code></pre><p>This is what your project would look like:</p><pre><code>~/mypackage/<br>    pyproject.toml<br>    setup.cfg # or setup.py<br>    mypackage/__init__.py<br></code></pre><p>Then, you need a builder, such as <a href='https://pypa-build.readthedocs.io/en/latest/index.html'>PyPA build</a>. After downloading it, invoke the builder:</p><pre><code>python -m build<br></code></pre><p>You now have your distribution ready!</p><p>Full documentation can be found on <a href='https://setuptools.pypa.io/en/latest/userguide/quickstart.html'>the official guide</a>.</p>",
"linkToSite": "https://github.com/pypa/setuptools",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/pypa/setuptools/blob/main/LICENSE",
"version": "67.1.0",
"installCommand": "setuptools==67.1.0--hash=sha256:<hash>"
}
},
{
"name": "six",
"tags": [ "utility","programming_tools" ],
"versions": " 1.16.0",
"info":
{
"description": "<p>Six is a Python 2 and 3 compatibility library. It provides utility functions for smoothing over the differences between the Python versions with the goal of writing Python code that is compatible on both Python versions.</p><p>Six supports Python 2.7 and 3.3+.</p><div>Current sha265 values:<div>(py3) <code>six==1.16.0 --hash=sha256:31b9420324b64686ad1e85d1a981456eeca115dc8503e168ecae830f8f83d86e</code></div></div>",
"usageNotes": "<p>Here’s example usage of the module:</p><pre><code>import six<br><br>def dispatch_types(value):<br>    if isinstance(value, six.integer_types):<br>        handle_integer(value)<br>    elif isinstance(value, six.class_types):<br>        handle_class(value)<br>    elif isinstance(value, six.string_types):<br>        handle_string(value)<br></code></pre><p>Documentation should be referenced at <a href='https://six.readthedocs.io/'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/benjaminp/six",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/benjaminp/six/blob/master/LICENSE",
"version": "1.16.0",
"installCommand": "six==1.16.0--hash=sha256:<hash>"
}
},
{
"name": "sklearn-pandas",
"tags": [ "math","utility","machine-learning" ],
"versions": " 2.2.0",
"info":
{
"description": "<p>This module provides a bridge between <a href='http://scikit-learn.org/stable'>Scikit-Learn's</a> machine learning methods and <a href='https://pandas.pydata.org/'>pandas</a>-style Data Frames. In particular, it provides a way to map <code>DataFrame</code> columns to transformations, which are later recombined into features.</p><div>Current sha265 values:<div>(py3) <code>sklearn-pandas==2.2.0 --hash=sha256:696cdad0ceb563c20185f409af7bc6f55006801d7e440f10e383fccb59ebcc4f</code></div></div>",
"usageNotes": "<p>Usage instructions are provided on <a href='https://github.com/scikit-learn-contrib/sklearn-pandas/blob/master/README.rst'>github</a>.</p>",
"linkToSite": "https://github.com/scikit-learn-contrib/sklearn-pandas",
"siteName": "github",
"license": "OTHER",
"linkToLicense": "https://github.com/scikit-learn-contrib/sklearn-pandas/blob/master/LICENSE",
"version": "2.2.0",
"installCommand": "sklearn-pandas==2.2.0--hash=sha256:<hash>"
}
},
{
"name": "sortedcontainers",
"tags": [ "programming_tools" ],
"versions": " 2.4.0",
"info":
{
"description": "<p>Sorted Containers is an Apache2 licensed <a href='http://www.grantjenks.com/docs/sortedcontainers/'>sorted collections library</a>, written in pure-Python, and fast as C-extensions.</p><p>Python’s standard library is great until you need a sorted collections type. Many will attest that you can get really far without one, but the moment you really need a sorted list, sorted dict, or sorted set, you’re faced with a dozen different implementations, most using C-extensions without great documentation and benchmarking.</p><p>In Python, we can do better. And we can do it in pure-Python!</p><div>Current sha265 values:<div>(py3) <code>sortedcontainers==2.4.0 --hash=sha256:68b7a37f75182b47c1655391a5f047225ec0665aeaf5a6420da5ee03f070ced2</code></div></div>",
"usageNotes": "<pre><code>&gt;&gt;&gt; from sortedcontainers import SortedList<br>&gt;&gt;&gt; sl = SortedList(['e', 'a', 'c', 'd', 'b'])<br>&gt;&gt;&gt; sl<br>SortedList(['a', 'b', 'c', 'd', 'e'])<br>&gt;&gt;&gt; sl *= 10_000_000<br>&gt;&gt;&gt; sl.count('c')<br>10000000<br>&gt;&gt;&gt; sl[-3:]<br>['e', 'e', 'e']<br>&gt;&gt;&gt; from sortedcontainers import SortedDict<br>&gt;&gt;&gt; sd = SortedDict({'c': 3, 'a': 1, 'b': 2})<br>&gt;&gt;&gt; sd<br>SortedDict({'a': 1, 'b': 2, 'c': 3})<br>&gt;&gt;&gt; sd.popitem(index=-1)<br>('c', 3)<br>&gt;&gt;&gt; from sortedcontainers import SortedSet<br>&gt;&gt;&gt; ss = SortedSet('abracadabra')<br>&gt;&gt;&gt; ss<br>SortedSet(['a', 'b', 'c', 'd', 'r'])<br>&gt;&gt;&gt; ss.bisect_left('c')<br>2<br></code></pre><p>All of the operations shown above run in faster than linear time. The above demo also takes nearly a gigabyte of memory to run. When the sorted list is multiplied by ten million, it stores ten million references to each of “a” through “e”. Each reference requires eight bytes in the sorted container. That’s pretty hard to beat as it’s the cost of a pointer to each object. It’s also 66% less overhead than a typical binary tree implementation (e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for which every node must also store two pointers to children nodes.</p><p>Full documentation can be found at <a href='https://grantjenks.com/docs/sortedcontainers/'>grantjenks.com/docs/sortedcontainers</a>.</p>",
"linkToSite": "https://grantjenks.com/docs/sortedcontainers/",
"siteName": "grantjenks.com/docs/sortedcontainers",
"license": "APACHE2",
"linkToLicense": "https://github.com/grantjenks/python-sortedcontainers/blob/master/LICENSE",
"version": "2.4.0",
"installCommand": "sortedcontainers==2.4.0--hash=sha256:<hash>"
}
},
{
"name": "soupsieve",
"tags": [ "utility" ],
"versions": " 2.4.post1",
"info":
{
"description": "<p>Soup Sieve is a CSS selector library designed to be used with Beautiful Soup 4. It aims to provide selecting, matching, and filtering using modern CSS selectors. </p><div>Current sha265 values:<div>(py3) <code>soupsieve==2.4.post1 --hash=sha256:3ac2640b335b0981d6a7fdd11029b009e066cecef343973a1c99c4be1cb846d9</code></div></div>",
"usageNotes": "<p>For advanced tool documentation, refer to <a href='https://github.com/facelessuser/soupsieve'>github.com</a>.</p>",
"linkToSite": "https://github.com/ibm-z-oss-oda/soupsieve",
"siteName": "https://github.com/ibm-z-oss-oda/soupsieve",
"license": "MIT",
"linkToLicense": "https://github.com/ibm-z-oss-oda/soupsieve/blob/main/LICENSE.md",
"version": "2.4.post1",
"installCommand": "soupsieve==2.4.post1--hash=sha256:<hash>"
}
},
{
"name": "stack-data",
"tags": [ "utility" ],
"versions": " 0.6.2",
"info":
{
"description": "<p>This is a library that extracts data from stack frames and tracebacks, particularly to display more useful tracebacks than the default.  </p><div>Current sha265 values:<div>(py3) <code>stack-data==0.6.2 --hash=sha256:deba2972b7c7e2c1e2134d35c1f6af8f593bdcbc3907ef11a1ed2d9dcb9e2a73</code></div></div>",
"usageNotes": "<p>For advanced tool documentation, refer to <a href='https://github.com/alexmojaki/stack_data'>github.com</a>.</p>",
"linkToSite": "https://github.com/ibm-z-oss-oda/stack_data",
"siteName": "https://github.com/ibm-z-oss-oda/stack_data",
"license": "MIT",
"linkToLicense": "https://github.com/ibm-z-oss-oda/stack_data/blob/master/LICENSE.txt",
"version": "0.6.2",
"installCommand": "stack-data==0.6.2--hash=sha256:<hash>"
}
},
{
"name": "tblib",
"tags": [ "programming_tools" ],
"versions": " 1.7.0",
"info":
{
"description": "<p>Serialization library for Exceptions and Tracebacks. It allows you to:</p><ul><li><a href='https://docs.python.org/3/library/pickle.html'>Pickle</a> tracebacks and raise exceptions with pickled tracebacks in different processes. This allows better error handling when running code over multiple processes (imagine multiprocessing, billiard, futures, celery etc). </li><li>Create traceback objects from strings (the <code>from_string</code> method). No pickling is used. </li><li>Serialize tracebacks to/from plain dicts (the <code>from_dict</code> and <code>to_dict</code> methods). No pickling is used. </li><li>Raise the tracebacks created from the aforementioned sources. </li><li>Pickle an Exception together with its traceback and exception chain (<code>raise ... from ...</code>)</li></ul><div>Current sha265 values:<div>(py3) <code>tblib==1.7.0 --hash=sha256:f3cd22a63042625ea011d5dda3828e561eacfc343e8d84abef50b85f4170a1d9</code></div></div>",
"usageNotes": "<p>Documentation for this package is available on <a href='https://python-tblib.readthedocs.io/en/latest/readme.html'>readthedocs.io</a>.</p>",
"linkToSite": "https://github.com/ionelmc/python-tblib",
"siteName": "github",
"license": "BSD2",
"linkToLicense": "https://github.com/ionelmc/python-tblib/blob/master/LICENSE",
"version": "1.7.0",
"installCommand": "tblib==1.7.0--hash=sha256:<hash>"
}
},
{
"name": "tdqm",
"tags": [ "utility" ],
"versions": " 0.0.1",
"info":
{
"description": "<p>Alias for typos of <a href='https://github.com/tqdm/tqdm'tqdm</a>.</p><div>Current sha265 values:<div>(py3) <code>tdqm==0.0.1 --hash=sha256:7e65765fa403d7379d87c22cdf5af13ae8f7d7113ece441df44e2004976fdd5b</code></div></div>",
"usageNotes": "<p>This package simply provides an alias for <code>tqdm</code>.</p>",
"linkToSite": "https://github.com/tqdm/tqdm",
"siteName": "github",
"license": "OTHER",
"linkToLicense": "https://github.com/tqdm/tqdm/blob/master/LICENCE",
"version": "0.0.1",
"installCommand": "tdqm==0.0.1--hash=sha256:<hash>"
}
},
{
"name": "tqdm",
"tags": [ "graphics" ],
"versions": " 4.64.1",
"info":
{
"description": "<p><code>tqdm</code> means 'progress' in Arabic (taqadum) and is an abbreviation for 'I love you so much' in Spanish (te quiero demasiado).</p><p>Instantly make your loops show a smart progress meter - just wrap any iterable with tqdm(iterable), and you're done!</p><div>Current sha265 values:<div>(py3) <code>tqdm==4.64.1 --hash=sha256:7e65765fa403d7379d87c22cdf5af13ae8f7d7113ece441df44e2004976fdd5b</code></div></div>",
"usageNotes": "<pre><code>from tqdm import tqdm<br>for i in tqdm(range(10000)):<br>    ...<br></code></pre><br><pre><code>76%|████████████████████████████         | 7568/10000 [00:33<00:10, 229.00it/s]<br></code></pre><p>See full docs on <a href='https://tqdm.github.io/'>tqdm.github.io</a>.</p>",
"linkToSite": "https://tqdm.github.io/",
"siteName": "tqdm.github.io",
"license": "OTHER",
"linkToLicense": "https://github.com/tqdm/tqdm/blob/master/LICENCE",
"version": "4.64.1",
"installCommand": "tqdm==4.64.1--hash=sha256:<hash>"
}
},
{
"name": "threadpoolctl",
"tags": [ "utility" ],
"versions": " 3.1.0",
"info":
{
"description": "<p> Python helpers to limit the number of threads used in the threadpool-backed of common native libraries used for scientific computing and data science (e.g. BLAS and OpenMP). </p><div>Current sha265 values:<div>(py3) <code>threadpoolctl==3.1.0 --hash=sha256:c897f6242e3de5cf660e0e07ef19dec86e05312af31e03153401421893f62e4e</code></div></div>",
"usageNotes": "<p>For advanced tool documentation, refer to <a href='https://github.com/joblib/threadpoolctl'>github.com</a>.</p>",
"linkToSite": "https://github.com/ibm-z-oss-oda/threadpoolctl",
"siteName": "https://github.com/ibm-z-oss-oda/threadpoolctl",
"license": "BSD 3",
"linkToLicense": "https://github.com/ibm-z-oss-oda/threadpoolctl/blob/master/LICENSE",
"version": "3.1.0",
"installCommand": "threadpoolctl==3.1.0--hash=sha256:<hash>"
}
},
{
"name": "typing-extensions",
"tags": [ "utilty" ],
"versions": " 4.3.0",
"info":
{
"description": "<p>The <code>typing_extensions</code> module serves two related purposes:</p><p>Enable use of new type system features on older Python versions. For example, <code>typing.TypeGuard</code> is new in Python 3.10, but <code>typing_extensions</code> allows users on Python 3.6 through 3.9 to use it too.</p><p>Enable experimentation with new type system PEPs before they are accepted and added to the <code>typing</code> module.</p><div>Current sha265 values:<div>(py3) <code>typing-extensions==4.3.0 --hash=sha256:cd9a38ed0cb9768bffb0d041c3ec707ff1710b0e29893dd86370815aac134946</code></div></div>",
"usageNotes": "<p>To use this module, refer to the README instructions on the source <a href='https://github.com/python/typing/blob/master/typing_extensions/README.rst'>github</a> page.</p>",
"linkToSite": "https://github.com/python/typing/blob/master/typing_extensions/README.rst",
"siteName": "github",
"license": "OTHER",
"linkToLicense": "https://github.com/python/typing/blob/master/typing_extensions/LICENSE",
"version": "4.3.0",
"installCommand": "typing-extensions==4.3.0--hash=sha256:<hash>"
}
},
{
"name": "wcwidth",
"tags": [ "utility" ],
"versions": " 0.2.5",
"info":
{
"description": "<p>This library is mainly for CLI programs that carefully produce output for Terminals, or make pretend to be an emulator.</p><p> The printable length of most strings are equal to the number of cells they occupy on the screen <code>1 charater : 1 cell</code>. However, there are categories of characters that occupy 2 cells (full-wide), and others that occupy 0 cells (zero-width).</p><p>POSIX.1-2001 and POSIX.1-2008 conforming systems provide <a href='http://man7.org/linux/man-pages/man3/wcwidth.3.html'>wcwidth(3)</a> and <a href='http://man7.org/linux/man-pages/man3/wcswidth.3.html'>wcswidth(3)</a> C functions of which this python module’s functions precisely copy. These functions return the number of cells a unicode string is expected to occupy.</p><div>Current sha265 values:<div>(py3) <code>wcwidth==0.2.5 --hash=sha256:beb4802a9cebb9144e99086eff703a642a13d6a0052920003a230f3294bbe784</code></div></div>",
"usageNotes": "<p> given the following phrase (Japanese),</p><code> text = u'コンニチハ'</code><p>Python incorrectly uses the string length of 5 codepoints rather than the printible length of 10 cells, so that when using the rjust function, the output length is wrong:</p><pre><code>&gt;&gt;&gt; print(len('コンニチハ'))<br>5<br><br>&gt;&gt;&gt; print('コンニチハ'.rjust(20, '_'))<br>_____コンニチハ<br></code></pre><p>By defining our own “rjust” function that uses wcwidth, we can correct this:</p><pre><code>&gt;&gt;&gt; def wc_rjust(text, length, padding=' '):<br>...    from wcwidth import wcswidth<br>...    return padding * max(0, (length - wcswidth(text))) + text<br>...<br></code></pre><p>Our Solution uses wcswidth to determine the string length correctly:</p><pre><code>&gt;&gt;&gt; from wcwidth import wcswidth<br>&gt;&gt;&gt; print(wcswidth('コンニチハ'))<br>10<br><br>>>> print(wc_rjust('コンニチハ', 20, '_'))<br>__________コンニチハ<br></code></pre>",
"linkToSite": "https://github.com/jquast/wcwidth",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/jquast/wcwidth/blob/master/LICENSE",
"version": "0.2.5",
"installCommand": "wcwidth==0.2.5--hash=sha256:<hash>"
}
},
{
"name": "webencodings",
"tags": [ "web","utility" ],
"versions": " 0.5.1",
"info":
{
"description": "<p>This is a Python implementation of the <a href='http://encoding.spec.whatwg.org/'>WHATWG Encoding standard</a>.</p><p>In order to be compatible with legacy web content when interpreting something like <code>Content-Type: text/html; charset=latin1</code>, tools need to use a particular set of aliases for encoding labels as well as some overriding rules. For example, <code>US-ASCII</code> and <code>iso-8859-1</code> on the web are actually aliases for <code>windows-1252</code>, and an UTF-8 or UTF-16 BOM takes precedence over any other encoding declaration. The Encoding standard defines all such details so that implementations do not have to reverse-engineer each other.</p><p>This module has encoding labels and BOM detection, but the actual implementation for encoders and decoders is Python’s.</p><div>Current sha265 values:<div>(py3) <code>webencodings==0.5.1 --hash=sha256:a0af1213f3c2226497a97e2b3aa01a7e4bee4f403f95be16fc9acd2947514a78</code></div></div>",
"usageNotes": "<p>Full documentation is hosted on <a href='https://pythonhosted.org/webencodings/'>pythonhosted.org</a>.</p>",
"linkToSite": "https://github.com/gsnedders/python-webencodings",
"siteName": "github",
"license": "??",
"linkToLicense": "https://github.com/gsnedders/python-webencodings/blob/master/LICENSE",
"version": "0.5.1",
"installCommand": "webencodings==0.5.1--hash=sha256:<hash>"
}
},
{
"name": "zipp",
"tags": [ "programming_tools" ],
"versions": " 3.8.0",
"info":
{
"description": "<p>A pathlib-compatible Zipfile object wrapper. Official backport of the standard library <a href='https://docs.python.org/3.8/library/zipfile.html#path-objects'>Path object</a>.</p><div>Current sha265 values:<div>(py3) <code>zipp==3.8.0 --hash=sha256:84912290631787bb5ce3b42b3fbff00034968ac61a03751126cccf54e6dca245</code></div></div>",
"usageNotes": "<p>To use this package, simply use zipp.Path in place of zipfile.Path on any Python.</p>",
"linkToSite": "https://github.com/jaraco/zipp",
"siteName": "github",
"license": "MIT",
"linkToLicense": "https://github.com/jaraco/zipp/blob/main/LICENSE",
"version": "3.8.0",
"installCommand": "zipp==3.8.0--hash=sha256:<hash>"
}
},
{
"name": "zos-util",
"tags": [ "utility" ],
"versions": " 1.0.1",
"info":
{
"description": "<p>This module provides a Python interface into various z/OS utilities</p><div>Current sha265 values:<div>(cp311) <code>zos_util==1.0.1 --hash=sha256:528ac3f7f12cb3756d08eed9c04ea5873084bdf776c6d09e9ca00c8f61c6f808</code></div></div>",
"usageNotes": "<p>Example:</p><pre><code>import zos_util<br>import tempfile<br>f = tempfile.NamedTemporaryFile()<br># To specify a file with IBM-1047 code set<br>fpath = f.name<br>zos_util.chtag(fpath, 1047)<br> <br># To specify a file with ISO8859-1 code set<br>zos_util.chtag(fpath)<br>tag_info = zos_util.get_tag_info(fpath)<br>print(f&ldquo;CCSID:{tag_info[0]}, TXT_FLAG:{tag_info[1]}&ldquo;)<br> <br># set to tag_mixed mode<br>zos_util.tag_mixed(fpath)<br>tag_info = zos_util.get_tag_info(fpath)<br>print(f&ldquo;CCSID:{tag_info[0]}, TXT_FLAG:{tag_info[1]}&ldquo;)<br> <br># remove the tag from the file<br>zos_util.untag(fpath)<br>tag_info = zos_util.get_tag_info(fpath)<br>print(f&ldquo;CCSID:{tag_info[0]}, TXT_FLAG:{tag_info[1]}&ldquo;)<br></code></pre><p>Package documentation is available <a href='https://www.ibm.com/docs/en/python-zos/3.8?topic=package-documentation-zos-util'>here</a>.</p>",
"linkToSite": "https://github.com/IBM/zos-util",
"siteName": "github",
"license": "APACHE2",
"linkToLicense": "https://github.com/IBM/zos-util/blob/main/LICENSE",
"version": "1.0.1",
"installCommand": "zos-util==1.0.1--hash=sha256:<hash>"
}
}
]