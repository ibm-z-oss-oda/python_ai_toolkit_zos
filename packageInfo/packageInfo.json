{
  "fastjsonschema": {
    "image_name": "fastjsonschema",
    "alt_image_name": "fastjsonschema",
    "description": "<p>Fastest Python implementation of JSON schema.</p>\n\n<p><code>fastjsonschema</code> implements validation of JSON documents by JSON schema. The library implements JSON schema drafts 04, 06 and 07. The main purpose is to have a really fast implementation.</p>\n",
    "site_name": "github.io",
    "link_to_site": "https://horejsek.github.io/python-fastjsonschema/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/horejsek/python-fastjsonschema/blob/master/LICENSE",
    "usage_notes": "<p>Full documentation is available <a href=\"https://horejsek.github.io/python-fastjsonschema/\">here</a>.</p>",
    "tags": "utility",
    "versions": {
      "2.16.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "21f918e8d9a1a4ba9c22e09574ba72267a6762d47822db9add95f6454e51cc1c"
          }
        ]
      }
    }
  },
  "ipykernel": {
    "image_name": "ipykernel",
    "alt_image_name": "ipykernel",
    "description": "\n<p>This package provides the IPython kernel for Jupyter.</p>\n\n<p>IPython is a growing project, with increasingly language-agnostic components. IPython 3.x was the last monolithic release of IPython, containing the notebook server, qtconsole, etc. As of IPython 4.0, the language-agnostic parts of the project: the notebook format, message protocol, qtconsole, notebook web application, etc. have moved to new projects under the name Jupyter. IPython itself is focused on interactive Python, part of which is providing a Python kernel for Jupyter.</p>",
    "site_name": "ipython.org",
    "link_to_site": "https://ipython.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/ipython/ipykernel/blob/main/COPYING.md",
    "usage_notes": "<p>Following installation, all normal <code>ipython</code> commands will use this newly-installed version of the kernel. </p>\n<p>Please refer to <a href=\"https://ipython.readthedocs.io/en/latest/\">readthedocs.io</a> for further information. Notice that ipykernel itself has minimal documentation, as this documentation largely covers ipython itself, of which the kernel is a component.</p>",
    "tags": "programming_tools",
    "versions": {
      "6.9.1.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "cb018cb5bfffb23cd42671c1ee5a374f677e96b8cb4709ba5f0c43980f81ef5d"
          }
        ]
      }
    }
  },
  "babel": {
    "image_name": "babel",
    "alt_image_name": "babel",
    "description": "<p>Babel is a Python library that provides an integrated collection of utilities that assist with internationalizing and localizing Python applications (in particular web-based applications.).</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/python-babel/babel",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/python-babel/babel/blob/master/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://babel.pocoo.org/en/latest/api/core.html#basic-interface\">babel.pocoo.org</a>.</p>",
    "tags": "languages",
    "versions": {
      "2.16.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "4cc7103c241fa2d2d14871911aebd6085b74dd1534e3f73744f7f9a7adadcffb"
          }
        ]
      }
    }
  },
  "ipython-genutils": {
    "image_name": "ipython-genutils",
    "alt_image_name": "ipython-genutils",
    "description": "<p>Vestigial utilities from IPython.</p>\n",
    "site_name": "ipython.org",
    "link_to_site": "http://ipython.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/ipython/ipython_genutils/blob/master/COPYING.md",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://ipython.org/ipython-doc/rel-0.10.2/html/api/generated/IPython.genutils.html\">ipython.org</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "0.3.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "d9411249d0a53101a0482e3a66166b443e68da1b4b1b337aea4acba94a640a74"
          }
        ]
      }
    }
  },
  "fsspec": {
    "image_name": "fsspec",
    "alt_image_name": "fsspec",
    "description": "<p>A specification for pythonic filesystems.</p>\n<p>Purpose: To produce a template or specification for a file-system interface, that specific implementations should follow, so that applications making use of them can rely on a common behaviour and not have to worry about the specific internal implementation decisions with any given backend. Many such implementations are included in this package.</p>\n<p>In addition, if this is well-designed, then additional functionality, such as a key-value store or FUSE mounting of the file-system implementation may be available for all implementations \"for free\".</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/fsspec/filesystem_spec",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/fsspec/filesystem_spec/blob/master/LICENSE",
    "usage_notes": "<h4>Instantiating a File System:</h4>\n<p><code>fsspec</code> provides an abstract file-system interface as a base class, to be used by other filesystems. A file-system instance is an object for manipulating files on some remote store, local files, files within some wrapper, or anything else that is capable of producing file-like objects.</p>\n<p>Some concrete implementations are bundled with <code>fsspec</code> and others can be installed separately. They can be instantiated directly, or the <code>registry</code> can be used to find them.</p>\n<p>Direct instantiation:</p>\n<pre><code>\nfrom fsspec.implementations.local import LocalFileSystem<br>\n<br>\nfs = LocalFileSystem()<br>\n</code></pre>\n<p>Look-up via registry:</p>\n<pre><code>\nimport fsspec<br>\n<br>\nfs = fsspec.filesystem('file')<br>\n</code></pre>\n\n<h4>Use a file-system:</h4>\n<p>File-system instances offer a large number of methods for getting information about and manipulating files for the given back-end. Although some specific implementations may not offer all features (e.g., <code>http</code> is read-only), generally all normal operations, such as <code>ls</code>, <code>rm</code>, should be expected to work (see the full list: <code>fsspec.spec.AbstractFileSystem</code>). Note that this quick-start will prefer posix-style naming, but many common operations are aliased: <code>cp()</code> and <code>copy()</code> are identical, for instance. Functionality is generally chosen to be as close to the builtin <code>os</code> module\u2019s working for things like <code>glob</code> as possible. The following block of operations should seem very familiar.</p>\n<pre><code>\nfs.mkdir(\"/remote/output\")<br>\nfs.touch(\"/remote/output/success\")  # creates empty file<br>\nassert fs.exists(\"/remote/output/success\")<br>\nassert fs.isfile(\"/remote/output/success\")<br>\nassert fs.cat(\"/remote/output/success\") == b\"\"  # get content as bytestring<br>\nfs.copy(\"/remote/output/success\", \"/remote/output/copy\")<br>\nassert fs.ls(\"/remote/output\", detail=False) == [\"/remote/output/success\", \"/remote/output/copy\")<br>\nfs.rm(\"/remote/output\", recursive=True)<br>\n</code></pre>\n<p>Further usage notes are available on <a href=\"https://filesystem-spec.readthedocs.io/en/latest/usage.html\">readthedocs.io</a>.</p>",
    "tags": "utility programming_tools",
    "versions": {
      "2022.7.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "b536b98933f9df2b88aa05e6d59e9ef93f0d78e6c369d90165d6c187dff021d4"
          }
        ]
      }
    }
  },
  "chardet": {
    "image_name": "chardet",
    "alt_image_name": "chardet",
    "description": "<p>Character encoding auto-detection in Python. As smart as your browser. Open source.Character encoding auto-detection in Python. As smart as your browser. Open source.</p>\n<p>Detects:</p>\n<ul>\n<li>ASCII, UTF-8, UTF-16 (2 variants), UTF-32 (4 variants) </li>\n<li>Big5, GB2312, EUC-TW, HZ-GB-2312, ISO-2022-CN (Traditional and Simplified Chinese) </li>\n<li>EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP (Japanese) </li>\n<li>EUC-KR, ISO-2022-KR (Korean) </li>\n<li>KOI8-R, MacCyrillic, IBM855, IBM866, ISO-8859-5, windows-1251 (Cyrillic) </li>\n<li>ISO-8859-5, windows-1251 (Bulgarian) </li>\n<li>ISO-8859-1, windows-1252 (Western European languages) </li>\n<li>ISO-8859-7, windows-1253 (Greek) </li>\n<li>ISO-8859-8, windows-1255 (Visual and Logical Hebrew) </li>\n<li>TIS-620 (Thai) </li>\n\n</ul>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/chardet/chardet",
    "site_name_license": "LGPL",
    "link_to_license": "https://github.com/chardet/chardet/blob/master/LICENSE",
    "usage_notes": "<p>The easiest way to use the Universal Encoding Detector library is with the <code>detect</code> function.</p>\n\n<p>The <code>detect</code> function takes one argument, a non-Unicode string. It returns a dictionary containing the auto-detected character encoding and a confidence level from <code>0</code> to <code>1</code>.</p>\n\n<pre><code>\n&gt;&gt;&gt; import urllib.request<br>\n&gt;&gt;&gt; rawdata = urllib.request.urlopen('http://yahoo.co.jp/').read()<br>\n&gt;&gt;&gt; import chardet<br>\n&gt;&gt;&gt; chardet.detect(rawdata)<br>\n{'encoding': 'EUC-JP', 'confidence': 0.99}<br>\n</code></pre>\n\n<p>Additional docs can be found on <a href=\"https://chardet.readthedocs.io/en/latest/usage.html#basic-usage\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "5.0.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "94d1ca5fdadb2b4ae24a1f83b8dd15cfe7a735620cc86d626dc50dc271476750"
          }
        ]
      }
    }
  },
  "defusedxml": {
    "image_name": "defusedxml",
    "alt_image_name": "defusedxml",
    "description": "<p>The results of an attack on a vulnerable XML library can be fairly dramatic. With just a few hundred Bytes of XML data an attacker can occupy several Gigabytes of memory within seconds. An attacker can also keep CPUs busy for a long time with a small to medium size request. Under some circumstances it is even possible to access local files on your server, to circumvent a firewall, or to abuse services to rebound attacks to third parties.</p>\n\n<p>The attacks use and abuse less common features of XML and its parsers. The majority of developers are unacquainted with features such as processing instructions and entity expansions that XML inherited from SGML. At best they know about <code>&lt;!DOCTYPE&gt;</code> from experience with HTML but they are not aware that a document type definition (DTD) can generate an HTTP request or load a file from the file system.</p>\n\n<p>None of the issues is new. They have been known for a long time. Billion laughs was first reported in 2003. Nevertheless some XML libraries and applications are still vulnerable and even heavy users of XML are surprised by these features. It's hard to say whom to blame for the situation. It's too short sighted to shift all blame on XML parsers and XML libraries for using insecure default settings. After all they properly implement XML specifications. Application developers must not rely that a library is always configured for security and potential harmful data by default.</p>\n\n<p>The defusedxml package contains several Python-only workarounds and fixes for denial of service and other vulnerabilities in Python's XML libraries.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/tiran/defusedxml",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/tiran/defusedxml/blob/main/LICENSE",
    "usage_notes": "<p>In order to benefit from the protection you just have to import and use the listed functions / classes from the right defusedxml module instead of the original module. Merely defusedxml.xmlrpc is implemented as monkey patch.</p>\n<p>Instead of:</p>\n<pre><code>\nfrom xml.etree.ElementTree import parse<br>\net = parse(xmlfile)<br>\n</code></pre>\n<p>alter code to:</p>\n<pre><code>\nfrom defusedxml.ElementTree import parse<br>\net = parse(xmlfile)<br>\n</code></pre>\n<p>Additionally the package has an untested function to monkey patch all stdlib modules with <code>defusedxml.defuse_stdlib()</code>.</p>\n<p>Please refer to <a href=\"https://github.com/tiran/defusedxml#readme\">github</a> for extensive usage notes and tips.</p>",
    "tags": "security",
    "versions": {
      "0.7.1.post3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "b9fcbc583c42560d13747fcff66a17e2360708e672618f2bb3a92881f26c1da9"
          }
        ]
      }
    }
  },
  "packaging": {
    "image_name": "packaging",
    "alt_image_name": "packaging",
    "description": "<p>Reusable core utilities for various Python Packaging <a href=\"https://packaging.python.org/specifications/\">interoperability specifications</a>.</p>\n\n<p>This library provides utilities that implement the interoperability specifications which have clearly one correct behaviour (eg: <a href=\"http://www.python.org/dev/peps/pep-0440\">PEP 440</a>) or benefit greatly from having a single shared implementation (eg: <a href=\"http://www.python.org/dev/peps/pep-0425\">PEP 425</a>).</p>\n\n<p>The <code>packaging</code> project includes the following: version handling, specifiers, markers, requirements, tags, utilities.</p>\n",
    "site_name": "packaging.pypa.io",
    "link_to_site": "https://packaging.pypa.io/en/latest/",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/pypa/packaging/blob/main/LICENSE",
    "usage_notes": "\n<p>A core requirement of dealing with packages is the ability to work with versions. <a href=\"https://www.python.org/dev/peps/pep-0440/\">PEP 440</a> defines the standard version scheme for Python packages which has been implemented by this module.</p>\n\n<pre><code>\nfrom packaging.version import Version, parse<br>\nv1 = parse(\"1.0a5\")<br>\nv2 = Version(\"1.0\")<br>\nv1<br>\n   &lt;Version('1.0a5')&gt;<br>\nv2<br>\n   &lt;Version('1.0')&gt;<br>\nv1 &lt; v2<br>\n   True<br>\nv1.epoch<br>\n   0<br>\nv1.release<br>\n   (1, 0)<br>\nv1.pre<br>\n   ('a', 5)<br>\nv1.is_prerelease<br>\n   True<br>\nv2.is_prerelease<br>\n   False<br>\nVersion(\"french toast\")<br>\n   Traceback (most recent call last):<br>\n       ...<br>\n   InvalidVersion: Invalid version: 'french toast'<br>\nVersion(\"1.0\").post<br>\nVersion(\"1.0\").is_postrelease<br>\n   False<br>\nVersion(\"1.0.post0\").post<br>\n   0<br>\nVersion(\"1.0.post0\").is_postrelease<br>\n   True<br>\n</code></pre>\n\n<p>Please refer to <a href=\"https://packaging.pypa.io/en/latest/version.html\">packaging.pypa.io</a> for further documentation.</p>",
    "tags": "programming_tools",
    "versions": {
      "23.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "714ac14496c3e68c99c29b00845f7a2b85f3bb6f1078fd9f72fd20f0570002b2"
          }
        ]
      }
    }
  },
  "jaydebeapi": {
    "image_name": "jaydebeapi",
    "alt_image_name": "jaydebeapi",
    "description": "<p>The JayDeBeApi module allows you to connect from Python code to databases using Java <a href=\"http://java.sun.com/products/jdbc/overview.html\">JDBC</a>. It provides a Python <a href=\"http://www.python.org/dev/peps/pep-0249/\">DB-API</a> v2.0 to that database.</p>\n\n<p>It works on ordinary Python (cPython) using the <a href=\"https://pypi.python.org/pypi/JPype1/\">JPype</a> Java integration or on <a href=\"http://www.jython.org/\">Jython</a> to make use of the Java JDBC driver.</p>\n\n<p>JayDeBeApi\u2019s future goal is to provide a unique and fast interface to different types of JDBC-Drivers through a flexible plug-in mechanism.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/baztian/jaydebeapi",
    "site_name_license": "GPL",
    "link_to_license": "https://github.com/baztian/jaydebeapi/blob/master/COPYING",
    "usage_notes": "<p>To use this module, simply import it and then execute to <code>connect</code> method. This gives you a <a href=\"http://www.python.org/dev/peps/pep-0249/\">DB-API</a> connection to the database.</p>\n\n<p>The first argument to <code>connect</code> is the name of the Java driver class. The second argument is a string with the JDBC connection URL. Third you can optionally supply a sequence consisting of user and password or alternatively a dictionary containing arguments that are internally passed as properties to the Java <code>DriverManager.getConnection</code> method. See the Javadoc of <code>DriverManager</code> class for details.</p>\n\n<p>The next parameter to <code>connect</code> is optional as well and specifies the jar-Files of the driver if your classpath isn't set up sufficiently yet. The classpath set in <code>CLASSPATH</code> environment variable will be honored. See the documentation of your Java runtime environment.</p>\n\n<p>Here is an example:</p>\n\n<pre><code>\n&gt;&gt;&gt; import jaydebeapi<br>\n&gt;&gt;&gt; conn = jaydebeapi.connect(\"org.hsqldb.jdbcDriver\",<br>\n...                           \"jdbc:hsqldb:mem:.\",<br>\n...                           [\"SA\", \"\"],<br>\n...                           \"/path/to/hsqldb.jar\",)<br>\n&gt;&gt;&gt; curs = conn.cursor()<br>\n&gt;&gt;&gt; curs.execute('create table CUSTOMER'<br>\n...              '(\"CUST_ID\" INTEGER not null,'<br>\n...              ' \"NAME\" VARCHAR(50) not null,'<br>\n...              ' primary key (\"CUST_ID\"))'<br>\n...             )<br>\n&gt;&gt;&gt; curs.execute(\"insert into CUSTOMER values (?, ?)\", (1, 'John'))<br>\n&gt;&gt;&gt; curs.execute(\"select * from CUSTOMER\")<br>\n&gt;&gt;&gt; curs.fetchall()<br>\n[(1, u'John')]<br>\n&gt;&gt;&gt; curs.close()<br>\n&gt;&gt;&gt; conn.close()<br>\n</code></pre>\n\n<p>For further usage notes, please refer to <a href=\"https://github.com/baztian/jaydebeapi#id2\">github</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.2.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "b5e23093ac951361f3c169cc70c1e56ec72c147109bfde5368ceae625c7a648a"
          }
        ]
      }
    }
  },
  "markupsafe": {
    "image_name": "markupsafe",
    "alt_image_name": "markupsafe",
    "description": "<p>MarkupSafe implements a text object that escapes characters so it is safe to use in HTML and XML. Characters that have special meanings are replaced so that they display as the actual characters. This mitigates injection attacks, meaning untrusted user input can safely be displayed on a page.</p>\n",
    "site_name": "palletsprojects.com/p/markupsafe",
    "link_to_site": "https://palletsprojects.com/p/markupsafe/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/pallets/markupsafe/blob/main/LICENSE.rst",
    "usage_notes": "<p>Example of usage:</p>\n<pre><code>\n&gt;&gt;&gt; from markupsafe import Markup, escape<br>\n<br>\n&gt;&gt;&gt; # escape replaces special characters and wraps in Markup<br>\n&gt;&gt;&gt; escape(\"&lt;script&gt;alert(document.cookie);&lt;/script&gt;\")<br>\nMarkup('&amp;lt;script&amp;gt;alert(document.cookie);&amp;lt;/script&amp;gt;')<br>\n<br>\n&gt;&gt;&gt; # wrap in Markup to mark text \"safe\" and prevent escaping<br>\n&gt;&gt;&gt; Markup(\"&lt;strong&gt;Hello&lt;/strong&gt;\")<br>\nMarkup('&lt;strong&gt;hello&lt;/strong&gt;')<br>\n<br>\n&gt;&gt;&gt; escape(Markup(\"&lt;strong&gt;Hello&lt;/strong&gt;\"))<br>\nMarkup('&lt;strong&gt;hello&lt;/strong&gt;')<br>\n<br>\n&gt;&gt;&gt; # Markup is a str subclass<br>\n&gt;&gt;&gt; # methods and operators escape their arguments<br>\n&gt;&gt;&gt; template = Markup(\"Hello &lt;em&gt;{name}&lt;/em&gt;\")<br>\n&gt;&gt;&gt; template.format(name='\"World\"')<br>\nMarkup('Hello &lt;em&gt;&amp;#34;World&amp;#34;&lt;/em&gt;')<br>\n</code></pre>\n\n<p>See <a href=\"https://markupsafe.palletsprojects.com/en/2.1.x/\">markupsafe.pallasprojects.com</a> for additional documentation.</p>",
    "tags": "security utility",
    "versions": {
      "3.0.1": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "ba397724bfd8e44740eb3fe685c833adf0ef636ad0a223d55e565faf2560bd49"
          },
          {
            "py_version": "cp312",
            "sha256": "911de621b4ad0444763b1dab24be269813d151b8b54202dc7e908febdf59f3d4"
          },
          {
            "py_version": "cp313",
            "sha256": "886267583e2be24adbec69a2c8ed1429f459f7be42db6400f54b578927c033da"
          }
        ]
      }
    }
  },
  "certifi": {
    "image_name": "certifi",
    "alt_image_name": "certifi",
    "description": "\n<p>Certifi provides Mozilla\u2019s carefully curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. It has been extracted from the <a href=\"https://requests.readthedocs.io/en/master/\">Requests</a> project.</p>\n",
    "site_name": "readthedocs.io",
    "link_to_site": "https://certifiio.readthedocs.io/en/latest/",
    "site_name_license": "MPL",
    "link_to_license": "https://github.com/certifi/python-certifi/blob/master/LICENSE",
    "usage_notes": "\n<p>To reference the installed certificate authority (CA) bundle, you can use the built-in function:</p>\n<pre><code>\n>>> import certifi<br>\n<br>\n>>> certifi.where()<br>\n'/usr/local/lib/python3.7/site-packages/certifi/cacert.pem'<br>\n</code></pre><br>\n<p>Or from the command line:</p><br>\n<pre><code><br>",
    " python -m certifi<br>": "/usr/local/lib/python3.7/site-packages/certifi/cacert.pem<br>\n</code></pre>\n<p>Additional documentation is available via <a href=\"https://certifiio.readthedocs.io/en/latest/\">readthedocs.io</a></p>",
    "tags": "security",
    "versions": {
      "2024.2.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9332e0c336a2c52fcc7b7ad2984dea39c21c756f98b1a53c3560cd1606dbfb70"
          }
        ]
      }
    }
  },
  "jedi": {
    "image_name": "jedi",
    "alt_image_name": "jedi",
    "description": "\n<p>Jedi is a static analysis tool for Python that is typically used in IDEs/editors plugins. Jedi has a focus on autocompletion and goto functionality. Other features include refactoring, code search and finding references.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/davidhalter/jedi",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/davidhalter/jedi/blob/master/LICENSE.txt",
    "usage_notes": "<p>Here\u2019s a simple example of the autocompletion feature:</p>\n<pre><code>\n&gt;&gt;&gt; import jedi<br>\n&gt;&gt;&gt; source = '''<br>\n... import json<br>\n... json.lo'''<br>\n&gt;&gt;&gt; script = jedi.Script(source, path='example.py')<br>\n&gt;&gt;&gt; script<br>\n<Script: 'example.py' ...><br>\n&gt;&gt;&gt; completions = script.complete(3, len('json.lo'))<br>\n&gt;&gt;&gt; completions<br>\n[<Completion: load>, <Completion: loads>]<br>\n&gt;&gt;&gt; print(completions[0].complete)<br>\nad<br>\n&gt;&gt;&gt; print(completions[0].name)<br>\nload<br>\n</code></pre>\n<p>Further documentation should be referenced on <a href=\"https://jedi.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "programming_tools utility",
    "versions": {
      "0.18.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "203c1fd9d969ab8f2119ec0a3342e0b49910045abe6af0a3ae83a5764d54639e"
          }
        ]
      }
    }
  },
  "types-python-dateutil": {
    "image_name": "types-python-dateutil",
    "alt_image_name": "types-python-dateutil",
    "description": "<p>Typeshed contains external type annotations for the Python standard library and Python builtins, as well as third party packages as contributed by people external to those projects.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/python/typeshed",
    "site_name_license": "Apache-2.0",
    "link_to_license": "https://github.com/python/typeshed/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://typing.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "2.9.0.20240316": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "d2a63974d99735bfe27ecd94b0baccc7d8e5dd10ecb15d7d5dc69805e4b7ba86"
          }
        ]
      }
    }
  },
  "harfbuzz": {
    "image_name": "harfbuzz",
    "alt_image_name": "harfbuzz",
    "description": "\n<p> HarfBuzz is a text shaping library. Using the HarfBuzz library allows programs to convert a sequence of Unicode input into properly formatted and positioned glyph output\u2014for any writing system and language. </p>\n",
    "site_name": "harfbuzz.github.io",
    "link_to_site": "https://harfbuzz.github.io/",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/harfbuzz/harfbuzz/blob/main/COPYING",
    "usage_notes": "<p>Please see the <a href=\"https://harfbuzz.github.io/user-manual.html\">user manual</a> for instructions on how to use this image.</p>",
    "tags": "graphics languages",
    "versions": {
      "10.3.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "59f563f2d82e1cb0fdf4e085df738aa801dae494f7b9fbb6ee824acca937767e"
          }
        ]
      }
    }
  },
  "jupyter-console": {
    "image_name": "jupyter-console",
    "alt_image_name": "jupyter-console",
    "description": "<p>Jupyter terminal console:\nAn IPython-like terminal frontend for Jupyter kernels in any language.</p>\n</p>",
    "site_name": "jupyter.org",
    "link_to_site": "https://jupyter.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter/jupyter_console/blob/main/LICENSE",
    "usage_notes": "<p>Start the console with:</p>\n<pre><code>\njupyter console<br>\n</code></pre>\n\n\n<p>To see configuration options:</p>\n<pre><code>\njupyter console -h<br>\n</code></pre>\n\n<p>To start the console with a particular kernel, ask for it by name:</p>\n<pre><code>\njupyter console --kernel=julia-0.4<br>\n</code></pre>\n\n<p>A list of available kernels can be seen with:</p>\n<pre><code>\njupyter kernelspec list<br>\n</code></pre>\n\n<p>See complete documentation at <a href=\"https://jupyter-console.readthedocs.io/en/latest/\">jupyter-console.readthedocs.io</a>.</p>",
    "tags": "utility programming_tools",
    "versions": {
      "6.4.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9fa68c469332464c9c010413ccadd2758924d0cfe691ba21a4ef29b605579788"
          }
        ]
      }
    }
  },
  "libyaml": {
    "image_name": "libyaml",
    "alt_image_name": "libyaml",
    "description": "<p>LibYAML is a YAML parser and emitter library.</p>\n\n<p>LibYAML covers presenting and parsing processes. Thus LibYAML defines the following two processors:</p>\n\n<p> - <i>Parser</i>, which takes an input stream of bytes and produces a sequence of parsing events.</p>\n\n<p> - <i>Emitter</i>, which takes a sequence of events and produces a stream of bytes.</p>\n\n<p>The processes of parsing and presenting are inverse to each other. Any sequence of events produced by parsing a well-formed YAML document should be acceptable by the Emitter, which should produce an equivalent document. Similarly, any document produced by emitting a sequence of events should be acceptable for the Parser, which should produce an equivalent sequence of events.</p>\n",
    "site_name": "pyyaml.org",
    "link_to_site": "https://pyyaml.org/wiki/LibYAML",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/yaml/libyaml/blob/master/License",
    "usage_notes": "<p>Documentation on using this image is available on <a href=\"https://pyyaml.org/wiki/LibYAML\">pyyaml.org</a>/</p>",
    "tags": "languages utility",
    "versions": {
      "0.2.5.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "8c68e322de2a39786879a1a92742b77c2d6bad8899f25eeda389eb07370e6182"
          }
        ]
      }
    }
  },
  "whoosh": {
    "image_name": "whoosh",
    "alt_image_name": "whoosh",
    "description": "<p>Whoosh is a fast, featureful full-text indexing and searching library implemented in pure Python. Programmers can use it to easily add search functionality to their applications and websites. Every part of how Whoosh works can be extended or replaced to meet your needs exactly.</p>\n\n<p>Some of Whoosh\u2019s features include:</p>\n\n<ul>\n<li>Pythonic API.</li>\n<li>Pure-Python. No compilation or binary packages needed, no mysterious crashes.</li>\n<li>Fielded indexing and search.</li>\n<li>Fast indexing and retrieval \u2013 faster than any other pure-Python, scoring, full-text search solution I know of.</li>\n<li>Pluggable scoring algorithm (including BM25F), text analysis, storage, posting format, etc.</li>\n<li>Powerful query language.</li>\n<li>Pure Python spell-checker (as far as I know, the only one).</li>\n</ul>\n\n\n<h1>PAGE HAS PROBLEMS THAT MUST BE ADDRESSED. SOURCE BITBUCKET REPO 404S!</h1>",
    "site_name": "bitbucket.org (DECEASED)",
    "link_to_site": "https://bitbucket.org/mchaput/whoosh",
    "site_name_license": "na",
    "link_to_license": "na",
    "usage_notes": "<p>Full documentation is available on <a href=\"https://whoosh.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "programming_tools database",
    "versions": {
      "2.7.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9595f9f8d6bca947d803e5b942e9307f22b556706357225eea08285c38efa419"
          }
        ]
      }
    }
  },
  "libpng": {
    "image_name": "libpng",
    "alt_image_name": "libpng",
    "description": "<p>libpng is the official PNG reference library. It supports almost all PNG features, is extensible, and has been extensively tested for over 23 years. </p>\n",
    "site_name": "libpng.org",
    "link_to_site": "http://www.libpng.org/pub/png/libpng.html",
    "site_name_license": "OTHER",
    "link_to_license": "http://www.libpng.org/pub/png/src/libpng-LICENSE.txt",
    "usage_notes": "<p>The libpng manual is available on <a href=\"http://www.libpng.org/pub/png/libpng-manual.txt\">libpng.org</a>.</p>",
    "tags": "graphics",
    "versions": {
      "1.6.47": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6147b481f44624d7289c6a593f5e60633de4f6605e54df3ac78c7b2f5db25132"
          }
        ]
      }
    }
  },
  "sqlparse": {
    "image_name": "sqlparse",
    "alt_image_name": "sqlparse",
    "description": "<p>sqlparse is a non-validating SQL parser for Python. It provides support for parsing, splitting and formatting SQL statements.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/andialbrecht/sqlparse",
    "site_name_license": "BSD 3",
    "link_to_license": "https://github.com/andialbrecht/sqlparse/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/andialbrecht/sqlparse\">github.com</a>.</p>",
    "tags": "utility database",
    "versions": {
      "0.5.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "363b68a6444c60ba545c142bf552e4bd247db65f3ae68999ce2213ea0e20b369"
          }
        ]
      }
    }
  },
  "jupyter-server-terminals": {
    "image_name": "jupyter-server-terminals",
    "alt_image_name": "jupyter-server-terminals",
    "description": "<p>Jupyter Server Terminals is a Jupyter Server Extension providing support for terminals.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyter-server/jupyter_server_terminals",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyter-server/jupyter_server_terminals/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/jupyter-server/jupyter_server_terminals\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.4.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "4e272d166c2848e1df373588abfa9c31fc21925c28fec5a780db062fc0aada35"
          }
        ]
      }
    }
  },
  "requests-file": {
    "image_name": "requests-file",
    "alt_image_name": "requests-file",
    "description": "\n<p>Requests-File is a transport adapter for use with the Requests Python library to allow local filesystem access via <code>file://</code> URLs.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/dashea/requests-file",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/dashea/requests-file/blob/master/LICENSE",
    "usage_notes": "<p>Use the package as such:</p>\n<pre><code>\nimport requests<br>\nfrom requests_file import FileAdapter<br>\n<br>\ns = requests.Session()<br>\ns.mount('file://', FileAdapter())<br>\n<br>\nresp = s.get('file:///path/to/file')<br>\n</code></pre>",
    "tags": "programming_tools web",
    "versions": {
      "1.5.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "fb65796b527fecaa64db5467168beb58ddcd2a69e21b5b83933628510bd527b4"
          }
        ]
      }
    }
  },
  "jupyter-client": {
    "image_name": "jupyter-client",
    "alt_image_name": "jupyter-client",
    "description": "<p><code>jupyter_client</code> contains the reference implementation of the <a href=\"https://jupyter-client.readthedocs.io/en/latest/messaging.html\">Jupyter protocol</a>. It also provides client and kernel management APIs for working with kernels.</p>\n\n<p>It also provides the <code>jupyter kernelspec</code> entrypoint for installing kernelspecs for use with Jupyter frontends.</p>",
    "site_name": "jupyter.org",
    "link_to_site": "https://jupyter.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter/jupyter_client/blob/main/LICENSE",
    "usage_notes": "<p>The following new parameters are added to support ports range specification to replace the original random ports for new kernels.</p>\n<ul>\n <li>c.ConnectionFileMixin.max_kernels</li>\n <li>c.ConnectionFileMixin.starting_port</li>\n</ul>\n<p><b>c.ConnectionFileMixin.max_kernels</b> is to set the maximum number of kernels allowed to be used, it should be combined with c.ConnectionFileMixin.starting_port to provide a range of ports to be automatically selected. The default 0 means that there is no limitation.</p>\n<p><b>c.ConnectionFileMixin.starting_port</b> is to set the starting port for beginning of the port range for new kernels. The default value 0 means that the original random port will be picked up. The value greater than 0 means that it should be combined with c.ConnectionFileMixin.max_kernels to provide a range of ports to be automatically selected.</p>\n<hr>\n\n<p>You'll need Python and <code>pip</code> on the search path. Clone the Jupyter Client git repository to your computer, for example in <code>/my/project/jupyter_client</code></p>\n\n<pre><code>\ncd /my/projects/<br>\ngit clone git@github.com:jupyter/jupyter_client.git<br>\n</code></pre>\n\n<p>Now create an <a href=\"https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs\">editable install</a> and download the dependencies of code and test suite by executing:</p>\n\n<pre><code>\ncd /my/projects/jupyter_client/<br>\npip install -e \".[test]\"<br>\npytest<br>\n</code></pre>\n\n<p>The last command runs the test suite to verify the setup. During development, you can pass filenames to pytest, and it will execute only those tests.</p>\n\n<p>See <a href=\"https://jupyter-client.readthedocs.io/en/stable/\">readthedocs.io</a> for more information.</p>",
    "tags": "programming_tools",
    "versions": {
      "7.4.9.post3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "e6c3d7ba333af6716a518a3fde94840e3e0105f1c9c135262886aeecb4452215"
          }
        ]
      }
    }
  },
  "ansi2html": {
    "image_name": "ansi2html",
    "alt_image_name": "ansi2html",
    "description": "<p>Convert text with ANSI color codes to HTML or to LaTeX.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/pycontribs/ansi2html",
    "site_name_license": "LGPL-3.0",
    "link_to_license": "https://github.com/pycontribs/ansi2html/blob/main/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://ansi2html.readthedocs.io/\">readthedocs.io</a>.</p>",
    "tags": "web",
    "versions": {
      "1.9.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "322a6eb918793d99c78691d1947cf883d73372284006e83d297bfb5bb4e69c1d"
          }
        ]
      }
    }
  },
  "jdcal": {
    "image_name": "jdcal",
    "alt_image_name": "jdcal",
    "description": "\n<p>This module contains functions for converting between Julian dates and calendar dates.</p>",
    "site_name": "github.com/ibm-z-oss-oda/jdcal",
    "link_to_site": "https://github.com/ibm-z-oss-oda/jdcal",
    "site_name_license": "BSD",
    "link_to_license": "https://github.com/ibm-z-oss-oda/jdcal/blob/master/LICENSE.txt",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/phn/jdcal\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.4.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "f276d6a919d32485f74f4a14b8056e4c89f2bb6b14b6a301deb042632ccefa3f"
          }
        ]
      }
    }
  },
  "scikit-image": {
    "image_name": "scikit-image",
    "alt_image_name": "scikit-image",
    "description": "<p>scikit-image is a collection of algorithms for image processing.</p>",
    "site_name": "scikit-image.org",
    "link_to_site": "https://scikit-image.org/",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/scikit-image/scikit-image/blob/main/LICENSE.txt",
    "usage_notes": "<p>Example of use:</p>\n\n<pre><code>\nfrom skimage import data, io, filters<br>\n<br>\nimage = data.coins()<br>\n# ... or any other NumPy array!<br>\nedges = filters.sobel(image)<br>\nio.imshow(edges)<br>\nio.show()<br>\n</code></pre>\n\n<p>Please refer to <a href=\"https://scikit-image.org/docs/dev/auto_examples/\">scikit-image.org</a> for more examples.</p>",
    "tags": "graphics",
    "versions": {
      "0.18.3": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "7379ced75716a3e803c2e5154bc5e21b630acbac353bbd4f3f4429a365c78271"
          }
        ]
      }
    }
  },
  "matplotlib-inline": {
    "image_name": "matplotlib-inline",
    "alt_image_name": "matplotlib-inline",
    "description": "<p>This package provides a Matplotlib Inline Back-end for IPython and Jupyter.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/ipython/matplotlib-inline",
    "site_name_license": "here",
    "link_to_license": "https://github.com/ipython/matplotlib-inline/blob/master/LICENSE",
    "usage_notes": "<p>This package is included in IPython and can be used in a Jupyter Notebook:</p>\n\n<pre><code>\n%matplotlib inline<br>\n<br>\nimport matplotlib.pyplot as plt<br>\nimport numpy as np<br>\n<br>\nx = np.linspace(0, 3*np.pi, 500)<br>\nplt.plot(x, np.sin(x**2))<br>\nplt.title('A simple chirp');<br>\n</code></pre>\n\n<p>Please refer to <a href=\"https://github.com/ipython/matplotlib-inline/blob/master/README.md\">github</a> for more information.</p>",
    "tags": "math graphics utility",
    "versions": {
      "0.1.6": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "f1f41aab5328aa5aaea9b16d083b128102f8712542f819fe7e6a420ff581b311"
          }
        ]
      }
    }
  },
  "libcairo": {
    "image_name": "libcairo",
    "alt_image_name": "libcairo",
    "description": "<p>Cairo (stylized as cairo) is an open-source graphics library that provides a vector graphics-based, device-independent API for software developers. </p>\n",
    "site_name": "cairographics.org",
    "link_to_site": "https://www.cairographics.org/",
    "site_name_license": "LGPL-2.1",
    "link_to_license": "https://github.com/freedesktop/cairo/blob/master/COPYING-LGPL-2.1",
    "usage_notes": "<p>The cairo manual is available on <a href=\"https://www.cairographics.org/documentation/\">cairographics.org</a>.</p>",
    "tags": "graphics",
    "versions": {
      "1.17.6": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "62ac5c5670d23236a99837be8dd4741f8bdccacc469acd280492b54a811ebb3c"
          }
        ]
      }
    }
  },
  "jupyterlab-widgets": {
    "image_name": "jupyterlab-widgets",
    "alt_image_name": "jupyterlab-widgets",
    "description": "\n<p>A JupyterLab 3.0 extension for Jupyter/IPython widgets.</p>\n\n<p>Notebooks come alive when interactive widgets are used. Users gain control of their data and can visualize changes in the data.</p>\n\n<p>Learning becomes an immersive, fun experience. Researchers can easily see how changing inputs to a model impact the results. We hope you will add ipywidgets to your notebooks, and we're here to help you get started.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/jupyter-widgets/ipywidgets",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter-widgets/ipywidgets/blob/master/LICENSE",
    "usage_notes": "<p>Github hosts a <a href=\"https://github.com/jupyter-widgets/ipywidgets/blob/master/docs/source/examples/Index.ipynb\"> demonstration notebook</a> alongside other documentation for this image.</p>",
    "tags": "web graphics programming_tools",
    "versions": {
      "3.0.7": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9801104084d7fe13b231b2daba8636845fa79f36fdec4115964859cce1dd3bac"
          }
        ]
      }
    }
  },
  "fontconfig": {
    "image_name": "fontconfig",
    "alt_image_name": "fontconfig",
    "description": "<p>Fontconfig is a library for configuring and customizing font access. </p>\n\n<p>Fontconfig can: </p>\n\n<ul>\n<li>discover new fonts when installed automatically, removing a common source of configuration problems. </li>\n<li>perform font name substitution, so that appropriate alternative fonts can be selected if fonts are missing. </li>\n<li>identify the set of fonts required to completely cover a set of languages. </li>\n<li>have GUI configuration tools built as it uses an XML-based configuration file (though with autodiscovery, we believe this need is minimized). </li>\n<li>efficiently and quickly find the fonts you need among the set of fonts you have installed, even if you have installed thousands of fonts, while minimzing memory usage. </li>\n<li>be used in concert with the X Render Extension and <a href=\"https://www.freedesktop.org/wiki/Software/FreeType/\">FreeType</a> to implement high quality, anti-aliased and subpixel rendered text on a display. </li>\n</ul>\n\n<p>Fontconfig does not: </p>\n\n<ul>\n<li>render the fonts themselves (this is left to FreeType or other rendering mechanisms) </li>\n<li>depend on the X Window System in any fashion, so that printer only applications do not have such dependencies </li>\n</ul>\n",
    "site_name": "freedesktop.org",
    "link_to_site": "https://www.freedesktop.org/wiki/Software/fontconfig/",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/freedesktop/fontconfig/blob/master/COPYING",
    "usage_notes": "<p>Please refer to <a href=\"https://www.freedesktop.org/software/fontconfig/fontconfig-user.html\">freedesktop.org</a> for complete documentation.</p>",
    "tags": "graphics",
    "versions": {
      "2.14.1.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "4b9c480fc48f9d3c3736e22db6e5e41ee0bf839a3d21528bbfc99ed2c2eca921"
          }
        ]
      }
    }
  },
  "graphviz": {
    "image_name": "graphviz",
    "alt_image_name": "graphviz",
    "description": "<p>This package facilitates the creation and rendering of graph descriptions in the <a href=\"https://www.graphviz.org/doc/info/lang.html\">DOT</a> language of the <a href=\"https://www.graphviz.org/>Graphviz</a> graph drawing software from Python.</p>\n\n<p>Create a graph object, assemble the graph by adding nodes and edges, and retrieve its DOT source code string. Save the source code to a file and render it with the Graphviz installation of your system.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/xflr6/graphviz",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/xflr6/graphviz/blob/master/LICENSE.txt",
    "usage_notes": "<p>Create a graph object:</p>\n<pre><code>\n&gt;&gt;&gt; import graphviz  # doctest: +NO_EXE<br>\n&gt;&gt;&gt; dot = graphviz.Digraph(comment='The Round Table')<br>\n&gt;&gt;&gt; dot  #doctest: +ELLIPSIS<br>\n&lt;graphviz.graphs.Digraph object at 0x...&gt;<br>\n</code></pre>\n<p>Add nodes and edges:</p>\n<pre><code>\n&gt;&gt;&gt; dot.node('A', 'King Arthur')  # doctest: +NO_EXE<br>\n&gt;&gt;&gt; dot.node('B', 'Sir Bedevere the Wise')<br>\n&gt;&gt;&gt; dot.node('L', 'Sir Lancelot the Brave')<br>\n<br>\n&gt;&gt;&gt; dot.edges(['AB', 'AL'])<br>\n&gt;&gt;&gt; dot.edge('B', 'L', constraint='false')<br>\n</code></pre>\n<p>Check the generated source code:</p>\n<pre><code>\n&gt;&gt;&gt; print(dot.source)  # doctest: +NORMALIZE_WHITESPACE +NO_EXE<br>\n// The Round Table<br>\ndigraph {<br>\n    A [label=\"King Arthur\"]<br>\n    B [label=\"Sir Bedevere the Wise\"]<br>\n    L [label=\"Sir Lancelot the Brave\"]<br>\n    A -&gt; B<br>\n    A -&gt; L<br>\n    B -&gt; L [constraint=false]<br>\n}<br>\n</code></pre>\n<p>Save and render the source code:</p>\n<pre><code>\n&gt;&gt;&gt; doctest_mark_exe()<br>\n<br>\n&gt;&gt;&gt; dot.render('doctest-output/round-table.gv').replace('\\\\', '/')<br>\n'doctest-output/round-table.gv.pdf'<br>\n</code></pre>\n<p>Save and render and view the result:</p>\n<pre><code>\n&gt;&gt;&gt; doctest_mark_exe()<br>\n<br>\n&gt;&gt;&gt; dot.render('doctest-output/round-table.gv', view=True)  # doctest: +SKIP<br>\n'doctest-output/round-table.gv.pdf'<br>\n</code></pre>\n\n<p>See <a href=\"https://graphviz.readthedocs.io/en/stable/\">readthedocs.io</a> for further usage instructions.</p>",
    "tags": "graphics",
    "versions": {
      "0.20.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "2214941367e2a4a69b1555c227134bb9319af5d0c7c2001c258286126ccb67b2"
          }
        ]
      }
    }
  },
  "websocket-client": {
    "image_name": "websocket-client",
    "alt_image_name": "websocket-client",
    "description": "<p>websocket-client is a WebSocket client for Python.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/websocket-client/websocket-client",
    "site_name_license": "Apache-2.0",
    "link_to_license": "https://github.com/websocket-client/websocket-client/blob/master/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://websocket-client.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "utility web",
    "versions": {
      "1.7.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "1cf1c0d54a1b5b344b341b0a8a4ae174baf699da573f0c173962b5f3f065152d"
          }
        ]
      }
    }
  },
  "jupyterlab-pygments": {
    "image_name": "jupyterlab-pygments",
    "alt_image_name": "jupyterlab-pygments",
    "description": "\n<p>This package contains a syntax coloring theme for <a href=\"http://pygments.org/\">pygments</a> making use of the JupyterLab CSS variables.</p>\n\n<p>The goal is to enable the use of JupyterLab's themes with pygments-generated HTML.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/jupyterlab/jupyterlab_pygments",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyterlab/jupyterlab_pygments/blob/main/LICENSE",
    "usage_notes": "<p><a href=\"https://github.com/jupyterlab/jupyterlab_pygments/blob/main/README.md\">Github</a> hosts a screencast showing how to make use of this package along with other notes.</p>",
    "tags": "web programming_tools",
    "versions": {
      "0.2.2.post5": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "664aaf7257b8d73c899c1c0880655334052fe7c3d36825bd253196a32f8fd86d"
          }
        ]
      }
    }
  },
  "pymongo": {
    "image_name": "pymongo",
    "alt_image_name": "pymongo",
    "description": "<p>The PyMongo distribution contains tools for interacting with MongoDB database from Python. </p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/mongodb/mongo-python-driver",
    "site_name_license": "Apache 2.0",
    "link_to_license": "https://github.com/mongodb/mongo-python-driver#Apache-2.0-1-ov-file",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/mongodb/mongo-python-driver\">github.com</a>.</p>",
    "tags": "web",
    "versions": {
      "4.12.1": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "6b43757ae1e27399a1809c30ecfbbe30144e7eeb21216b133e7e28a96c910b7a"
          },
          {
            "py_version": "cp312",
            "sha256": "6bff8ba6a2f4e2f83356533c25fbccaa1aec960bbc6446cf15383878db14877b"
          },
          {
            "py_version": "cp313",
            "sha256": "4c571c702ee868b21a04c18d6c225239cd7847dc6568d54d56aff1992f7227d9"
          }
        ]
      }
    }
  },
  "pure-eval": {
    "image_name": "pure-eval",
    "alt_image_name": "pure-eval",
    "description": "<p>This is a Python package that lets you safely evaluate certain AST nodes without triggering arbitrary code that may have unwanted side effects.</p>\n",
    "site_name": "https://github.com/ibm-z-oss-oda/pure_eval",
    "link_to_site": "https://github.com/ibm-z-oss-oda/pure_eval",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/pure_eval/blob/master/LICENSE.txt",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/alexmojaki/pure_eval\">github.com</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "0.2.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "01eaab343580944bc56080ebe0a674b39ec44a945e6d09ba7db3cb8cec289350"
          }
        ]
      }
    }
  },
  "toree": {
    "image_name": "toree",
    "alt_image_name": "toree",
    "description": "<p>Apache Toree is a kernel for the Jupyter Notebook platform providing interactive access to Apache Spark. It has been developed using the IPython messaging protocol and 0MQ, and despite the protocol\u2019s name, Apache Toree currently exposes the Spark programming model in Scala, Python and R languages.</p>",
    "site_name": "toree.apache.org",
    "link_to_site": "https://toree.apache.org/",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/apache/incubator-toree/blob/master/LICENSE",
    "usage_notes": "<p>Documentation should be referenced at <a href=\"https://toree.apache.org/docs/current/user/quick-start/\">toree.apache.org</a>.</p>",
    "tags": "programming_tools web",
    "versions": {
      "0.5.0.post2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6424276b8ebf4b681e0c15005cd6a50382345bc4bce28d08332c5dc3696cfbb7"
          }
        ]
      }
    }
  },
  "bcrypt": {
    "image_name": "bcrypt",
    "alt_image_name": "bcrypt",
    "description": "<p>Modern(-ish) password hashing for your software and your servers.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/pyca/bcrypt",
    "site_name_license": "Apache-2.0",
    "link_to_license": "https://github.com/pyca/bcrypt/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/pyca/bcrypt\">github.com</a>.</p>",
    "tags": "security",
    "versions": {
      "3.2.1": {
        "dist": [
          {
            "py_version": "cp312",
            "sha256": "8dcf044c30df7bcfd6ea10cc50b0fa33cf5e991b867e7179c7163c7cfe4f2ddc"
          },
          {
            "py_version": "cp311",
            "sha256": "a6db818852b0de0a923f8f8961c6e5e62863cd0f2c8709a2718518b2442fb49e"
          },
          {
            "py_version": "cp313",
            "sha256": "8a5e8ef6250d4d0989df04feb2e3f5810f2166563b0dbce7700dc5242d8f6a70"
          }
        ]
      }
    }
  },
  "zict": {
    "image_name": "zict",
    "alt_image_name": "zict",
    "description": "<p>Mutable Mapping interfaces. This dictionary / mutable mapping interface is powerful and multi-faceted. </p>\n<ul>\n\n    <li>We store data in different locations such as in-memory, on disk, in archive files, etc..</li>\n    <li>We manage old data with different policies like LRU, random eviction, etc..</li>\n    <li>We might encode or transform data as it arrives or departs the dictionary through compression, encoding, etc..</li>\n</ul>\n<p>To this end we build abstract <code>MutableMapping</code> classes that consume and build on other <code>MutableMappings</code>. We can compose several of these with each other to form intuitive interfaces over complex storage systems policies.</p>",
    "site_name": "project site",
    "link_to_site": "https://zict.readthedocs.io/en/latest/",
    "site_name_license": "clown_test_don't_see_this",
    "link_to_license": "https://github.com/dask/zict/blob/main/LICENSE.txt",
    "usage_notes": "<p>Here's an exampe of usage:</p>\n\n<p>In this example we create an LRU dictionary backed by pickle-encoded, zlib-compressed, directory of files.</p>\n<pre>\n<code>\nimport pickle<br>\nimport zlib<br>\n<br>\nfrom zict import File, Func, LRU<br>\n<br>\na = File('myfile/', mode='a')<br>\nb = Func(zlib.compress, zlib.decompress, a)<br>\nc = Func(pickle.dumps, pickle.loads, b)<br>\nd = LRU(100, c)<br>\n<br>\n>>> d['x'] = [1, 2, 3]<br>\n>>> d['x']<br>\n[1, 2, 3]<br>\n</code></pre>\n\n<p>Further examples and all documentation is available on <a href=\"https://zict.readthedocs.io/en/latest/\">readthedocs.io</a></p>",
    "tags": "programming_tools",
    "versions": {
      "2.2.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "3f2551d3077804de839d4e131142a56e116c6a1341b0197bbccdd6b0f1c57ecc"
          }
        ]
      }
    }
  },
  "mako": {
    "image_name": "mako",
    "alt_image_name": "mako",
    "description": "<p>Mako is a template library written in Python. It provides a familiar, non-XML syntax which compiles into Python modules for maximum performance. </p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/sqlalchemy/mako",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/sqlalchemy/mako/blob/main/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/sqlalchemy/mako\">github.com</a>.</p>",
    "tags": "languages",
    "versions": {
      "1.2.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "d19aa9d2d020996a393840e1862527f22cd0f718da11a8977811c2eb18a5e12b"
          }
        ]
      }
    }
  },
  "aniso8601": {
    "image_name": "aniso8601",
    "alt_image_name": "aniso8601",
    "description": "<p>\"Another ISO 8601 parser for Python\"</p>\n<p>This is a Python package for parsing the ISO 8601 Date/Time format. ISO 8601 is an international standard for formatting date/time data, maintained by the International Organization for Standardization.</p>\n<p>Features of this package include:</p>\n<ul>\n<li>Pure Python implementation</li>\n<li>Logical behavior</li>\n<li>UTC offset represented as fixed-offset tzinfo</li>\n<li>Parser separate from representation, allowing parsing to different datetime representations</li>\n<li>No regular expressions</li>\n</ul>\n",
    "site_name": "bitbucket.org",
    "link_to_site": "https://bitbucket.org/nielsenb/aniso8601/src/master/",
    "site_name_license": "BSD3",
    "link_to_license": "https://bitbucket.org/nielsenb/aniso8601/src/master/LICENSE",
    "usage_notes": "<div class=\"section\" id=\"parsing-datetimes\">\n<h2>Parsing datetimes</h2>\n<p><em>Consider</em> <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat\">datetime.datetime.fromisoformat</a> <em>for basic ISO 8601 datetime parsing</em></p>\n<p>To parse a typical ISO 8601 datetime string:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; aniso8601.parse_datetime('1977-06-10T12:00:00Z')<br>\ndatetime.datetime(1977, 6, 10, 12, 0, tzinfo=+0:00:00 UTC)<br>\n</pre>\n<p>Alternative delimiters can be specified, for example, a space:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_datetime('1977-06-10 12:00:00Z', delimiter=' ')<br>\ndatetime.datetime(1977, 6, 10, 12, 0, tzinfo=+0:00:00 UTC)<br>\n</pre>\n<p>UTC offsets are supported:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_datetime('1979-06-05T08:00:00-08:00')<br>\ndatetime.datetime(1979, 6, 5, 8, 0, tzinfo=-8:00:00 UTC)<br>\n</pre>\n<p>If a UTC offset is not specified, the returned datetime will be naive:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_datetime('1983-01-22T08:00:00')<br>\ndatetime.datetime(1983, 1, 22, 8, 0)<br>\n</pre>\n<p>Leap seconds are currently not supported and attempting to parse one raises a <code>LeapSecondError</code>:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_datetime('2018-03-06T23:59:60')<br>\nTraceback (most recent call last):<br>\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>\n  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/time.py&quot;, line 196, in parse_datetime<br>\n    return builder.build_datetime(datepart, timepart)<br>\n  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/python.py&quot;, line 237, in build_datetime<br>\n    cls._build_object(time))<br>\n  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/__init__.py&quot;, line 336, in _build_object<br>\n    return cls.build_time(hh=parsetuple.hh, mm=parsetuple.mm,<br>\n  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/python.py&quot;, line 191, in build_time<br>\n    hh, mm, ss, tz = cls.range_check_time(hh, mm, ss, tz)<br>\n  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/__init__.py&quot;, line 266, in range_check_time<br>\n    raise LeapSecondError('Leap seconds are not supported.')<br>\naniso8601.exceptions.LeapSecondError: Leap seconds are not supported.<br>\n</pre>\n<p>To get the resolution of an ISO 8601 datetime string:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.get_datetime_resolution('1977-06-10T12:00:00Z') == aniso8601.resolution.TimeResolution.Seconds<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_datetime_resolution('1977-06-10T12:00') == aniso8601.resolution.TimeResolution.Minutes<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_datetime_resolution('1977-06-10T12') == aniso8601.resolution.TimeResolution.Hours<br>\nTrue<br>\n</pre>\n<p>Note that datetime resolutions map to <code>TimeResolution</code> as a valid datetime must have at least one time member so the resolution mapping is equivalent.</p>\n</div>\n<div class=\"section\" id=\"parsing-dates\">\n<h2>Parsing dates</h2>\n<p><em>Consider</em> <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.date.fromisoformat\">datetime.date.fromisoformat</a> <em>for basic ISO 8601 date parsing</em></p>\n<p>To parse a date represented in an ISO 8601 string:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; aniso8601.parse_date('1984-04-23')<br>\ndatetime.date(1984, 4, 23)<br>\n</pre>\n<p>Basic format is supported as well:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_date('19840423')<br>\ndatetime.date(1984, 4, 23)<br>\n</pre>\n<p>To parse a date using the ISO 8601 week date format:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_date('1986-W38-1')<br>\ndatetime.date(1986, 9, 15)<br>\n</pre>\n<p>To parse an ISO 8601 ordinal date:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_date('1988-132')<br>\ndatetime.date(1988, 5, 11)<br>\n</pre>\n<p>To get the resolution of an ISO 8601 date string:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.get_date_resolution('1981-04-05') == aniso8601.resolution.DateResolution.Day<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_date_resolution('1981-04') == aniso8601.resolution.DateResolution.Month<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_date_resolution('1981') == aniso8601.resolution.DateResolution.Year<br>\nTrue<br>\n</pre>\n</div>\n<div class=\"section\" id=\"parsing-times\">\n<h2>Parsing times</h2>\n<p><em>Consider</em> <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.time.fromisoformat\">datetime.time.fromisoformat</a> <em>for basic ISO 8601 time parsing</em></p>\n<p>To parse a time formatted as an ISO 8601 string:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; aniso8601.parse_time('11:31:14')<br>\ndatetime.time(11, 31, 14)<br>\n</pre>\n<p>As with all of the above, basic format is supported:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_time('113114')<br>\ndatetime.time(11, 31, 14)<br>\n</pre>\n<p>A UTC offset can be specified for times:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_time('17:18:19-02:30')<br>\ndatetime.time(17, 18, 19, tzinfo=-2:30:00 UTC)<br>\n&gt;&gt;&gt; aniso8601.parse_time('171819Z')<br>\ndatetime.time(17, 18, 19, tzinfo=+0:00:00 UTC)<br>\n</pre>\n<p>Reduced accuracy is supported:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_time('21:42')<br>\ndatetime.time(21, 42)<br>\n&gt;&gt;&gt; aniso8601.parse_time('22')<br>\ndatetime.time(22, 0)<br>\n</pre>\n<p>A decimal fraction is always allowed on the lowest order element of an ISO 8601 formatted time:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_time('22:33.5')<br>\ndatetime.time(22, 33, 30)<br>\n&gt;&gt;&gt; aniso8601.parse_time('23.75')<br>\ndatetime.time(23, 45)<br>\n</pre>\n<p>The decimal fraction can be specified with a comma instead of a full-stop:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_time('22:33,5')<br>\ndatetime.time(22, 33, 30)<br>\n&gt;&gt;&gt; aniso8601.parse_time('23,75')<br>\ndatetime.time(23, 45)<br>\n</pre>\n<p>Leap seconds are currently not supported and attempting to parse one raises a <code>LeapSecondError</code>:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_time('23:59:60')<br>\nTraceback (most recent call last):<br>\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>\n  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/time.py&quot;, line 174, in parse_time<br>\n    return builder.build_time(hh=hourstr, mm=minutestr, ss=secondstr, tz=tz)<br>\n  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/python.py&quot;, line 191, in build_time<br>\n    hh, mm, ss, tz = cls.range_check_time(hh, mm, ss, tz)<br>\n  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/__init__.py&quot;, line 266, in range_check_time<br>\n    raise LeapSecondError('Leap seconds are not supported.')<br>\naniso8601.exceptions.LeapSecondError: Leap seconds are not supported.<br>\n</pre>\n<p>To get the resolution of an ISO 8601 time string:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.get_time_resolution('11:31:14') == aniso8601.resolution.TimeResolution.Seconds<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_time_resolution('11:31') == aniso8601.resolution.TimeResolution.Minutes<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_time_resolution('11') == aniso8601.resolution.TimeResolution.Hours<br>\nTrue<br>\n</pre>\n</div>\n<div class=\"section\" id=\"parsing-durations\">\n<h2>Parsing durations</h2>\n<p>To parse a duration formatted as an ISO 8601 string:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; aniso8601.parse_duration('P1Y2M3DT4H54M6S')<br>\ndatetime.timedelta(428, 17646)<br>\n</pre>\n<p>Reduced accuracy is supported:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_duration('P1Y')<br>\ndatetime.timedelta(365)<br>\n</pre>\n<p>A decimal fraction is allowed on the lowest order element:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_duration('P1YT3.5M')<br>\ndatetime.timedelta(365, 210)<br>\n</pre>\n<p>The decimal fraction can be specified with a comma instead of a full-stop:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_duration('P1YT3,5M')<br>\ndatetime.timedelta(365, 210)<br>\n</pre>\n<p>Parsing a duration from a combined date and time is supported as well:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_duration('P0001-01-02T01:30:05')<br>\ndatetime.timedelta(397, 5405)<br>\n</pre>\n<p>To get the resolution of an ISO 8601 duration string:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M3DT4H54M6S') == aniso8601.resolution.DurationResolution.Seconds<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M3DT4H54M') == aniso8601.resolution.DurationResolution.Minutes<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M3DT4H') == aniso8601.resolution.DurationResolution.Hours<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M3D') == aniso8601.resolution.DurationResolution.Days<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y2M') == aniso8601.resolution.DurationResolution.Months<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_duration_resolution('P1Y') == aniso8601.resolution.DurationResolution.Years<br>\nTrue<br>\n</pre>\n<p>The default <code>PythonTimeBuilder</code> assumes years are 365 days, and months are 30 days. Where calendar level accuracy is required, a <a class=\"reference external\" href=\"https://bitbucket.org/nielsenb/relativetimebuilder\">RelativeTimeBuilder</a> can be used, see also <a class=\"reference external\" href=\"/BUILDERS.rst\">Builders</a>.</p>\n</div>\n<div class=\"section\" id=\"parsing-intervals\">\n<h2>Parsing intervals</h2>\n<p>To parse an interval specified by a start and end:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00/2008-05-11T15:30:00')<br>\n(datetime.datetime(2007, 3, 1, 13, 0), datetime.datetime(2008, 5, 11, 15, 30))<br>\n</pre>\n<p>Intervals specified by a start time and a duration are supported:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00Z/P1Y2M10DT2H30M')<br>\n(datetime.datetime(2007, 3, 1, 13, 0, tzinfo=+0:00:00 UTC), datetime.datetime(2008, 5, 9, 15, 30, tzinfo=+0:00:00 UTC))<br>\n</pre>\n<p>A duration can also be specified by a duration and end time:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_interval('P1M/1981-04-05')<br>\n(datetime.date(1981, 4, 5), datetime.date(1981, 3, 6))<br>\n</pre>\n<p>Notice that the result of the above parse is not in order from earliest to latest. If sorted intervals are required, simply use the <code>sorted</code> keyword as shown below:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; sorted(aniso8601.parse_interval('P1M/1981-04-05'))<br>\n[datetime.date(1981, 3, 6), datetime.date(1981, 4, 5)]<br>\n</pre>\n<p>The end of an interval is returned as a datetime when required to maintain the resolution specified by a duration, even if the duration start is given as a date:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_interval('2014-11-12/PT4H54M6.5S')<br>\n(datetime.date(2014, 11, 12), datetime.datetime(2014, 11, 12, 4, 54, 6, 500000))<br>\n&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01/P1.5D')<br>\n(datetime.date(2007, 3, 1), datetime.datetime(2007, 3, 2, 12, 0))<br>\n</pre>\n<p>Concise representations are supported:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_interval('2020-01-01/02')<br>\n(datetime.date(2020, 1, 1), datetime.date(2020, 1, 2))<br>\n&gt;&gt;&gt; aniso8601.parse_interval('2007-12-14T13:30/15:30')<br>\n(datetime.datetime(2007, 12, 14, 13, 30), datetime.datetime(2007, 12, 14, 15, 30))<br>\n&gt;&gt;&gt; aniso8601.parse_interval('2008-02-15/03-14')<br>\n(datetime.date(2008, 2, 15), datetime.date(2008, 3, 14))<br>\n&gt;&gt;&gt; aniso8601.parse_interval('2007-11-13T09:00/15T17:00')<br>\n(datetime.datetime(2007, 11, 13, 9, 0), datetime.datetime(2007, 11, 15, 17, 0))<br>\n</pre>\n<p>Repeating intervals are supported as well, and return a <a class=\"reference external\" href=\"https://wiki.python.org/moin/Generators\">generator</a>:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_repeating_interval('R3/1981-04-05/P1D')<br>\n&lt;generator object _date_generator at 0x7fd800d3b320&gt;<br>\n&gt;&gt;&gt; list(aniso8601.parse_repeating_interval('R3/1981-04-05/P1D'))<br>\n[datetime.date(1981, 4, 5), datetime.date(1981, 4, 6), datetime.date(1981, 4, 7)]<br>\n</pre>\n<p>Repeating intervals are allowed to go in the reverse direction:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; list(aniso8601.parse_repeating_interval('R2/PT1H2M/1980-03-05T01:01:00'))<br>\n[datetime.datetime(1980, 3, 5, 1, 1), datetime.datetime(1980, 3, 4, 23, 59)]<br>\n</pre>\n<p>Unbounded intervals are also allowed (Python 2):</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; result = aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00')<br>\n&gt;&gt;&gt; result.next()<br>\ndatetime.datetime(1980, 3, 5, 1, 1)<br>\n&gt;&gt;&gt; result.next()<br>\ndatetime.datetime(1980, 3, 4, 23, 59)<br>\n</pre>\n<p>or for Python 3:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; result = aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00')<br>\n&gt;&gt;&gt; next(result)<br>\ndatetime.datetime(1980, 3, 5, 1, 1)<br>\n&gt;&gt;&gt; next(result)<br>\ndatetime.datetime(1980, 3, 4, 23, 59)<br>\n</pre>\n<p>Note that you should never try to convert a generator produced by an unbounded interval to a list:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; list(aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00'))<br>\nTraceback (most recent call last):<br>\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;<br>\n  File &quot;/home/nielsenb/Jetfuse/aniso8601/aniso8601/aniso8601/builders/python.py&quot;, line 560, in _date_generator_unbounded<br>\n    currentdate += timedelta<br>\nOverflowError: date value out of range<br>\n</pre>\n<p>To get the resolution of an ISO 8601 interval string:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03-01T13:00:00/2008-05-11T15:30:00') == aniso8601.resolution.IntervalResolution.Seconds<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03-01T13:00/2008-05-11T15:30') == aniso8601.resolution.IntervalResolution.Minutes<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03-01T13/2008-05-11T15') == aniso8601.resolution.IntervalResolution.Hours<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03-01/2008-05-11') == aniso8601.resolution.IntervalResolution.Day<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_interval_resolution('2007-03/P1Y') == aniso8601.resolution.IntervalResolution.Month<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_interval_resolution('2007/P1Y') == aniso8601.resolution.IntervalResolution.Year<br>\nTrue<br>\n</pre>\n<p>And for repeating ISO 8601 interval strings:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.get_repeating_interval_resolution('R3/1981-04-05/P1D') == aniso8601.resolution.IntervalResolution.Day<br>\nTrue<br>\n&gt;&gt;&gt; aniso8601.get_repeating_interval_resolution('R/PT1H2M/1980-03-05T01:01:00') == aniso8601.resolution.IntervalResolution.Seconds<br>\nTrue<br>\n</pre>\n</div>\n<div class=\"section\" id=\"builders\">\n<h1>Builders</h1>\n<p>Builders can be used to change the output format of a parse operation. All parse functions have a <code>builder</code> keyword argument which accepts a builder class.</p>\n<p>Two builders are included. The <code>PythonTimeBuilder</code> (the default) in the <code>aniso8601.builders.python</code> module, and the <code>TupleBuilder</code> which returns the parse result as a corresponding named tuple and is located in the <code>aniso8601.builders</code> module.</p>\n<p>Information on writing a builder can be found in <a class=\"reference external\" href=\"/BUILDERS.rst\">BUILDERS</a>.</p>\n<p>The following builders are available as separate projects:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://bitbucket.org/nielsenb/relativetimebuilder\">RelativeTimeBuilder</a> supports parsing to <a class=\"reference external\" href=\"https://dateutil.readthedocs.io/en/stable/relativedelta.html\">datetutil relativedelta types</a> for calendar level accuracy</li>\n<li><a class=\"reference external\" href=\"https://bitbucket.org/nielsenb/attotimebuilder\">AttoTimeBuilder</a> supports parsing directly to <a class=\"reference external\" href=\"https://bitbucket.org/nielsenb/attotime\">attotime attodatetime and attotimedelta types</a> which support sub-nanosecond precision</li>\n<li><a class=\"reference external\" href=\"https://bitbucket.org/nielsenb/numpytimebuilder\">NumPyTimeBuilder</a> supports parsing directly to <a class=\"reference external\" href=\"https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html\">NumPy datetime64 and timedelta64 types</a></li>\n</ul>\n<div class=\"section\" id=\"tuplebuilder\">\n<h2>TupleBuilder</h2>\n<p>The <code>TupleBuilder</code> returns parse results as <a class=\"reference external\" href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\">named tuples</a>. It is located in the <code>aniso8601.builders</code> module.</p>\n<div class=\"section\" id=\"datetimes\">\n<h3>Datetimes</h3>\n<p>Parsing a datetime returns a <code>DatetimeTuple</code> containing <code>Date</code> and <code>Time</code> tuples . The date tuple contains the following parse components: <code>YYYY</code>, <code>MM</code>, <code>DD</code>, <code>Www</code>, <code>D</code>, <code>DDD</code>. The time tuple contains the following parse components <code>hh</code>, <code>mm</code>, <code>ss</code>, <code>tz</code>, where <code>tz</code> itself is a tuple with the following components <code>negative</code>, <code>Z</code>, <code>hh</code>, <code>mm</code>, <code>name</code> with <code>negative</code> and <code>Z</code> being booleans:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>\n&gt;&gt;&gt; aniso8601.parse_datetime('1977-06-10T12:00:00', builder=TupleBuilder)<br>\nDatetime(date=Date(YYYY='1977', MM='06', DD='10', Www=None, D=None, DDD=None), time=Time(hh='12', mm='00', ss='00', tz=None))<br>\n&gt;&gt;&gt; aniso8601.parse_datetime('1979-06-05T08:00:00-08:00', builder=TupleBuilder)<br>\nDatetime(date=Date(YYYY='1979', MM='06', DD='05', Www=None, D=None, DDD=None), time=Time(hh='08', mm='00', ss='00', tz=Timezone(negative=True, Z=None, hh='08', mm='00', name='-08:00')))<br>\n</pre>\n</div>\n<div class=\"section\" id=\"dates\">\n<h3>Dates</h3>\n<p>Parsing a date returns a <code>DateTuple</code> containing the following parse components: <code>YYYY</code>, <code>MM</code>, <code>DD</code>, <code>Www</code>, <code>D</code>, <code>DDD</code>:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>\n&gt;&gt;&gt; aniso8601.parse_date('1984-04-23', builder=TupleBuilder)<br>\nDate(YYYY='1984', MM='04', DD='23', Www=None, D=None, DDD=None)<br>\n&gt;&gt;&gt; aniso8601.parse_date('1986-W38-1', builder=TupleBuilder)<br>\nDate(YYYY='1986', MM=None, DD=None, Www='38', D='1', DDD=None)<br>\n&gt;&gt;&gt; aniso8601.parse_date('1988-132', builder=TupleBuilder)<br>\nDate(YYYY='1988', MM=None, DD=None, Www=None, D=None, DDD='132')<br>\n</pre>\n</div>\n<div class=\"section\" id=\"times\">\n<h3>Times</h3>\n<p>Parsing a time returns a <code>TimeTuple</code> containing following parse components: <code>hh</code>, <code>mm</code>, <code>ss</code>, <code>tz</code>, where <code>tz</code> is a <code>TimezoneTuple</code> with the following components <code>negative</code>, <code>Z</code>, <code>hh</code>, <code>mm</code>, <code>name</code>, with <code>negative</code> and <code>Z</code> being booleans:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>\n&gt;&gt;&gt; aniso8601.parse_time('11:31:14', builder=TupleBuilder)<br>\nTime(hh='11', mm='31', ss='14', tz=None)<br>\n&gt;&gt;&gt; aniso8601.parse_time('171819Z', builder=TupleBuilder)<br>\nTime(hh='17', mm='18', ss='19', tz=Timezone(negative=False, Z=True, hh=None, mm=None, name='Z'))<br>\n&gt;&gt;&gt; aniso8601.parse_time('17:18:19-02:30', builder=TupleBuilder)<br>\nTime(hh='17', mm='18', ss='19', tz=Timezone(negative=True, Z=None, hh='02', mm='30', name='-02:30'))<br>\n</pre>\n</div>\n<div class=\"section\" id=\"durations\">\n<h3>Durations</h3>\n<p>Parsing a duration returns a <code>DurationTuple</code> containing the following parse components: <code>PnY</code>, <code>PnM</code>, <code>PnW</code>, <code>PnD</code>, <code>TnH</code>, <code>TnM</code>, <code>TnS</code>:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>\n&gt;&gt;&gt; aniso8601.parse_duration('P1Y2M3DT4H54M6S', builder=TupleBuilder)<br>\nDuration(PnY='1', PnM='2', PnW=None, PnD='3', TnH='4', TnM='54', TnS='6')<br>\n&gt;&gt;&gt; aniso8601.parse_duration('P7W', builder=TupleBuilder)<br>\nDuration(PnY=None, PnM=None, PnW='7', PnD=None, TnH=None, TnM=None, TnS=None)<br>\n</pre>\n</div>\n<div class=\"section\" id=\"intervals\">\n<h3>Intervals</h3>\n<p>Parsing an interval returns an <code>IntervalTuple</code> containing the following parse components: <code>start</code>, <code>end</code>, <code>duration</code>, <code>start</code> and <code>end</code> may both be datetime or date tuples, <code>duration</code> is a duration tuple:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; import aniso8601<br>\n&gt;&gt;&gt; from aniso8601.builders import TupleBuilder<br>\n&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00/2008-05-11T15:30:00', builder=TupleBuilder)<br>\nInterval(start=Datetime(date=Date(YYYY='2007', MM='03', DD='01', Www=None, D=None, DDD=None), time=Time(hh='13', mm='00', ss='00', tz=None)), end=Datetime(date=Date(YYYY='2008', MM='05', DD='11', Www=None, D=None, DDD=None), time=Time(hh='15', mm='30', ss='00', tz=None)), duration=None)<br>\n&gt;&gt;&gt; aniso8601.parse_interval('2007-03-01T13:00:00Z/P1Y2M10DT2H30M', builder=TupleBuilder)<br>\nInterval(start=Datetime(date=Date(YYYY='2007', MM='03', DD='01', Www=None, D=None, DDD=None), time=Time(hh='13', mm='00', ss='00', tz=Timezone(negative=False, Z=True, hh=None, mm=None, name='Z'))), end=None, duration=Duration(PnY='1', PnM='2', PnW=None, PnD='10', TnH='2', TnM='30', TnS=None))<br>\n&gt;&gt;&gt; aniso8601.parse_interval('P1M/1981-04-05', builder=TupleBuilder)<br>\nInterval(start=None, end=Date(YYYY='1981', MM='04', DD='05', Www=None, D=None, DDD=None), duration=Duration(PnY=None, PnM='1', PnW=None, PnD=None, TnH=None, TnM=None, TnS=None))<br>\n</pre>\n<p>A repeating interval returns a <code>RepeatingIntervalTuple</code> containing the following parse components: <code>R</code>, <code>Rnn</code>, <code>interval</code>, where <code>R</code> is a boolean, <code>True</code> for an unbounded interval, <code>False</code> otherwise.:</p>\n<pre class=\"literal-block\">\n&gt;&gt;&gt; aniso8601.parse_repeating_interval('R3/1981-04-05/P1D', builder=TupleBuilder)<br>\nRepeatingInterval(R=False, Rnn='3', interval=Interval(start=Date(YYYY='1981', MM='04', DD='05', Www=None, D=None, DDD=None), end=None, duration=Duration(PnY=None, PnM=None, PnW=None, PnD='1', TnH=None, TnM=None, TnS=None)))<br>\n&gt;&gt;&gt; aniso8601.parse_repeating_interval('R/PT1H2M/1980-03-05T01:01:00', builder=TupleBuilder)<br>\nRepeatingInterval(R=True, Rnn=None, interval=Interval(start=None, end=Datetime(date=Date(YYYY='1980', MM='03', DD='05', Www=None, D=None, DDD=None), time=Time(hh='01', mm='01', ss='00', tz=None)), duration=Duration(PnY=None, PnM=None, PnW=None, PnD=None, TnH='1', TnM='2', TnS=None)))<br>\n</pre>\n</div>\n</div>\n</div>",
    "tags": "utility",
    "versions": {
      "9.0.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "cf9e7fa3cf8f85ed2e99e1aaddff98c27a37c7b3d90c77074aa7415123f66c5a"
          }
        ]
      }
    }
  },
  "debugpy": {
    "image_name": "debugpy",
    "alt_image_name": "debugpy",
    "description": "<p>debugpy is an implementation of the Debug Adapter Protocol for Python.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/microsoft/debugpy/",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/microsoft/debugpy/blob/main/LICENSE",
    "usage_notes": "<p>To run a script file with debugging enabled, but without waiting for the client to attach (i.e. code starts executing immediately):</p>\n\n<pre><code>\n-m debugpy --listen localhost:5678 myfile.py<br>\n</code></pre>\n\n<p>To wait until the client attaches before running your code, use the <code>--wait-for-client</code> switch.</p>\n\n<pre><code>\n-m debugpy --listen localhost:5678 --wait-for-client myfile.py<br>\n</code></pre>\n\n<p>The hostname passed to <code>--listen</code> specifies the interface on which the debug adapter will be listening for connections from DAP clients. It can be omitted, with only the port number specified:</p>\n\n<pre><code>\n-m debugpy --listen 5678 ...<br>\n</code></pre>\n\n<p>in which case the default interface is 127.0.0.1.</p>\n\n<p>To be able to attach from another machine, make sure that the adapter is listening on a public interface - using <code>0.0.0.0</code> will make it listen on all available interfaces:</p>\n\n<pre><code>\n-m debugpy --listen 0.0.0.0:5678 myfile.py<br>\n</code></pre>\n\n<p>This should only be done on secure networks, since anyone who can connect to the specified port can then execute arbitrary code within the debugged process.</p>\n\n<p>To pass arguments to the script, just specify them after the filename. This works the same as with Python itself - everything up to the filename is processed by debugpy, but everything after that becomes <code>sys.argv</code> of the running process.</p>\n\n<p>To run a module, use the -m switch instead of filename:</p>\n\n<pre><code>\n-m debugpy --listen localhost:5678 -m mymodule<br>\n</code></pre>\n\n<p>See more documentation on <a href=\"https://github.com/microsoft/debugpy/blob/main/README.md\">github</a>.</p>",
    "tags": "utility web programming_tools",
    "versions": {
      "1.8.12.post0": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "5c450644e50068ec24a176a793059de7f0f09140202bc1885b06e38dc8968569"
          }
        ]
      }
    }
  },
  "nbformat": {
    "image_name": "nbformat",
    "alt_image_name": "nbformat",
    "description": "<p>The Jupyter Notebook format:</p>\n<p>This package contains the base implementation of the <a href=\"https://nbformat.readthedocs.org/en/latest/format_description.html\">Jupyter Notebook format</a>, and Python APIs for working with notebooks.</p>\n\n<p>There is also a JSON schema for notebook format versions >= 3.</p>\n",
    "site_name": "jupyter.org",
    "link_to_site": "https://jupyter.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter/nbformat/blob/main/COPYING.md",
    "usage_notes": "<p>Refer to <a href=\"https://nbformat.readthedocs.io/en/latest/\">readthedocs.io</a> for notes on the Jupyter Notebook Format.</p>",
    "tags": "utility",
    "versions": {
      "5.9.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "5565ff2d71481bd20e2e5dbc46d9d46d8a62692e87beb5ee8e49a6e3be2e2a46"
          }
        ]
      }
    }
  },
  "pyyaml": {
    "image_name": "pyyaml",
    "alt_image_name": "pyyaml",
    "description": "<p>YAML is a data serialization format designed for human readability and interaction with scripting languages. PyYAML is a YAML parser and emitter for Python.</p>\n\n<p>PyYAML features a complete YAML 1.1 parser, Unicode support, pickle support, capable extension API, and sensible error messages. PyYAML supports standard YAML tags and provides Python-specific tags that allow to represent an arbitrary Python object.</p>\n\n<p>PyYAML is applicable for a broad range of tasks from complex configuration files to object serialization and persistence.</p>\n",
    "site_name": "pyyaml.org",
    "link_to_site": "https://pyyaml.org/",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/yaml/pyyaml/blob/master/LICENSE",
    "usage_notes": "<p>The function <code>yaml.load</code> converts a YAML document to a Python object.</p>\n\n<pre><code>\n&gt;&gt;&gt; yaml.load(\"\"\"<br>\n... - Hesperiidae<br>\n... - Papilionidae<br>\n... - Apatelodidae<br>\n... - Epiplemidae<br>\n... \"\"\")<br>\n<br>\n...<br>\n<br>\n['Hesperiidae', 'Papilionidae', 'Apatelodidae', 'Epiplemidae']<br>\n</code></pre>\n\n<p>The counterpart <code>yaml.dump</code> function accepts a Python object and produces a YAML document.</p>\n\n<p>Complete documentation can be found on <a href=\"https://pyyaml.org/wiki/PyYAMLDocumentation\">pyyaml.org</a>.</p>",
    "tags": "programming_tools utility languages",
    "versions": {
      "6.0.1.post0": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "efff9fa9120a2654d9e8937dcfce92cb8e7c3b6977fe8527b314c10b6f7f2e23"
          }
        ]
      }
    }
  },
  "cairocffi": {
    "image_name": "cairocffi",
    "alt_image_name": "cairocffi",
    "description": "\n<p>cairocffi is a <a href=\"https://cffi.readthedocs.org/\">CFFI</a>-based drop-in replacement for <a href=\"https://pycairo.readthedocs.io/\">Pycairo</a>, a set of Python bindings and object-oriented API for <a href=\"http://cairographics.org/\">cairo</a>. Cairo is a 2D vector graphics library with support for multiple backends including image buffers, PNG, PostScript, PDF, and SVG file output.</p>\n\n<p>Additionally, the <code>cairocffi.pixbuf</code> module uses <a href=\"https://gitlab.gnome.org/GNOME/gdk-pixbuf\">GDK-PixBuf</a> to decode various image formats for use in cairo.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/Kozea/cairocffi",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/Kozea/cairocffi/blob/master/LICENSE",
    "usage_notes": "\n<p>Basic usage example:</p>\n<p>\nFor doing something useful with cairo, you need at least a surface and a context:<p>\n\n<pre><code>\nimport cairocffi as cairo<br>\n<br>\nsurface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 300, 200)<br>\ncontext = cairo.Context(surface)<br>\nwith context:<br>\n    context.set_source_rgb(1, 1, 1)  # White<br>\n    context.paint()<br>\n# Restore the default source which is black.<br>\ncontext.move_to(90, 140)<br>\ncontext.rotate(-0.5)<br>\ncontext.set_font_size(20)<br>\ncontext.show_text('Hi from cairo!')<br>\nsurface.write_to_png('example.png')<br>\n</code></pre>\n\n<p>The <code>Surface</code> represents the target. There are various types of surface for various output backends. The <code>Context</code> holds internal state and is used for drawing. We\u2019re only using solid colors here, but more complex <code>Pattern</code> types are also available.</p>\n\n<p>Further documentation is available on <a href=\"https://cairocffi.readthedocs.io/en/stable/\">readthedocs.io</a></p>",
    "tags": "graphics",
    "versions": {
      "1.3.0.post2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "b0f7a92a21c649d5f586c49babf7c8ad81770205941f1ba25857f497550fda95"
          }
        ]
      }
    }
  },
  "html5lib": {
    "image_name": "html5lib",
    "alt_image_name": "html5lib",
    "description": "<p>html5lib is a pure-python library for parsing HTML. It is designed to conform to the WHATWG HTML specification, as is implemented by all major web browsers.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/html5lib/html5lib-python",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/html5lib/html5lib-python/blob/master/LICENSE",
    "usage_notes": "<p>Simple usage follows this pattern:</p>\n<pre><code>\nimport html5lib<br>\nwith open(\"mydocument.html\", \"rb\") as f:<br>\n    document = html5lib.parse(f)<br>\n</code></pre>\n<p>or:</p>\n<pre><code>\nimport html5lib<br>\ndocument = html5lib.parse(\"<p>Hello World!\")<br>\n</code></pre>\n<p>By default, the <code>document</code> will be an <code>xml.etree</code> element instance. Whenever possible, html5lib chooses the accelerated <code>ElementTree</code> implementation (i.e. <code>xml.etree.cElementTree</code> on Python 2.x).</p>\n\n<p>Please see <a href=\"https://github.com/html5lib/html5lib-python/blob/master/README.rst\">github</a> for further usage details.</p>",
    "tags": "web",
    "versions": {
      "1.1.post3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "33a09ab07352d598dcb81531e9ba269b1ed6ce985eca79f59cdd2f2a9093f156"
          }
        ]
      }
    }
  },
  "nbclient": {
    "image_name": "nbclient",
    "alt_image_name": "nbclient",
    "description": "<p>NBClient lets you execute notebooks.</p>\n\n<p>A client library for programmatic notebook execution, NBClient is a tool for running Jupyter Notebooks in different execution contexts, including the command line.</p>",
    "site_name": "jupyter.org",
    "link_to_site": "https://jupyter.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter/nbclient/blob/main/LICENSE",
    "usage_notes": "<p>Let\u2019s start with a complete quick example, leaving detailed explanations aside for now.</p>\n\n<p>First we import nbformat and the <code>NotebookClient</code> class:</p>\n\n<pre><code>\nimport nbformat<br>\nfrom nbclient import NotebookClient<br>\n</code></pre>\n\n<p>Assuming that notebook_filename contains the path to a notebook, we can load it with:</p>\n\n<pre><code>\nnb = nbformat.read(notebook_filename, as_version=4)<br>\n</code></pre>\n\n<p>Next, we configure the notebook execution mode:</p>\n\n<pre><code>\nclient = NotebookClient(nb, timeout=600, kernel_name='python3', resources={'metadata': {'path': 'notebooks/'}})<br>\n</code></pre>\n\n<p>We specified two (optional) arguments <code>timeout</code> and <code>kernel_name</code>, which define respectively the cell execution timeout and the execution kernel. Usually you don\u2019t need to set these options, but these and other options are available to control execution context. Note that <code>path</code> specifies in which folder to execute the notebook.</p>\n\n<p>To actually run the notebook we call the method <code>execute</code>:</p>\n\n<pre><code>\nclient.execute()<br>\n</code></pre>\n\n<p>Hopefully, we will not get any errors during the notebook execution. This notebook will now have its cell outputs populated with the result of running each cell.</p>\n\n<p>Finally, save the resulting notebook with:</p>\n\n<pre><code>\nnbformat.write(nb, 'executed_notebook.ipynb')<br>\n</code></pre>\n\n<p>That\u2019s all. Your executed notebook will be saved in the current folder in the file <code>executed_notebook.ipynb</code>.</p>\n\n<p>Please refer to <a href=\"https://nbclient.readthedocs.io/en/latest/client.html\">readthedocs.io</a> for further instructions.</p>",
    "tags": "languages web machine_learning",
    "versions": {
      "0.7.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "72eec6b43c6264e0b68a7f612adfebf72f072c9bb772c97d1d0be03421628d98"
          }
        ]
      }
    }
  },
  "requests-ftp": {
    "image_name": "requests-ftp",
    "alt_image_name": "requests-ftp",
    "description": "<p>Requests-FTP is an implementation of a very stupid FTP transport adapter for use with the awesome <a href=\"https://github.com/kennethreitz/requests\">Requests</a> Python library.</p>\n\n<p>This library is not intended to be an example of Transport Adapters best practices. This library was cowboyed together in about 4 hours of total work, has no tests, and relies on a few ugly hacks. Instead, it is intended as both a starting point for future development and a useful example for how to implement transport adapters.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/Lukasa/requests-ftp",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/Lukasa/requests-ftp/blob/master/LICENSE",
    "usage_notes": "<p>Example of using the package:</p>\n\n<pre><code>\n&gt;&gt;&gt; import requests<br>\n&gt;&gt;&gt; import requests_ftp<br>\n&gt;&gt;&gt; requests_ftp.monkeypatch_session()<br>\n&gt;&gt;&gt; s = requests.Session()<br>\n&gt;&gt;&gt; resp = s.list('ftp://127.0.0.1/', auth=('Lukasa', 'notmypass'))<br>\n&gt;&gt;&gt; resp.status_code<br>\n'226'<br>\n&gt;&gt;&gt; print resp.content<br>\n...snip...<br>\n&gt;&gt;&gt; resp = s.stor('ftp://127.0.0.1/test.txt', auth=('Lukasa', 'notmypass'),<br>\n                   files={'file': open('report.txt', 'rb')})<br>\n</code></pre>",
    "tags": "web",
    "versions": {
      "0.3.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "ddfd6ce563516741ab87b67545f2b0f5acbcf7224391bf605f596395d49429d3"
          }
        ]
      }
    }
  },
  "dnspython": {
    "image_name": "dnspython",
    "alt_image_name": "dnspython",
    "description": "<p>dnspython is a DNS toolkit for Python. It supports almost all record types. It can be used for queries, zone transfers, and dynamic updates. </p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/rthalley/dnspython",
    "site_name_license": "ISC",
    "link_to_license": "https://github.com/rthalley/dnspython?tab=License-1-ov-file#readme",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/rthalley/dnspython\">github.com</a>.</p>",
    "tags": "web",
    "versions": {
      "2.4.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "1580be7e1dec54a9382dec847c3b9eaf1a69413ddacb946e1bbf71a40b65eccd"
          }
        ]
      }
    }
  },
  "platformdirs": {
    "image_name": "platformdirs",
    "alt_image_name": "platformdirs",
    "description": "\n<p>platformdirs will help you choose an appropriate storage location for different datasets/logging/cache etc..</p>\n",
    "site_name": "https://github.com/ibm-z-oss-oda/platformdirs",
    "link_to_site": "https://github.com/ibm-z-oss-oda/platformdirs",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/platformdirs/blob/main/LICENSE.txt",
    "usage_notes": "\n<p>For advanced tool documentation, refer to <a href=\"https://github.com/platformdirs/platformdirs\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "4.3.8": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "5b730cab91b76a7717078a264aa1ec8cea3d5e0086b960e2d2b3aab8229cd132"
          }
        ]
      }
    }
  },
  "filelock": {
    "image_name": "filelock",
    "alt_image_name": "filelock",
    "description": "<p>This package contains a single module, which implements a platform independent file lock in Python, which provides a simple way of inter-process communication. </p>\n",
    "site_name": "https://github.com/tox-dev/py-filelock",
    "link_to_site": "https://github.com/tox-dev/py-filelock",
    "site_name_license": "Unlicense",
    "link_to_license": "https://github.com/tox-dev/py-filelock/blob/main/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://py-filelock.readthedocs.io/en/latest/index.html\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "3.14.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "5397dd2e3773a337f64a50f49840b7cd54b4078df14697b10e44f30abd37e72c"
          }
        ]
      }
    }
  },
  "tdqm": {
    "image_name": "tdqm",
    "alt_image_name": "tdqm",
    "description": "<p>Alias for typos of <a href=\"https://github.com/tqdm/tqdm\"tqdm</a>.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/tqdm/tqdm",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/tqdm/tqdm/blob/master/LICENCE",
    "usage_notes": "<p>This package simply provides an alias for <code>tqdm</code>.</p>",
    "tags": "utility",
    "versions": {
      "0.0.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "7e65765fa403d7379d87c22cdf5af13ae8f7d7113ece441df44e2004976fdd5b"
          }
        ]
      }
    }
  },
  "readme-renderer": {
    "image_name": "readme-renderer",
    "alt_image_name": "readme-renderer",
    "description": "\n<p>Readme Renderer is a library that will safely render arbitrary <code>README</code> files into HTML. It is designed to be used in <a href=\"https://github.com/pypa/warehouse\">Warehouse</a> to render the <code>long_description</code> for packages. It can handle Markdown, reStructuredText (<code>.rst</code>), and plain text.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/pypa/readme_renderer",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/pypa/readme_renderer/blob/main/LICENSE",
    "usage_notes": "\n<p>To locally check whether your long descriptions will render on PyPI, first build your distributions, and then use the <a href=\"https://packaging.python.org/guides/making-a-pypi-friendly-readme#validating-restructuredtext-markup\">twine check</a> command.</p>\n\n<p>You can use <code>readme_renderer</code> on the command line to render an rST file as HTML like this:</p>\n\n<pre><code>\npython -m readme_renderer README.rst -o /tmp/README.html<br>\n</code></pre>\n",
    "tags": "languages utility",
    "versions": {
      "37.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "f67a16caedfa71eef48a31b39708637a6f4664c4394801a7b0d6432d13907343"
          }
        ]
      }
    }
  },
  "charset-normalizer": {
    "image_name": "charset-normalizer",
    "alt_image_name": "charset-normalizer",
    "description": "<p>A library that helps you read text from an unknown charset encoding.</p>\n<p> Motivated by <code>chardet</code>, this implements various performance improvements in comparison, especially on files about 1MB in size. All IANA character set names for which the Python core library provides codecs are supported.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/ousret/charset_normalizer",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/Ousret/charset_normalizer/blob/master/LICENSE",
    "usage_notes": "<h4>Basic usage:</h4>\n<pre><code>\nfrom charset_normalizer import from_bytes, from_path<br>\n<br>\n# This is going to print out your sequence once properly decoded<br>\nprint(<br>\n    str(<br>\n        from_bytes(<br>\n            my_byte_str<br>\n        ).best()<br>\n    )<br>\n)<br>\n<br>\n# You could also want the same from a file<br>\nprint(<br>\n    str(<br>\n        from_path(<br>\n            './data/sample.1.ar.srt'<br>\n        ).best()<br>\n    )<br>\n)<br>\n</code></pre>\n<h4>Compatibility with <code>chardet</code>:</h4>\n<p>For users familiar with the <code>chardet</code> library, the same <code>detect()</code> function is implemented here. This should be mostly backwards-compatible with <code>chardet</code>, allowing painless migration.</p>\n\n<pre><code>\nfrom charset_normalizer import detect<br>\n<br>\n# This will behave exactly the same as python chardet<br>\nresult = detect(my_byte_str)<br>\n<br>\nif result['encoding'] is not None:<br>\n    print('got', result['encoding'], 'as detected encoding')<br>\n</code></pre>\n\n<p>Further documentation is available on <a href=\"https://charset-normalizer.readthedocs.io/en/latest/index.html\">readthedocs.io</a></p>",
    "tags": "utility",
    "versions": {
      "3.4.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "2d89758ac5a52822a911f4abf1e04a1f72073c2d0b680802deb38218f37fcf56"
          }
        ]
      }
    }
  },
  "prompt-toolkit": {
    "image_name": "prompt-toolkit",
    "alt_image_name": "prompkit-toolkit",
    "description": "<p><code>prompt-toolkit</code> is a library for building powerful interactive command line applications in Python.</p>\n",
    "site_name": "readthedocs.io",
    "link_to_site": "https://python-prompt-toolkit.readthedocs.io/en/stable/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/prompt-toolkit/python-prompt-toolkit/blob/master/LICENSE",
    "usage_notes": "<p>The following snippet is the most simple example, it uses the <code>prompt()</code> function to ask the user for input and returns the text. Just like <code>(raw_)input</code>.</p>\n\n<pre><code>\nfrom prompt_toolkit import prompt<br>\n<br>\ntext = prompt('Give me some input: ')<br>\nprint('You said: %s' % text)<br>\n</code></pre>\n\n<p>See <a href=\"https://python-prompt-toolkit.readthedocs.io/en/stable/pages/getting_started.html#getting-started\">documentation</a> on readthedocs.io.</p>",
    "tags": "programming_tools",
    "versions": {
      "3.0.48": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "c02f254531d9819fcdaf572602e3a2e50dd126fd4156a60ca19ca288865f7ef1"
          }
        ]
      }
    }
  },
  "nest-asyncio": {
    "image_name": "nest-asyncio",
    "alt_image_name": "nest-asyncio",
    "description": "\n<p>By design asyncio <a href=\"https://bugs.python.org/issue22239\">does not allow</a> its event loop to be nested. This presents a practical problem: When in an environment where the event loop is already running it\u2019s impossible to run tasks and wait for the result. Trying to do so will give the error \u201c<code>RuntimeError: This event loop is already running</code>\".</p>\n\n<p>The issue pops up in various environments, such as web servers, GUI applications and in Jupyter notebooks.</p>\n\n<p>This module patches asyncio to allow nested use of <code>asyncio.run</code> and <code>loop.run_until_complete</code>.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/erdewit/nest_asyncio",
    "site_name_license": "BSD2",
    "link_to_license": "https://github.com/erdewit/nest_asyncio/blob/master/LICENSE",
    "usage_notes": "\n<p>Import and run with:</p>\n\n<pre><code>\nimport nest_asyncio<br>\nnest_asyncio.apply()<br>\n</code></pre>\n\n<p>Optionally the specific loop that needs patching can be given as argument to <code>apply</code>, otherwise the current event loop is used. An event loop can be patched whether it is already running or not. Only event loops from asyncio can be patched; Loops from other projects, such as uvloop or quamash, generally can\u2019t be patched.</p>",
    "tags": "programming_tools",
    "versions": {
      "1.5.5": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "96f0a093f3fbbddf5a8ff5d9a0271eef47a43c989fb49103d2ce66f4c69e8e24"
          }
        ]
      }
    }
  },
  "terminado": {
    "image_name": "terminado",
    "alt_image_name": "terminado",
    "description": "\n<p>This is a <a href=\"http://tornadoweb.org/\">Tornado</a> websocket backend for the <a href=\"https://xtermjs.org/\">Xterm.js</a> Javascript terminal emulator library.</p>\n\n<p>It evolved out of <a href=\"https://github.com/mitotic/pyxterm\">pyxterm</a>, which was part of <a href=\"https://github.com/mitotic/graphterm\">GraphTerm</a> (as lineterm.py), v0.57.0 (2014-07-18), and ultimately derived from the public-domain <a href=\"http://antony.lesuisse.org/software/ajaxterm/\">Ajaxterm</a> code, v0.11 (2008-11-13) (also on Github as part of <a href=\"https://github.com/antonylesuisse/qweb\">QWeb</a>).</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/jupyter/terminado",
    "site_name_license": "BSD2",
    "link_to_license": "https://github.com/jupyter/terminado/blob/main/LICENSE",
    "usage_notes": "<p>Usage example:</p>\n\n<pre><code>\nimport os.path<br>\nimport tornado.web<br>\nimport tornado.ioloop<br>\n# This demo requires tornado_xstatic and XStatic-term.js<br>\nimport tornado_xstatic<br>\n<br>\nimport terminado<br>\nSTATIC_DIR = os.path.join(os.path.dirname(terminado.__file__), \"_static\")<br>\n<br>\nclass TerminalPageHandler(tornado.web.RequestHandler):<br>\n    def get(self):<br>\n        return self.render(\"termpage.html\", static=self.static_url,<br>\n                           xstatic=self.application.settings['xstatic_url'],<br>\n                           ws_url_path=\"/websocket\")<br>\n<br>\nif __name__ == '__main__':<br>\n    term_manager = terminado.SingleTermManager(shell_command=['bash'])<br>\n    handlers = [<br>\n                (r\"/websocket\", terminado.TermSocket,<br>\n                     {'term_manager': term_manager}),<br>\n                (r\"/\", TerminalPageHandler),<br>\n                (r\"/xstatic/(.*)\", tornado_xstatic.XStaticFileHandler,<br>\n                     {'allowed_modules': ['termjs']})<br>\n               ]<br>\n    app = tornado.web.Application(handlers, static_path=STATIC_DIR,<br>\n                      xstatic_url = tornado_xstatic.url_maker('/xstatic/'))<br>\n    # Serve at http://localhost:8765/ N.B. Leaving out 'localhost' here will<br>\n    # work, but it will listen on the public network interface as well.<br>\n    # Given what terminado does, that would be rather a security hole.<br>\n    app.listen(8765, 'localhost')<br>\n    try:<br>\n        tornado.ioloop.IOLoop.instance().start()<br>\n    finally:<br>\n        term_manager.shutdown()<br>\n</code></pre>\n\n<p>See additional demos on <a href=\"https://github.com/jupyter/terminado/tree/main/demos\">github</a>.</p>",
    "tags": "web programming_tools",
    "versions": {
      "0.15.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "14c716493661684489f1f479fc1aa1f0f45b866c5c5363d0f57aa4a8fe3352f5"
          }
        ]
      }
    }
  },
  "pygments": {
    "image_name": "pygments",
    "alt_image_name": "pygments",
    "description": "<p>Pygments is a generic syntax highlighter suitable for use in code hosting, forums, wikis or other applications that need to prettify source code. Highlights are:</p>\n\n<ul>\n<li>a wide range of 530 languages and other text formats is supported</li>\n<li>special attention is paid to details that increase highlighting quality</li>\n<li>support for new languages and formats are added easily; most languages use a simple regex-based lexing mechanism</li>\n<li>a number of output formats is available, among them HTML, RTF, LaTeX and ANSI sequences</li>\n\n</ul>\n",
    "site_name": "pygments.org",
    "link_to_site": "https://pygments.org/",
    "site_name_license": "BSD2",
    "link_to_license": "https://github.com/pygments/pygments/blob/master/LICENSE",
    "usage_notes": "<p>Here is a small example for highlighting Python code:</p>\n\n<pre><code>\nfrom pygments import highlight<br>\nfrom pygments.lexers import PythonLexer<br>\nfrom pygments.formatters import HtmlFormatter<br>\n<br>\ncode = 'print \"Hello World\"'<br>\nprint(highlight(code, PythonLexer(), HtmlFormatter()))<br>\n</code></pre>\n\n<p>Documentation is available on <a href=\"https://pygments.org/docs/\">pygments.org</a>.</p>",
    "tags": "languages",
    "versions": {
      "2.16.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "1e6fdcb477daec1e6f52eaef3181369dfde6cdc4939087cfcf5cb003e4dc3baa"
          }
        ]
      }
    }
  },
  "rfc3986-validator": {
    "image_name": "rfc3986-validator",
    "alt_image_name": "rfc3986-validator",
    "description": "<p>A pure python RFC3986 validator.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/naimetti/rfc3986-validator",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/naimetti/rfc3986-validator/blob/master/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/naimetti/rfc3986-validator\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.1.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "5f9954cb7d57ed14fdc278102151c7b4b07e89dfa1007eafed50842629b86e0c"
          }
        ]
      }
    }
  },
  "webencodings": {
    "image_name": "webencodings",
    "alt_image_name": "webencodings",
    "description": "<p>This is a Python implementation of the <a href=\"http://encoding.spec.whatwg.org/\">WHATWG Encoding standard</a>.</p>\n\n<p>In order to be compatible with legacy web content when interpreting something like <code>Content-Type: text/html; charset=latin1</code>, tools need to use a particular set of aliases for encoding labels as well as some overriding rules. For example, <code>US-ASCII</code> and <code>iso-8859-1</code> on the web are actually aliases for <code>windows-1252</code>, and an UTF-8 or UTF-16 BOM takes precedence over any other encoding declaration. The Encoding standard defines all such details so that implementations do not have to reverse-engineer each other.</p>\n\n<p>This module has encoding labels and BOM detection, but the actual implementation for encoders and decoders is Python\u2019s.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/gsnedders/python-webencodings",
    "site_name_license": "??",
    "link_to_license": "https://github.com/gsnedders/python-webencodings/blob/master/LICENSE",
    "usage_notes": "<p>Full documentation is hosted on <a href=\"https://pythonhosted.org/webencodings/\">pythonhosted.org</a>.</p>",
    "tags": "web utility",
    "versions": {
      "0.5.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "a0af1213f3c2226497a97e2b3aa01a7e4bee4f403f95be16fc9acd2947514a78"
          }
        ]
      }
    }
  },
  "threadpoolctl": {
    "image_name": "threadpoolctl",
    "alt_image_name": "threadpoolctl",
    "description": "\n<p> Python helpers to limit the number of threads used in the threadpool-backed of common native libraries used for scientific computing and data science (e.g. BLAS and OpenMP). </p>\n",
    "site_name": "https://github.com/ibm-z-oss-oda/threadpoolctl",
    "link_to_site": "https://github.com/ibm-z-oss-oda/threadpoolctl",
    "site_name_license": "BSD 3",
    "link_to_license": "https://github.com/ibm-z-oss-oda/threadpoolctl/blob/master/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/joblib/threadpoolctl\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "3.1.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "c897f6242e3de5cf660e0e07ef19dec86e05312af31e03153401421893f62e4e"
          }
        ]
      }
    }
  },
  "json5": {
    "image_name": "json5",
    "alt_image_name": "json5",
    "description": "<p>A Python implementation of the JSON5 data format.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/dpranke/pyjson5",
    "site_name_license": "Apache-2.0",
    "link_to_license": "https://github.com/dpranke/pyjson5/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/dpranke/pyjson5\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.9.25": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "a0a88420a17700b8002dfbe4090cb762eb73d23e0108a37ac29eea993bf0ae88"
          }
        ]
      }
    }
  },
  "numpy": {
    "image_name": "numpy",
    "alt_image_name": "numpy",
    "description": "<p>NumPy is the fundamental package for array computing with Python. It provides:</p>\n\n<ul>\n    <li>a powerful N-dimensional array object</li>\n    <li>sophisticated (broadcasting) functions</li>\n    <li>tools for integrating C/C++ and Fortran code</li>\n    <li>useful linear algebra, Fourier transform, and random number capabilities</li>\n    <li>and much more</li>\n</ul>",
    "site_name": "numpy.org",
    "link_to_site": "https://numpy.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/numpy/numpy/blob/main/LICENSE.txt",
    "usage_notes": "<p>NumPy\u2019s main object is the homogeneous multidimensional array. It is a table of elements (usually numbers), all of the same type, indexed by a tuple of non-negative integers. In NumPy dimensions are called axes.</p>\n\n<p>\nFor example, the array for the coordinates of a point in 3D space, [1, 2, 1], has one axis. That axis has 3 elements in it, so we say it has a length of 3. In the example pictured below, the array has 2 axes. The first axis has a length of 2, the second axis has a length of 3.</p>\n\n<pre><code>\n[[1., 0., 0.],<br>\n [0., 1., 2.]]<br>\n</code></pre>\n\n<p>NumPy\u2019s array class is called <code>ndarray</code>. It is also known by the alias <code>array</code>. Note that <code>numpy.array</code> is not the same as the Standard Python Library class <code>array.array</code>, which only handles one-dimensional arrays and offers less functionality.</p>\n\n<p>Please refer to <a href=\"https://numpy.org/doc/1.22/user/quickstart.html\">numpy.org</a> for a quickstart guide.</p>",
    "tags": "math",
    "versions": {
      "2.0.2": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "4a4d512c829b3d5f258259debb8a46c2d367c881f31bd8babf20bb588ecb24fb"
          },
          {
            "py_version": "cp312",
            "sha256": "d4cf3bde4f4f4873dbc62e11306a71fa033456624afeb636adf5b84af3d9da53"
          },
          {
            "py_version": "cp313",
            "sha256": "df7dd21dd16653e530684941b0600377fd2b6a08e95709546af53b82b0665cdd"
          }
        ]
      }
    }
  },
  "pandocfilters": {
    "image_name": "pandocfilters",
    "alt_image_name": "pandocfilters",
    "description": "<p>A python module for writing <a href=\"http://pandoc.org/\">pandoc</a> filters.</p>\n\n<p>Pandoc filters are pipes that read a JSON serialization of the Pandoc AST from stdin, transform it in some way, and write it to stdout. They can be used with pandoc (>= 1.12) either using pipes</p>\n\n<pre><code>\npandoc -t json -s | ./caps.py | pandoc -f json<br>\n</code></pre>\n\n<p>or using the <code>--filter</code> (or <code>-F</code>) command-line option.</p>\n\n<pre><code>\npandoc --filter ./caps.py -s<br>\n</code></pre>\n\n",
    "site_name": "github",
    "link_to_site": "https://github.com/jgm/pandocfilters",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jgm/pandocfilters/blob/master/LICENSE",
    "usage_notes": "<p>Most users will only need <code>toJSONFilter</code>. Here is a simple example of its use:</p>\n\n<pre><code>\n#!/usr/bin/env python<br>\n<br>\n\"\"\"<br>\nPandoc filter to convert all regular text to uppercase.<br>\nCode, link URLs, etc. are not affected.<br>\n\"\"\"<br>\n<br>\nfrom pandocfilters import toJSONFilter, Str<br>\n<br>\ndef caps(key, value, format, meta):<br>\n  if key == 'Str':<br>\n    return Str(value.upper())<br>\n<br>\nif __name__ == \"__main__\":<br>\n  toJSONFilter(caps)<br>\n</code></pre>\n\n<p>Additional documentation is available on <a href=\"https://github.com/jgm/pandocfilters/blob/master/README.rst\">github</a>.</p>",
    "tags": "programming_tools utility languages",
    "versions": {
      "1.5.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6cda7636904bb2c19ac02b634bcb8521641a641a4731564753a150bb2ebcab65"
          }
        ]
      }
    }
  },
  "jpype1": {
    "image_name": "jpype1",
    "alt_image_name": "jpype1",
    "description": "<p>JPype is a Python module to provide full access to Java from within Python. It allows Python to make use of Java only libraries, exploring and visualization of Java structures, development and testing of Java libraries, scientific computing, and much more. By gaining the best of both worlds using Python for rapid prototyping and Java for strong typed production code, JPype provides a powerful environment for engineering and code development.</p>\n\n<p>This is achieved not through re-implementing Python, as Jython has done, but rather through interfacing at the native level in both virtual machines. This shared memory based approach achieves decent computing performance, while providing the access to the entirety of CPython and Java libraries.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/jpype-project/jpype",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/jpype-project/jpype/blob/master/LICENSE",
    "usage_notes": "<h4>Example: Access to a Java library from Python</h4>\n\n<p>Let's say that you have example piece of Java code interfacting with some Java package, which you intend to port into Python. This assumes that you have your Java environment correctly configured to access the example <code>com.paying.customer</code> package by pointing the Java classpath at the package's jar file.<p>\n\n<pre><code>\npackage com.paying.customer;<br>\n<br>\nimport com.paying.customer.DataBase<br>\n<br>\npublic class MyExample {<br>\n   public void main(String[] args) {<br>\n     Database db = new Database(\"our_records\");<br>\n     try (DatabaseConnection c = db.connect())<br>\n     {<br>\n        c.runQuery();<br>\n        while (c.hasRecords())<br>\n        {<br>\n          Record record = db.nextRecord();<br>\n          ...<br>\n        }<br>\n     }<br>\n  }<br>\n}<br>\n</code></pre>\n\n<p>Translation into Python is performed as such:</p>\n\n<pre><code>\n# Boiler plate stuff to start the module<br>\nimport jpype<br>\nimport jpype.imports<br>\nfrom jpype.types import *<br>\n<br>\n# Launch the JVM<br>\njpype.startJVM(classpath=['jars/database.jar'])<br>\n<br>\n# import the Java modules<br>\nfrom com.paying.customer import DataBase<br>\n<br>\n# Copy in the patterns from the guide to replace the example code<br>\ndb = Database(\"our_records\")<br>\nwith  db.connect() as DatabaseConnection:<br>\n   c.runQuery()<br>\n   while c.hasRecords():<br>\n       record = db.nextRecord()<br>\n       ...<br>\n</code></pre>\n\n<p>See how this allows simple and easy interfacing! Refer to the users' guide on <a href=\"https://jpype.readthedocs.io/en/latest/userguide.html\">readthedocs.io</a> for further instructions.</p>",
    "tags": "languages programming_tools",
    "versions": {
      "1.5.2": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "d3caf462765186d466ed7d8957586dca5c98a18d424f748bbe28abf96a81b672"
          },
          {
            "py_version": "cp312",
            "sha256": "6170dacc0d74fa761406acb6ff0be80c2da0a898073dd5a667d0b5a3a6361a31"
          },
          {
            "py_version": "cp313",
            "sha256": "9a6db6d5d3c7aabec5c7dcc58cf69b2c94eaa6ee2bda588789e3792a1c4dd861"
          }
        ]
      }
    }
  },
  "urllib3": {
    "image_name": "urllib3",
    "alt_image_name": "urllib3",
    "description": "<p>urllib3 is a powerful, user-friendly HTTP client for Python. Much of the Python ecosystem already uses urllib3 and you should too. urllib3 brings many critical features that are missing from the Python standard libraries:</p>\n\n<ul>\n\n<li>Thread safety. </li>\n<li>Connection pooling. </li>\n<li>Client-side SSL/TLS verification. </li>\n<li>File uploads with multipart encoding. </li>\n<li>Helpers for retrying requests and dealing with HTTP redirects. </li>\n<li>Support for gzip, deflate, and brotli encoding. </li>\n<li>Proxy support for HTTP and SOCKS. </li>\n<li>100% test coverage. </li>\n\n</ul>",
    "site_name": "readthedocs.io",
    "link_to_site": "https://urllib3.readthedocs.io/en/stable/",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/urllib3/urllib3/blob/main/LICENSE.txt",
    "usage_notes": "<p>urllib3 is powerful and easy to use:</p>\n\n<pre><code>\n&gt;&gt;&gt; import urllib3<br>\n&gt;&gt;&gt; http = urllib3.PoolManager()<br>\n&gt;&gt;&gt; r = http.request('GET', 'http://httpbin.org/robots.txt')<br>\n&gt;&gt;&gt; r.status<br>\n200<br>\n&gt;&gt;&gt; r.data<br>\n'User-agent: *\\nDisallow: /deny\\n'<br>\n</code></pre>\n\n<p>Full docs are available on <a href=\"https://urllib3.readthedocs.io/en/stable/\">readthedocs.io</a>.</p>",
    "tags": "web utility",
    "versions": {
      "1.26.18": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "4015a2a198ec94ce62c26ff552106aa68cafa051d98d412f886b73b3ffd086d9"
          }
        ]
      }
    }
  },
  "notebook": {
    "image_name": "notebook",
    "alt_image_name": "notebook",
    "description": "<p>The Jupyter Notebook is a web application that allows you to create and share documents that contain live code, equations, visualizations, and explanatory text. The Notebook has support for multiple programming languages, sharing, and interactive widgets.</p>",
    "site_name": "jupyter.org",
    "link_to_site": "https://jupyter.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter/notebook/blob/main/LICENSE",
    "usage_notes": "<p>Refer to <a href=\"https://jupyter-notebook.readthedocs.io/en/stable/\">readthedocs.io</a> for full documentation on using Jupyter notebooks.</p>",
    "tags": "machine_learning web graphics",
    "versions": {
      "6.4.12": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "99c12a0e16cf91ed37613f856f5f3ba63c24218fb6dd82dc317f0bafb17add15"
          }
        ]
      }
    }
  },
  "docutils": {
    "image_name": "docutils",
    "alt_image_name": "docutils",
    "description": "<p>Docutils is a modular system for processing documentation into useful formats, such as HTML, XML, and LaTeX. For input Docutils supports reStructuredText, an easy-to-read, what-you-see-is-what-you-get plaintext markup syntax.\n</p>",
    "site_name": "sourceforge.io",
    "link_to_site": "https://docutils.sourceforge.io/",
    "site_name_license": "HOW TO LINK SOURCEFORGE?",
    "link_to_license": "HOW TO LINK SOURCEFORGE?",
    "usage_notes": "<p>Usage can be as simple as:</p>\n<pre><code>\nrst2html.py FAQ.txt FAQ.html <br>\n</code></pre>\n<p>To convert files between formats.</p>\n\n<p>Refer to the <a href=\"https://docutils.sourceforge.io/README.html#quick-start\"quickstart</a> guide to get started.</a>",
    "tags": "languages",
    "versions": {
      "0.19.post2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "38d1401f4ce325646b6da9dfb64d98d1ddf4156ea5e002b02a05a2339f8beb4a"
          }
        ]
      }
    }
  },
  "argon2-cffi": {
    "image_name": "argon2-cffi",
    "alt_image_name": "argon2-cffi",
    "description": "\n<p>Argon2 is a secure password hashing algorithm. It is designed to have both a configurable runtime as well as memory consumption.</p>\n\n<p>This means that you can decide how long it takes to hash a password and how much memory is required.</p>\n\n<p>Argon2 won the <a href=\"https://www.password-hashing.net/\">Password Hashing Competition</a> and argon2-cffi is the simplest way to use it in Python and PyPy.</p>\n",
    "site_name": "readthedocs.io",
    "link_to_site": "https://argon2-cffi.readthedocs.io/en/stable/",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/hynek/argon2-cffi/blob/main/LICENSE",
    "usage_notes": "\n<h4>Example of usage:</h4>\n<pre><code>\n>>> from argon2 import PasswordHasher<br>\n>>> ph = PasswordHasher()<br>\n>>> hash = ph.hash(\"correct horse battery staple\")<br>\n>>> hash  # doctest: +SKIP<br>\n'$argon2id$v=19$m=65536,t=3,p=4$MIIRqgvgQbgj220jfp0MPA$YfwJSVjtjSU0zzV/P3S9nnQ/USre2wvJMjfCIjrTQbg'<br>\n>>> ph.verify(hash, \"correct horse battery staple\")<br>\nTrue<br>\n>>> ph.check_needs_rehash(hash)<br>\nFalse<br>\n>>> ph.verify(hash, \"Tr0ub4dor&3\")<br>\nTraceback (most recent call last):<br>\n  ...<br>\nargon2.exceptions.VerifyMismatchError: The password does not match the supplied hash<br>\n</code></pre>\n<p>Further documentation is available via the <a href=\"https://argon2-cffi.readthedocs.io/en/stable/#user-s-guide\">User's Guide</a></p>",
    "tags": "security",
    "versions": {
      "21.3.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "ca8776f6acbb0d565b739f1276dea6b6642c3d82d07d5e3456f3a806795eb3ac"
          }
        ]
      }
    }
  },
  "dash-bootstrap-components": {
    "image_name": "dash-bootstrap-components",
    "alt_image_name": "dash-bootstrap-components",
    "description": "\n<p>dash-bootstrap-components is a library of Bootstrap components for use with Dash.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/facultyai/dash-bootstrap-components",
    "site_name_license": "Apache 2.0",
    "link_to_license": "https://github.com/facultyai/dash-bootstrap-components#Apache-2.0-1-ov-file",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/facultyai/dash-bootstrap-components\">github.com</a>.</p>",
    "tags": "web",
    "versions": {
      "1.5.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "3335d9f69cda4b4100e2d5b7537a54e60b298546b26c07134aa524aaa9212726"
          }
        ]
      }
    }
  },
  "seaborn": {
    "image_name": "seaborn",
    "alt_image_name": "seaborn",
    "description": "<p>Seaborn is a library for making statistical graphics in Python. It is built on top of <a href=\"https://matplotlib.org/\">matplotlib</a> and closely integrated with <a href=\"https://pandas.pydata.org/\">pandas</a> data structures.</p>\n\n<p>Here is some of the functionality that seaborn offers:</p>\n\n<ul>\n\n<li>A dataset-oriented API for examining relationships between multiple variables </li>\n<li>Convenient views onto the overall structure of complex datasets </li>\n<li>Specialized support for using categorical variables to show observations or aggregate statistics </li>\n<li>Options for visualizing univariate or bivariate distributions and for comparing them between subsets of data </li>\n<li>Automatic estimation and plotting of linear regression models for different kinds of dependent variables </li>\n<li>High-level abstractions for structuring multi-plot grids that let you easily build complex visualizations </li>\n<li>Concise control over matplotlib figure styling with several built-in themes </li>\n<li>Tools for choosing color palettes that faithfully reveal patterns in your data </li>\n</ul>\n\n<p>Seaborn aims to make visualization a central part of exploring and understanding data. Its dataset-oriented plotting functions operate on dataframes and arrays containing whole datasets and internally perform the necessary semantic mappings and statistical aggregations to produce informative plots.</p>\n",
    "site_name": "seaborn.pydata.org",
    "link_to_site": "https://seaborn.pydata.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/mwaskom/seaborn/blob/master/LICENSE",
    "usage_notes": "<p>Extensive usage notes are available on <a href=\"https://seaborn.pydata.org/tutorial.html\">seaborn.pydata.org</a>.</p>",
    "tags": "graphics math",
    "versions": {
      "0.11.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "8c5fcbead711dd0c39f00701b11a0076de2186d6efce34b11418baf77024552a"
          }
        ]
      }
    }
  },
  "pyparsing": {
    "image_name": "pyparsing",
    "alt_image_name": "pyparsing",
    "description": "\n<p>The pyparsing module is an alternative approach to creating and executing simple grammars, vs. the traditional lex/yacc approach, or the use of regular expressions. The pyparsing module provides a library of classes that client code uses to construct the grammar directly in Python code.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/pyparsing/pyparsing/",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/pyparsing/pyparsing/blob/master/LICENSE",
    "usage_notes": "<p>Here is a program to parse <code>\"Hello, World!\"</code>:</p>\n\n<pre><code>\nfrom pyparsing import Word, alphas<br>\ngreet = Word(alphas) + \",\" + Word(alphas) + \"!\"<br>\nhello = \"Hello, World!\"<br>\nprint(hello, \"->\", greet.parseString(hello))<br>\n</code></pre>\n\n<p>The program outputs the following:</p>\n\n<pre><code>\nHello, World! -> ['Hello', ',', 'World', '!']<br>\n</code></pre>\n\n<p>The Python representation of the grammar is quite readable, owing to the self-explanatory class names, and the use of \u2018+\u2019, \u2018|\u2019 and \u2018^\u2019 operator definitions.</p>\n\n<p>Documentation can be found at <a href=\"https://pyparsing-docs.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "programming_tools languages",
    "versions": {
      "3.0.10": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "61ce52c4f7808471604fff914cb827e41fd04f2a14623125fcee3892637f295a"
          }
        ]
      }
    }
  },
  "partd": {
    "image_name": "partd",
    "alt_image_name": "partd",
    "description": "<p>Key-value byte store with appendable values</p>\n<p>Partd stores key-value pairs. Values are raw bytes. We append on old values.</p>\n\n<p>Partd excels at shuffling operations.</p>",
    "site_name": "partd",
    "link_to_site": "https://github.com/dask/partd/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/dask/partd/blob/main/LICENSE.txt",
    "usage_notes": "<p>PartD has two main operations, <code>append</code> and <code>get</code>.</p>\n\n<p>Create a Partd backed by a directory:</p>\n\n<pre><code>\n&gt;&gt;&gt; import partd<br>\n&gt;&gt;&gt; p = partd.File('/path/to/new/dataset/')<br>\n</code></pre>\n\n<p>Append key-byte pairs to dataset:</p>\n\n<pre><code>\n&gt;&gt;&gt; p.append({'x': b'Hello ', 'y': b'123'})<br>\n&gt;&gt;&gt; p.append({'x': b'world!', 'y': b'456'})<br>\n</code></pre>\n\n<p>Get bytes associated to keys:</p>\n\n<pre><code>\n&gt;&gt;&gt; p.get('x')         # One key<br>\nb'Hello world!'<br>\n<br>\n&gt;&gt;&gt; p.get(['y', 'x'])  # List of keys<br>\n[b'123456', b'Hello world!']<br>\n</code></pre>\n\n<p>Destroy partd dataset:</p>\n\n<pre><code>\n&gt;&gt;&gt;p.drop()<br>\n</code></pre>\n\n<p>That\u2019s it!</p>",
    "tags": "programming_tools",
    "versions": {
      "1.4.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "2f13e7ff8879f410131ef7a028a9abeb756a194ce092b8db0fb98a9e7a4fc42d"
          }
        ]
      }
    }
  },
  "zipp": {
    "image_name": "zipp",
    "alt_image_name": "zipp",
    "description": "<p>A pathlib-compatible Zipfile object wrapper. Official backport of the standard library <a href=\"https://docs.python.org/3.8/library/zipfile.html#path-objects\">Path object</a>.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/jaraco/zipp",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/jaraco/zipp/blob/main/LICENSE",
    "usage_notes": "<p>To use this package, simply use zipp.Path in place of zipfile.Path on any Python.</p>",
    "tags": "programming_tools",
    "versions": {
      "3.21.0.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "2782e4acd415888548e3f0971cbf7db912b2dbb6a38397fd56b82025cf40af86"
          }
        ]
      }
    }
  },
  "zos-util": {
    "image_name": "zos-util",
    "alt_image_name": "zos-util",
    "description": "\n<p>This module provides a Python interface into various z/OS utilities</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/IBM/zos-util",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/IBM/zos-util/blob/main/LICENSE",
    "usage_notes": "<p>Example:</p>\n\n<pre><code>\nimport zos_util<br>\nimport tempfile<br>\nf = tempfile.NamedTemporaryFile()<br>\n# To specify a file with IBM-1047 code set<br>\nfpath = f.name<br>\nzos_util.chtag(fpath, 1047)<br>\n <br>\n# To specify a file with ISO8859-1 code set<br>\nzos_util.chtag(fpath)<br>\ntag_info = zos_util.get_tag_info(fpath)<br>\nprint(f\"CCSID:{tag_info[0]}, TXT_FLAG:{tag_info[1]}\")<br>\n <br>\n# set to tag_mixed mode<br>\nzos_util.tag_mixed(fpath)<br>\ntag_info = zos_util.get_tag_info(fpath)<br>\nprint(f\"CCSID:{tag_info[0]}, TXT_FLAG:{tag_info[1]}\")<br>\n <br>\n# remove the tag from the file<br>\nzos_util.untag(fpath)<br>\ntag_info = zos_util.get_tag_info(fpath)<br>\nprint(f\"CCSID:{tag_info[0]}, TXT_FLAG:{tag_info[1]}\")<br>\n</code></pre>\n\n<p>Package documentation is available <a href=\"https://www.ibm.com/docs/en/python-zos/3.8?topic=package-documentation-zos-util\">here</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.0.1.post0": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "5cc45f991e708b42a5ba58bcec9294a979202d1e236aaaa8e577878f1a16bb08"
          }
        ]
      }
    }
  },
  "webcolors": {
    "image_name": "webcolors",
    "alt_image_name": "webcolors",
    "description": "<p>webcolors is a module for working with HTML/CSS color definitions.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ubernostrum/webcolors",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/ubernostrum/webcolors/blob/trunk/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://webcolors.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "utility web",
    "versions": {
      "1.13": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "48d15a0aeedc55d66c3addb43de2ef7356bb7ed030945c6e7f4d641bc5c1ca7b"
          }
        ]
      }
    }
  },
  "pyopenssl": {
    "image_name": "pyopenssl",
    "alt_image_name": "pyopenssl",
    "description": "<p>A Python wrapper around the OpenSSL library.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/pyca/pyopenssl",
    "site_name_license": "Apache-2.0",
    "link_to_license": "https://github.com/pyca/pyopenssl/blob/main/LICENSE",
    "usage_notes": "<p>Documentation can be found at <a href=\"https://www.pyopenssl.org/en/latest/\">pyopenssl.org</a>.</p>",
    "tags": "security",
    "versions": {
      "21.0.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "93525c9d5b92649a9acad6003c4a782bfc9459eb9ca98df3036ac4b3f1863d31"
          }
        ]
      }
    }
  },
  "requests-toolbelt": {
    "image_name": "requests-toolbelt",
    "alt_image_name": "requests-toolbelt",
    "description": "<p>This is just a collection of utilities for <a href=\"https://github.com/kennethreitz/requests\">python-requests</a>, but which don\u2019t really belong in <code>requests</code> proper.</p>\n",
    "site_name": "readthedocs.io",
    "link_to_site": "https://toolbelt.readthedocs.io/en/latest/",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/requests/toolbelt/blob/master/LICENSE",
    "usage_notes": "<p>The main attraction is a streaming multipart form-data object, <code>MultipartEncoder</code>. Its API looks like this:</p>\n\n<pre><code>\nfrom requests_toolbelt import MultipartEncoder<br>\nimport requests<br>\n<br>\nm = MultipartEncoder(<br>\n    fields={'field0': 'value', 'field1': 'value',<br>\n            'field2': ('filename', open('file.py', 'rb'), 'text/plain')}<br>\n    )<br>\n<br>\nr = requests.post('http://httpbin.org/post', data=m,<br>\n                  headers={'Content-Type': m.content_type})<br>\n</code></pre>\n\n<p>You can also use <code>multipart/form-data</code> encoding for requests that don\u2019t require files:</p>\n\n<pre><code>\nfrom requests_toolbelt import MultipartEncoder<br>\nimport requests<br>\n<br>\nm = MultipartEncoder(fields={'field0': 'value', 'field1': 'value'})<br>\n<br>\nr = requests.post('http://httpbin.org/post', data=m,<br>\n                  headers={'Content-Type': m.content_type})<br>\n</code></pre>\n\n<p>Or, you can just create the string and examine the data:</p>\n<pre><code>\n# Assuming `m` is one of the above<br>\nm.to_string()  # Always returns unicode<br>\n</code></pre>\n\n<p>Refer to <a href=\"https://toolbelt.readthedocs.io/en/latest/user.html\">readthedocs.io</a> for further usage information.</p>",
    "tags": "utility web",
    "versions": {
      "0.10.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "18565aa58116d9951ac39baa288d3adb5b3ff975c4f25eee78555d89e8f247f7"
          }
        ]
      }
    }
  },
  "pickleshare": {
    "image_name": "pickleshare",
    "alt_image_name": "pickleshare",
    "description": "<p>PickleShare - a small \u2018shelve\u2019 like datastore with concurrency support</p>\n<p>Like shelve, a PickleShareDB object acts like a normal dictionary. Unlike shelve, many processes can access the database simultaneously. Changing a value in database is immediately visible to other processes accessing the same database.</p>\n<p>Concurrency is possible because the values are stored in separate files. Hence the \u201cdatabase\u201d is a directory where all files are governed by PickleShare.</p>\n\n",
    "site_name": "github",
    "link_to_site": "https://github.com/pickleshare/pickleshare",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/pickleshare/pickleshare/blob/master/LICENSE",
    "usage_notes": "<p>Example usage:</p>\n<pre><code>\nfrom pickleshare import *<br>\ndb = PickleShareDB('~/testpickleshare')<br>\ndb.clear()<br>\nprint(\"Should be empty:\",db.items())<br>\ndb['hello'] = 15<br>\ndb['aku ankka'] = [1,2,313]<br>\ndb['paths/are/ok/key'] = [1,(5,46)]<br>\nprint(db.keys())<br>\n</code></pre>",
    "tags": "programming_tools",
    "versions": {
      "0.7.5": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "23c3071dd0f39472a7d427b7ea2d9522be49d08053e8746579c095d570a77d08"
          }
        ]
      }
    }
  },
  "widgetsnbextension": {
    "image_name": "widgetsnbexntension",
    "alt_image_name": "widgetsnbextension",
    "description": "<h1>This package makes Jupyter widgets available in the classic Jupyter Notebook. This package provides the necessary JavaScript controls in the Jupyter Notebook that communicate with the widget objects in the kernel.</h1>",
    "site_name": "http://jupyter.org/",
    "link_to_site": "http://jupyter.org/",
    "site_name_license": "BSD License",
    "link_to_license": "https://github.com/jupyter-widgets/ipywidgets/blob/main/LICENSE",
    "usage_notes": "<a href=\"https://ipywidgets.readthedocs.io/en/stable/\">Click here for further documentation on this package.</a>",
    "tags": "programming_tools web",
    "versions": {
      "4.0.7": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6a59fb821c41e9bcc5b12d81c56f52161a57f65dbbf05c4e54c36d93793d9c8a"
          }
        ]
      }
    }
  },
  "pyftpdlib": {
    "image_name": "pyftpdlib",
    "alt_image_name": "pyftpdlib",
    "description": "<p>Python FTP server library provides a high-level portable interface to easily write very efficient, scalable and asynchronous FTP servers with Python. </p>",
    "site_name": "https://github.com/ibm-z-oss-oda/pyftpdlib",
    "link_to_site": "https://github.com/ibm-z-oss-oda/pyftpdlib",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/pyftpdlib/blob/master/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/giampaolo/pyftpdlib\">github.com</a>.</p>",
    "tags": "utility web",
    "versions": {
      "1.5.7": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "5488ce3d2c2f465579b4e5b0eef60d4991af1d908309548ba57bb19ffa6c0047"
          }
        ]
      }
    }
  },
  "fonttools": {
    "image_name": "fonttools",
    "alt_image_name": "fonttools",
    "description": "\n<p>fontTools is a library for manipulating fonts, written in Python. The project includes the TTX tool, that can convert TrueType and OpenType fonts to and from an XML text format, which is also called TTX. </p>",
    "site_name": "https://github.com/fonttools/fonttools",
    "link_to_site": "https://github.com/fonttools/fonttools",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/fonttools/fonttools/blob/main/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://fonttools.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "graphics",
    "versions": {
      "4.54.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "28a2e02343558c0749f8358c5e637cb482ac4cf9699d1ad1d0864befb586ba87"
          }
        ]
      }
    }
  },
  "jupyter-cms": {
    "image_name": "jupyter-cms",
    "alt_image_name": "jupyter-cms",
    "description": "<p>Content management extensions for Jupyter / IPython Notebook.</p>\n\n<p>The content management extensions provide the following:</p>\n\n<ul>\n<li>Search dialog on dashboard, editor, and notebook screens to search over filenames and <code>.ipynb</code> content in the notebook directory</li>\n<li>IPython kernel extension to make Python notebooks reusable as modules and cookbooks (see the <a href=\"https://github.com/jupyter-incubator/contentmanagement/blob/master/etc/notebooks/cookbooks_demo/use_cookbooks.ipynb\">cookbooks tutorial</a>)</li>\n<li>Full-page drag-and-drop upload target</li>\n<li>Pop-over table of contents navigation for notebooks</li>\n</ul>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/jupyter-incubator/contentmanagement",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter-incubator/contentmanagement/blob/master/LICENSE.md",
    "usage_notes": "<a>Please refer to the example notebooks provided on <a href=\"https://github.com/jupyter-incubator/contentmanagement/tree/master/etc/notebooks/cookbooks_demo\">github</a> for usage examples.</p>",
    "tags": "web graphics languages",
    "versions": {
      "0.7.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "ef333f779063a0e147cb08ab0553759e38627d5d8e340371166b8458be690cb9"
          }
        ]
      }
    }
  },
  "retrying": {
    "image_name": "retrying",
    "alt_image_name": "retrying",
    "description": "\n<p>Retrying is an Apache 2.0 licensed general-purpose retrying library, written in Python, to simplify the task of adding retry behavior to just about anything.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/ibm-z-oss-oda/retrying",
    "site_name_license": "Apache 2.0",
    "link_to_license": "https://github.com/ibm-z-oss-oda/retrying/blob/main/LICENSE",
    "usage_notes": "<p>Documentation can be found on <a href=\"https://github.com/ibm-z-oss-oda/retrying\">github.com</a>.</p>",
    "tags": "programming_tools utility",
    "versions": {
      "1.3.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "96879a7347d110adb532ffbf5d29630a5cf3cb6e47e3310c19f3037ee26b5735"
          }
        ]
      }
    }
  },
  "scikit-learn": {
    "image_name": "scikit-learn",
    "alt_image_name": "scikit-learn",
    "description": "<p>scikit-learn is a Python module for machine learning built on top of SciPy and is distributed under the 3-Clause BSD license.</p>\n\n<p>The project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed.</p>",
    "site_name": "scikit-learn.org",
    "link_to_site": "https://scikit-learn.org/stable/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/scikit-learn/scikit-learn/blob/main/COPYING",
    "usage_notes": "<p>Extensive documentation is available on <a href=\"https://scikit-learn.org/stable/index.html\">scikit-learn.org</a>.</p>",
    "tags": "graphics machine_learning math",
    "versions": {
      "1.2.1.post2": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "872db2277c9d67aa12574a7e625d399ccde418dadded041cd52996468d7713c9"
          }
        ]
      }
    }
  },
  "pretend": {
    "image_name": "pretend",
    "alt_image_name": "pretend",
    "description": "<p>Pretend is a library to make stubbing with Python easier.</p>\n",
    "site_name": "https://github.com/ibm-z-oss-oda/pretend",
    "link_to_site": "https://github.com/ibm-z-oss-oda/pretend",
    "site_name_license": "BSD 3",
    "link_to_license": "https://github.com/ibm-z-oss-oda/pretend/blob/master/LICENSE.rst",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/alex/pretend\">github.com</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "1.0.9": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "0b08dd9b1de7a2fa9c0315f4a1d42b767def127a7f893f9285974a28e1d2219d"
          }
        ]
      }
    }
  },
  "msgpack": {
    "image_name": "msgpack",
    "alt_image_name": "msgpack",
    "description": "<p>MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller. This package provides CPython bindings for reading and writing MessagePack data.</p>\n",
    "site_name": "msgpack.org",
    "link_to_site": "https://msgpack.org/",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/msgpack/msgpack-python/blob/main/COPYING",
    "usage_notes": "<h4>Example of One-shot pack & unpack:</h4>\n\n<p>Use <code>packb</code> for packing and <code>unpackb</code> for unpacking. msgpack provides <code>dumps</code> and <code>loads</code> as an alias for compatibility with <code>json</code> and <code>pickle</code>.</p>\n\n<p><code>pack</code> and <code>dump</code> packs to a file-like object. <code>unpack</code> and <code>load</code> unpacks from a file-like object.</p>\n\n<pre><code>\n&gt;&gt;&gt; import msgpack<br>\n&gt;&gt;&gt; msgpack.packb([1, 2, 3], use_bin_type=True)<br>\n'\\x93\\x01\\x02\\x03'<br>\n&gt;&gt;&gt; msgpack.unpackb(_, raw=False)<br>\n[1, 2, 3]<br>\n</code></pre>\n\n<p><code>unpack</code> unpacks msgpack's array to Python's list, but can also unpack to tuple:</p>\n\n<pre><code>\n&gt;&gt;&gt; msgpack.unpackb(b'\\x93\\x01\\x02\\x03', use_list=False, raw=False)<br>\n(1, 2, 3)<br>\n</code></pre>\n<p>You should always specify the <code>use_list</code> keyword argument for backward compatibility.</p>\n\n<p>Please refer to <a href=\"https://msgpack-python.readthedocs.io/en/latest/\">readthedocs.io</a> for further usage instructions.</p>",
    "tags": "languages utility",
    "versions": {
      "1.0.4.post0": {
        "dist": [
          {
            "py_version": "cp312",
            "sha256": "4bd400e3ec2ac7fe8ebe49d0736582897f4f7d5c3eb54c05b12af6d476909816"
          },
          {
            "py_version": "cp311",
            "sha256": "dee3254cbf0a411e5abfdfc291046aa865bdf3bd57a0b077e63c2be7d3d1aa30"
          },
          {
            "py_version": "cp313",
            "sha256": "106db72f030712f81ded77eac85af1954052699b0cabd93ebf7fff3dc7c8fb05"
          }
        ]
      }
    }
  },
  "cloudpickle": {
    "image_name": "cloudpickle",
    "alt_image_name": "cloudpickle",
    "description": "<p><code>cloudpickle</code> makes it possible to serialize Python constructs not supported\nby the default <code>pickle</code> module from the Python standard library.</p>\n<p><code>cloudpickle</code> is especially useful for <strong>cluster computing</strong> where Python\ncode is shipped over the network to execute on remote hosts, possibly close\nto the data.</p>\n<p>Among other things, <code>cloudpickle</code> supports pickling for <strong>lambda functions</strong>\nalong with <strong>functions and classes defined interactively</strong> in the\n<code>__main__</code> module (for instance in a script, a shell or a Jupyter notebook).</p>\n<p>Cloudpickle can only be used to send objects between the <strong>exact same version\nof Python</strong>.</p>\n<p>Using <code>cloudpickle</code> for <strong>long-term object storage is not supported and\nstrongly discouraged.</strong></p>",
    "site_name": "github",
    "link_to_site": "https://github.com/cloudpipe/cloudpickle",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/cloudpipe/cloudpickle/blob/master/LICENSE",
    "usage_notes": "<h4>Two Examples:</h4>\n<p>Pickling a lambda expression:</p>\n<pre><code>\n&gt;import cloudpickle<br>\n&gt;squared = lambda x: x ** 2<br>\n&gt;pickled_lambda = cloudpickle.dumps(squared)</p><br>\n<br>\n&gt;import pickle<br>\n&gt;new_squared = pickle.loads(pickled_lambda)<br>\n&gt;new_squared(2)<br>\n4<br>\n</code></pre>\n<p>Pickling a function interactively defined in a Python shell session\n(in the <code>__main__</code> module):</p>\n\n<pre><code>\n&gt;CONSTANT = 42<br>\n&gt;my_function(data: int) -&gt; int:<br>\n...     return data + CONSTANT<br>\n...<br>\n&gt;pickled_function = cloudpickle.dumps(my_function)<br>\n&gt;depickled_function = pickle.loads(pickled_function)<br>\n&gt;depickled_function<br>\n&lt;function __main__.my_function(data:int) -&gt; int&gt;<br>\n&gt;depickled_function(43)<br>\n85<br>\n</code></pre>\n<p>Note that these examples also make use of the separate library <code>pickle</code> to demonstrate the functionality of this package.</p>\n<p>Further information is available via <a href=\"https://github.com/cloudpipe/cloudpickle\">github</a>.</p>",
    "tags": "utility",
    "versions": {
      "2.0.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "dd89c6e592f4afea28d6d08941e51d00fc3afc94224587b1472ebb5470dce123"
          }
        ]
      }
    }
  },
  "sniffio": {
    "image_name": "sniffio",
    "alt_image_name": "sniffio",
    "description": "<p>Sniff out which async library your code is running under.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/python-trio/sniffio",
    "site_name_license": "Apache-2.0",
    "link_to_license": "https://github.com/python-trio/sniffio/blob/master/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://sniffio.readthedocs.io\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "1.3.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "65ab0e88941cc78bbc98570186dc5bbe52a62bfd5764b912392fd95be0545547"
          }
        ]
      }
    }
  },
  "click": {
    "image_name": "click",
    "alt_image_name": "click",
    "description": "<p>Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary. It\u2019s the \u201cCommand Line Interface Creation Kit\u201d. It\u2019s highly configurable but comes with sensible defaults out of the box.</p>\n\n<p>It aims to make the process of writing command line tools quick and fun while also preventing any frustration caused by the inability to implement an intended CLI API.</p>",
    "site_name": "palletsprojects.com/p/click/",
    "link_to_site": "https://palletsprojects.com/p/click/",
    "site_name_license": "here",
    "link_to_license": "https://github.com/pallets/click/blob/main/LICENSE.rst",
    "usage_notes": "<h4>A simple example:</h4>\n<pre><code>\nimport click<br>\n<br>\n@click.command()<br>\n@click.option(\"--count\", default=1, help=\"Number of greetings.\")<br>\n@click.option(\"--name\", prompt=\"Your name\", help=\"The person to greet.\")<br>\ndef hello(count, name):<br>\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"<br>\n    for _ in range(count):<br>\n        click.echo(f\"Hello, {name}!\")<br>\n<br>\nif __name__ == '__main__':<br>\n    hello()<br>\n</code>\n</pre>\n<br>\n<pre><code>",
    " python hello.py --count=3<br>": "Your name: Click<br>\nHello, Click!<br>\nHello, Click!<br>\nHello, Click!<br>\n</code></pre>\n<p>Further documentation can be found on <a href=\"https://click.palletsprojects.com/en/8.0.x/#documentation\">click.pallasprojects.com</a></p>",
    "tags": "utility programming_tools",
    "versions": {
      "8.1.8": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "53e75763203f257c300dc17b3257be251eb31d9d767dcd9badec4fb57b1bef0f"
          }
        ]
      }
    }
  },
  "jsonpointer": {
    "image_name": "jsonpointer",
    "alt_image_name": "jsonpointer",
    "description": "<p>Resolve JSON Pointers in Python.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/stefankoegl/python-json-pointer",
    "site_name_license": "BSD-1-Clause",
    "link_to_license": "https://github.com/stefankoegl/python-json-pointer/blob/master/LICENSE.txt",
    "usage_notes": "<p>More information is available on <a href=\"https://python-json-pointer.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "2.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "ff8b546e4f5346943590c16617209ba47906a0174c0259af4d8bfabc02a88c6b"
          }
        ]
      }
    }
  },
  "jsonpickle": {
    "image_name": "jsonpickle",
    "alt_image_name": "jsonpickle",
    "description": "<p>Python library for serializing any arbitrary object graph into JSON. It can take almost any Python object and turn the object into JSON. Additionally, it can reconstitute the object back into Python. </p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ibm-z-oss-oda/jsonpickle",
    "site_name_license": "BSD-3",
    "link_to_license": "https://github.com/ibm-z-oss-oda/jsonpickle/blob/main/LICENSE",
    "usage_notes": "<p>The jsonpickle manual is available on <a href=\"https://jsonpickle.github.io/\">github.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.5.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6eebc763ab29d2f5f3a47cff1b039d3a9554366b1a2a49a8df093756a3cf102d"
          }
        ]
      }
    }
  },
  "mock": {
    "image_name": "mock",
    "alt_image_name": "mock",
    "description": "<p>mock is a library for testing in Python.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/testing-cabal/mock",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/minrk/pamela/blob/main/COPYING",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/testing-cabal/mock\">github.com</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "5.0.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "34b7920f846af0fd9d0e5577e4c41e6f9e7aa882606edf4d899360af5590c028"
          }
        ]
      }
    }
  },
  "prometheus-client": {
    "image_name": "prometheus-client",
    "alt_image_name": "prometheus-client",
    "description": "<p>This package provides the official Python client for <a href=\"https://prometheus.io/\">Prometheus</a>.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/prometheus/client_python",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/prometheus/client_python/blob/master/LICENSE",
    "usage_notes": "<p>Paste the following into your Python interpreter:</p>\n\n<pre><code>\nfrom prometheus_client import start_http_server, Summary<br>\nimport random<br>\nimport time<br>\n<br>\n# Create a metric to track time spent and requests made.<br>\nREQUEST_TIME = Summary('request_processing_seconds', 'Time spent processing request')<br>\n<br>\n# Decorate function with metric.<br>\n@REQUEST_TIME.time()<br>\ndef process_request(t):<br>\n    \"\"\"A dummy function that takes some time.\"\"\"<br>\n    time.sleep(t)<br>\n<br>\nif __name__ == '__main__':<br>\n    # Start up the server to expose the metrics.<br>\n    start_http_server(8000)<br>\n    # Generate some requests.<br>\n    while True:<br>\n        process_request(random.random())<br>\n</code></pre>\n\n<p>Visit http://localhost:8000/ to view the metrics.</p>\n\n<p>From one easy to use decorator you get:</p>\n\n<p><code>request_processing_seconds_count</code>: Number of times this function was called.</p>\n<p><code>request_processing_seconds_sum</code>: Total amount of time spent in this function.</p>\n\n<p>Prometheus's <code>rate</code> function allows calculation of both requests per second, and latency over time from this data.</p>\n\n<p>See <a href=\"https://github.com/prometheus/client_python/blob/master/README.md\">github</a> for more documentation.</p>",
    "tags": "web graphics",
    "versions": {
      "0.14.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "b3095f0a1dc45b13bc420b14ecaeaccb6cf37cd4f3d60328d3945cd38437cf49"
          }
        ]
      }
    }
  },
  "decorator": {
    "image_name": "decorator",
    "alt_image_name": "decorator",
    "description": "<p>The goal of the decorator module is to make it easy to define signature-preserving function decorators and decorator factories. It also includes an implementation of multiple dispatch and other niceties.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/micheles/decorator",
    "site_name_license": "BSD2",
    "link_to_license": "https://github.com/micheles/decorator/blob/master/LICENSE.txt",
    "usage_notes": "<p>Here is an example of how to define a family of decorators tracing slow operations:</p>\n<pre><code>\nfrom decorator import decorator<br>\n<br>\n@decorator<br>\ndef warn_slow(func, timelimit=60, *args, **kw):<br>\n    t0 = time.time()<br>\n    result = func(*args, **kw)<br>\n    dt = time.time() - t0<br>\n    if dt > timelimit:<br>\n        logging.warn('%s took %d seconds', func.__name__, dt)<br>\n    else:<br>\n        logging.info('%s took %d seconds', func.__name__, dt)<br>\n    return result<br>\n<br>\n@warn_slow  # warn if it takes more than 1 minute<br>\ndef preprocess_input_files(inputdir, tempdir):<br>\n    ...<br>\n<br>\n@warn_slow(timelimit=600)  # warn if it takes more than 10 minutes<br>\ndef run_calculation(tempdir, outdir):<br>\n    ...<br>\n</code></pre>\n<p>See further documentation <a href=\"https://github.com/micheles/decorator/blob/master/docs/documentation.md\">here</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "5.1.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "b7b96928da4fe199532fc066c932e3854954249ed01d5596025a0740a07ad4e6"
          }
        ]
      }
    }
  },
  "attrs": {
    "image_name": "attrs",
    "alt_image_name": "attrs",
    "description": "\n<p><tt class=\"docutils literal\">attrs</tt> is the Python package that will bring back the <strong>joy</strong> of <strong>writing classes</strong> by relieving you from the drudgery of implementing object protocols (aka <a class=\"reference external\" href=\"https://www.attrs.org/en/latest/glossary.html#term-dunder-methods\">dunder methods</a>).\n<a class=\"reference external\" href=\"https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/personalizing-your-profile#list-of-qualifying-repositories-for-mars-2020-helicopter-contributor-badge\">Trusted by NASA</a> for Mars missions since 2020!</p>\n<p>Its main goal is to help you to write <strong>concise</strong> and <strong>correct</strong> software without slowing down your code.</p>\n<!-- teaser-end -->\n<p>For that, it gives you a class decorator and a way to declaratively define the attributes on that class.\n After <em>declaring</em> your attributes <tt class=\"docutils literal\">attrs</tt> will also give you:</p>\n<ul class=\"simple\">\n<li>a concise and explicit overview of the class's attributes,</li>\n<li>a nice human-readable <tt class=\"docutils literal\">__repr__</tt>,</li>\n<li>equality-checking methods,</li>\n<li>an initializer,</li>\n<li>and much more,</li>\n</ul>\n<p><em>without</em> writing dull boilerplate code again and again and <em>without</em> runtime performance penalties.</p>\n<p><strong>Hate type annotations</strong>!?\nNo problem!\nTypes are entirely <strong>optional</strong> with <tt class=\"docutils literal\">attrs</tt>.\nSimply assign <tt class=\"docutils literal\">attrs.field()</tt> to the attributes instead of annotating them with types.</p>\n",
    "site_name": "attrs.org",
    "link_to_site": "https://www.attrs.org/en/stable/",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/python-attrs/attrs/blob/main/LICENSE",
    "usage_notes": "\n<h4>Example of usage:</h4>\n<pre><code>\n>>> from attrs import asdict, define, make_class, Factory<br>\n<br>\n>>> @define<br>\n... class SomeClass:<br>\n...     a_number: int = 42<br>\n...     list_of_numbers: list[int] = Factory(list)<br>\n...<br>\n...     def hard_math(self, another_number):<br>\n...         return self.a_number + sum(self.list_of_numbers) * another_number<br>\n<br>\n<br>\n>>> sc = SomeClass(1, [1, 2, 3])<br>\n>>> sc<br>\nSomeClass(a_number=1, list_of_numbers=[1, 2, 3])<br>\n<br>\n>>> sc.hard_math(3)<br>\n19<br>\n>>> sc == SomeClass(1, [1, 2, 3])<br>\nTrue<br>\n>>> sc != SomeClass(2, [3, 2, 1])<br>\nTrue<br>\n<br>\n>>> asdict(sc)<br>\n{'a_number': 1, 'list_of_numbers': [1, 2, 3]}<br>\n<br>\n>>> SomeClass()<br>\nSomeClass(a_number=42, list_of_numbers=[])<br>\n<br>\n>>> C = make_class(\"C\", [\"a\", \"b\"])<br>\n>>> C(\"foo\", \"bar\")<br>\nC(a='foo', b='bar')<br>\n</code></pre>\n<p>Further documentation is available on the <a href=\"https://www.attrs.org/en/stable/#getting-started\">getting started</a> guide.</p>",
    "tags": "programming_tools",
    "versions": {
      "22.2.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "29e95c7f6778868dbd49170f98f8818f78f3dc5e0e37c0b1f474e3561b240836"
          }
        ]
      }
    }
  },
  "pymdown-extensions": {
    "image_name": "pymdown-extensions",
    "alt_image_name": "pymdown-extensions",
    "description": "<p>PyMdown Extensions is a collection of extensions for Python Markdown. They were originally written to make writing documentation more enjoyable. They cover a wide range of solutions, and while not every extension is needed by all people, there is usually at least one useful extension for everybody.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/facelessuser/pymdown-extensions",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/facelessuser/pymdown-extensions/blob/main/LICENSE.md",
    "usage_notes": "<p>All extensions are found under the module namespace of <code>pymdownx</code>. Assuming we wanted to specify the use of the MagicLink extension, we would include it in Python Markdown like so:</p>\n\n<pre><code>\n&gt;&gt;&gt; import markdown<br>\n&gt;&gt;&gt; text = \"A link https://google.com\"<br>\n&gt;&gt;&gt; html = markdown.markdown(text, extensions=['pymdownx.magiclink'])<br>\n'&lt;p&gt;A link &lt;a href=\"https://google.com\"&gt;https://google.com&lt;/a&gt;&lt;/p&gt;'<br>\n</code></pre>\n\n<p>Documentation, including documentation on each extension and how to configure and use each one, is available on <a href=\"https://facelessuser.github.io/pymdown-extensions/\">github.io</a>.</p>",
    "tags": "languages",
    "versions": {
      "10.0.1.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "fe6530f649734b1b00d3b8a35ce51ad4f3a974f795f7c1941e955f90b3cf21be"
          }
        ]
      }
    }
  },
  "bz2file": {
    "image_name": "bz2file",
    "alt_image_name": "bz2file",
    "description": "<p>Bz2file is a Python library for reading and writing bzip2-compressed files.</p>\n\n<p>It contains a drop-in replacement for the file interface in the standard library's bz2 module, including features from the latest development version of CPython that are not available in older releases.</p>\n\n<p>Bz2file is compatible with CPython 2.6, 2.7, and 3.0 through 3.4, as well as PyPy 2.0.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/nvawda/bz2file",
    "site_name_license": "github",
    "link_to_license": "MISSING",
    "usage_notes": "The <code>open()</code> function and <code>BZ2File</code> class in this module provide the same features and interface as the ones in the standard library's <code>bz2</code> module in the current development version of CPython, documented <a href=\"https://docs.python.org/dev/library/bz2.html\">here</a>.",
    "tags": "utility",
    "versions": {
      "0.98": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "d597ac953f7e0a66604a2d497f6b2091bae1585333830e4d316baeafe61db715"
          }
        ]
      }
    }
  },
  "traitlets": {
    "image_name": "traitlets",
    "alt_image_name": "traitlets",
    "description": "<p>Traitlets is a pure Python library enabling:</p>\n<ul>\n    <li>the enforcement of strong typing for attributes of Python objects (typed attributes are called \"traits\");</li>\n    <li>dynamically calculated default values;</li>\n    <li>automatic validation and coercion of trait attributes when attempting a change;</li>\n    <li>registering for receiving notifications when trait values change;</li>\n    <li>reading configuring values from files or from command line arguments - a distinct layer on top of traitlets, so you may use traitlets without the configuration machinery.</li>\n</ul>\n<p>Its implementation relies on the <a href=\"https://docs.python.org/3/howto/descriptor.html\">descriptor</a> pattern, and it is a lightweight pure-python alternative of the <a href=\"https://docs.enthought.com/traits/\">traits</a> library.</p>\n\n<p>Traitlets powers the configuration system of IPython and Jupyter and the declarative API of IPython interactive widgets.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/ipython/traitlets",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/ipython/traitlets/blob/main/COPYING.md",
    "usage_notes": "<p>Any class with trait attributes must inherit from <code>HasTraits</code>. For the list of available trait types and their properties, see the <a href=\"https://traitlets.readthedocs.io/en/latest/trait_types.html\">Trait Types</a> section of the documentation.</p>\n<h4>Dynamic default values</h4>\n<p>To calculate a default value dynamically, decorate a method of your class with <code>@default({traitname})</code>. This method will be called on the instance, and should return the default value. In this example, the <code>_username_default</code> method is decorated with <code>@default('username')</code>:</p>\n<pre><code>\nimport getpass<br>\nfrom traitlets import HasTraits, Unicode, default<br>\n<br>\nclass Identity(HasTraits):<br>\n    username = Unicode()<br>\n<br>\n    @default('username')<br>\n    def _username_default(self):<br>\n        return getpass.getuser()<br>\n</pre></code>\n\n<h4>Callbacks when a trait attribute changes</h4>\n<p>When a trait changes, an application can follow this trait change with additional actions.</p>\n<p>To do something when a trait attribute is changed, decorate a method with <code>traitlets.observe()</code>. The method will be called with a single argument, a dictionary which contains an owner, new value, old value, name of the changed trait, and the event type.</p>\n<p>In this example, the <code>_num_changed</code> method is decorated with <code>@observe(`num`)</code>:</p>\n\n<pre><code>\nfrom traitlets import HasTraits, Integer, observe<br>\n<br>\nclass TraitletsExample(HasTraits):<br>\n    num = Integer(5, help=\"a number\").tag(config=True)<br>\n<br>\n    @observe('num')<br>\n    def _num_changed(self, change):<br>\n        print(\"{name} changed from {old} to {new}\".format(**change))<br>\n</code></pre>\n<p>and is passed the following dictionary when called:</p>\n\n<pre><code>\n{<br>\n  'owner': object,  # The HasTraits instance<br>\n  'new': 6,         # The new value<br>\n  'old': 5,         # The old value<br>\n  'name': \"foo\",    # The name of the changed trait<br>\n  'type': 'change', # The event type of the notification, usually 'change'<br>\n}<br>\n</code></pre>\n\n<h4>Validation and coercion</h4>\n<p>Each trait type (<code>Int</code>, <code>Unicode</code>, <code>Dict</code> etc.) may have its own validation or coercion logic. In addition, we can register custom cross-validators that may depend on the state of other attributes. For example:</p>\n\n<pre><code>\nfrom traitlets import HasTraits, TraitError, Int, Bool, validate<br>\n<br>\nclass Parity(HasTraits):<br>\n    value = Int()<br>\n    parity = Int()<br>\n<br>\n    @validate('value')<br>\n    def _valid_value(self, proposal):<br>\n        if proposal['value'] % 2 != self.parity:<br>\n            raise TraitError('value and parity should be consistent')<br>\n        return proposal['value']<br>\n<br>\n    @validate('parity')<br>\n    def _valid_parity(self, proposal):<br>\n        parity = proposal['value']<br>\n        if parity not in [0, 1]:<br>\n            raise TraitError('parity should be 0 or 1')<br>\n        if self.value % 2 != parity:<br>\n            raise TraitError('value and parity should be consistent')<br>\n        return proposal['value']<br>\n<br>\nparity_check = Parity(value=2)<br>\n<br>\n# Changing required parity and value together while holding cross validation<br>\nwith parity_check.hold_trait_notifications():<br>\n    parity_check.value = 1<br>\n    parity_check.parity = 1<br>\n</code></pre>\n<p>However, we <b>recommend</b> that custom cross-validators don't modify the state of the HasTraits instance.</p>\n\n<p>Further documentation is available on <a href=\"https://traitlets.readthedocs.io/en/stable/\">readthedocs.io</a></p>",
    "tags": "programming_tools",
    "versions": {
      "5.9.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9e6ec080259b9a5940c797d58b613b5e31441c2257b87c2e795c5228ae80d2d8"
          }
        ]
      }
    }
  },
  "scipy": {
    "image_name": "scipy",
    "alt_image_name": "scipy",
    "description": "<p>SciPy (pronounced \u201cSigh Pie\u201d) is open-source software for mathematics, science, and engineering. The SciPy library depends on NumPy, which provides convenient and fast N-dimensional array manipulation. The SciPy library is built to work with NumPy arrays, and provides many user-friendly and efficient numerical routines such as routines for numerical integration and optimization. Together, they run on all popular operating systems, are quick to install, and are free of charge. NumPy and SciPy are easy to use, but powerful enough to be depended upon by some of the world\u2019s leading scientists and engineers. If you need to manipulate numbers on a computer and display or publish the results, give SciPy a try!\n</p>",
    "site_name": "scipy.org",
    "link_to_site": "https://scipy.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/scipy/scipy/blob/main/LICENSE.txt",
    "usage_notes": "<p>Extensive documentation is available at <a href=\"https://docs.scipy.org/doc/scipy/tutorial/index.html\">docs.scipy.org</a>.</p>",
    "tags": "math machine_learning",
    "versions": {
      "1.3.3.post0": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "c64db9d8ff86c9dbf1aefc888531da79b43c935c4e687026f66f671392a69e94"
          }
        ]
      }
    }
  },
  "httpx": {
    "image_name": "httpx",
    "alt_image_name": "httpx",
    "description": "<p>HTTPX is a fully featured HTTP client library for Python 3.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/encode/httpx",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/encode/httpx/blob/master/LICENSE.md",
    "usage_notes": "<p>More information is available on <a href=\"https://www.python-httpx.org/\">python-httpx.org</a>.</p>",
    "tags": "web",
    "versions": {
      "0.27.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "4c0dceec140574bfca2a0d69c2bb9b534aafa342c895e1991f212a1db81d864e"
          }
        ]
      }
    }
  },
  "locket": {
    "image_name": "locket",
    "alt_image_name": "locket",
    "description": "<p>Locket implements a lock that can be used by multiple processes provided they use the same path.</p>\n\n<p>Locks largely behave as (non-reentrant) <code>Lock</code> instances from the <code>threading</code> module in the standard library. Specifically, their behaviour is:</p>\n\n<ul>\n<li>Locks are uniquely identified by the file being locked, both in the same process and across different processes.</li>\n<li>Locks are either in a locked or unlocked state.</li>\n<li>When the lock is unlocked, calling <code>acquire()</code> returns immediately and changes the lock state to locked.</li>\n<li>When the lock is locked, calling <code>acquire()</code> will block until the lock state changes to unlocked, or until the timeout expires.</li>\n<li>If a process holds a lock, any thread in that process can call <code>release()</code> to change the state to unlocked.</li>\n<li>Behaviour of locks after <code>fork</code> is undefined.</li>\n</ul>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/mwilliamson/locket.py",
    "site_name_license": "BSD2",
    "link_to_license": "https://github.com/mwilliamson/locket.py/blob/master/LICENSE",
    "usage_notes": "<p>Example of usage:</p>\n<pre><code>\nimport locket<br>\n<br>\n# Wait for lock<br>\nwith locket.lock_file(\"path/to/lock/file\"):<br>\n    perform_action()<br>\n<br>\n# Raise error if lock cannot be acquired immediately<br>\nwith locket.lock_file(\"path/to/lock/file\", timeout=0):<br>\n    perform_action()<br>\n<br>\n# Raise error if lock cannot be acquired after thirty seconds<br>\nwith locket.lock_file(\"path/to/lock/file\", timeout=30):<br>\n    perform_action()<br>\n<br>\n# Without context managers:<br>\nlock = locket.lock_file(\"path/to/lock/file\")<br>\ntry:<br>\n    lock.acquire()<br>\n    perform_action()<br>\nfinally:<br>\n    lock.release()<br>\n</code></pre>",
    "tags": "utility",
    "versions": {
      "1.0.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "055b7d11586a89b3dcd4172ce03a6257e057b4a62109966a76f64612d85dc74e"
          }
        ]
      }
    }
  },
  "pywavelets": {
    "image_name": "pywavelets",
    "alt_image_name": "pywavelets",
    "description": "<p>PyWavelets is a free Open Source library for wavelet transforms in Python. Wavelets are mathematical basis functions that are localized in both time and frequency. Wavelet transforms are time-frequency transforms employing wavelets. They are similar to Fourier transforms, the difference being that Fourier transforms are localized only in frequency instead of in time and frequency.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/PyWavelets/pywt",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/PyWavelets/pywt/blob/master/LICENSE",
    "usage_notes": "<p>PyWavelets is very easy to use and get started with. Just enter the following code to perform an example computation of a wavelet transformation:</p>\n\n<pre><code>\nimport pywt<br>\ncA, cD = pywt.dwt([1, 2, 3, 4], 'db1')<br>\n</code></pre>\n\n<p>Full documentation can be found on <a href=\"https://pywavelets.readthedocs.io/en/latest/\">readthedocs.io</a>/</p>",
    "tags": "math",
    "versions": {
      "1.6.0": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "687e94547622f9c73f27f4a9462eedd8ce6cbf96e82e3de10fe1cb8e6a58026b"
          },
          {
            "py_version": "cp312",
            "sha256": "cd596c9884e480d83a0ff7f9a65488f10c6b93ea6b74a2c171544e32fb91bb6a"
          },
          {
            "py_version": "cp313",
            "sha256": "369022037bcfea7591440c9f2de0b03d97c561cfaf2dfebf5a22128ebb896f44"
          }
        ]
      }
    }
  },
  "heapdict": {
    "image_name": "heapdict",
    "alt_image_name": "heapdict",
    "description": "</p>heapdict implements the MutableMapping ABC, meaning it works pretty much like a regular Python dict. It\u2019s designed to be used as a priority queue. </p>\n\n<p>Compared to an ordinary dict, a heapdict has the following differences:</p>\n\n\n<p>popitem():<br>\n     - Remove and return the (key, priority) pair with the lowest priority, instead of a random object.</p>\n\n<p>peekitem():<br>\n     - Return the (key, priority) pair with the lowest priority, without removing it. </p>\n\n<p>Unlike the Python standard library\u2019s heapq module, the heapdict supports efficiently changing the priority of an existing object (often called \u201cdecrease-key\u201d in textbooks). Altering the priority is important for many algorithms such as Dijkstra\u2019s Algorithm and A*.</p>\n\n<h1>Link to site on pypi.org is blocked by IBM firewall for GAMBLING. This one is getting me in trouble! I don't like that!</h1>\n",
    "site_name": "na",
    "link_to_site": "na",
    "site_name_license": "na",
    "link_to_license": "na",
    "usage_notes": "na",
    "tags": "na",
    "versions": {
      "1.0.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "8faa6f10f7581117cad3195cb00d80792b08f7c534c99b1e294b869b6eb0c94f"
          }
        ]
      }
    }
  },
  "werkzeug": {
    "image_name": "werkzeug",
    "alt_image_name": "werkzeug",
    "description": "<p>werkzeug; German noun: \u201ctool\u201d. Etymology: <i>werk</i> (\u201cwork\u201d), <i>zeug</i> (\u201cstuff\u201d)</p>\n\n<p>Werkzeug is a comprehensive <a href=\"https://wsgi.readthedocs.io/en/latest/\">WSGI</a> web application library. It began as a simple collection of various utilities for WSGI applications and has become one of the most advanced WSGI utility libraries.</p>\n\n<p>It includes:</p>\n<ul>\n    <li>An interactive debugger that allows inspecting stack traces and source code in the browser with an interactive interpreter for any frame in the stack.</li>\n    <li>A full-featured request object with objects to interact with headers, query args, form data, files, and cookies.</li>\n    <li>A response object that can wrap other WSGI applications and handle streaming data.</li>\n    <li>A routing system for matching URLs to endpoints and generating URLs for endpoints, with an extensible system for capturing variables from URLs.</li>\n    <li>HTTP utilities to handle entity tags, cache control, dates, user agents, cookies, files, and more.</li>\n    <li>A threaded WSGI server for use while developing applications locally.</li>\n    <li>A test client for simulating HTTP requests during testing without requiring running a server.</li>\n</ul>\n\n<p>Werkzeug doesn\u2019t enforce any dependencies. It is up to the developer to choose a template engine, database adapter, and even how to handle requests. It can be used to build all sorts of end user applications such as blogs, wikis, or bulletin boards.</p>\n\n<p>Flask wraps Werkzeug, using it to handle the details of WSGI while providing more structure and patterns for defining powerful applications.</p>",
    "site_name": "palletsprojects.com/p/werkzeug",
    "link_to_site": "https://palletsprojects.com/p/werkzeug/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/pallets/werkzeug/blob/main/LICENSE.rst",
    "usage_notes": "<p>A simple example:</p>\n<pre><code>\nfrom werkzeug.wrappers import Request, Response<br>\n<br>\n@Request.application<br>\ndef application(request):<br>\n    return Response('Hello, World!')<br>\n<br>\nif __name__ == '__main__':<br>\n    from werkzeug.serving import run_simple<br>\n    run_simple('localhost', 4000, application)<br></pre></code>\n<p>See <a href=\"https://werkzeug.palletsprojects.com/en/2.0.x/tutorial/\">the official tutorial</a> for further usage notes.</p>",
    "tags": "web utility programming_tools",
    "versions": {
      "3.0.6": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "a6cbc6d6930138ef51d5c37aeb19c0f8c966b70b9bdfbdef6ad732119faab23f"
          }
        ]
      }
    }
  },
  "configurable-http-proxy": {
    "image_name": "configurable-http-proxy",
    "alt_image_name": "configurable-http-proxy",
    "description": "<p>This is a pure python implementation of the configurable-http-proxy written in nodejs. It is meant to be a drop in replacement.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/corridor/configurable-http-proxy",
    "site_name_license": "Apache-2.0",
    "link_to_license": "https://github.com/corridor/configurable-http-proxy/blob/main/LICENSE",
    "usage_notes": "<p>For python package configurable-http-proxy, the following options are not supported (yet), since they are still not supported from the Open Source Community.</p>\n<ul>\n <li>SSL for proxy, client, API is not available (--ssl-*, --api-ssl-*, --client-ssl-*, --insecure)</li>\n <li>Redirecting: --redirect-port and --redirect-to</li>\n <li>Change Origin: --change-origin</li>\n <li>Rewrites in Location header: --protocol-rewrite and --auto-rewrite</li>\n <li>Metrics server: --metrics-port and --metrics-ip</li>\n</ul>\n<p>If the above options/features are needed, you will need to install the Node.js module \u201cconfigurable-http-proxy\u201d, such as, \u201cnpm install -g configurable-http-proxy\u201d to install the configurable-http-proxy package globally using npm.</p>\n\n<p>More information is available on <a href=\"https://github.com/corridor/configurable-http-proxy\">github.com</a>.</p>",
    "tags": "web",
    "versions": {
      "0.3.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "20ed6106f25f76c94693b81cd8a04981e1d963bdac751f8c69d9c600ccba6cdc"
          }
        ]
      }
    }
  },
  "iniconfig": {
    "image_name": "iniconfig",
    "alt_image_name": "iniconfig",
    "description": "<p>Brain-dead simple parsing of ini files.</p>\n<p>iniconfig is a small and simple INI-file parser module having a unique set of features:</p>\n<ul>\n<li>tested against Python2.4 across to Python3.2, Jython, PyPy</li>\n<li>maintains order of sections and entries</li>\n<li>supports multi-line values with or without line-continuations</li>\n<li>supports \u201c#\u201d comments everywhere</li>\n<li>raises errors with proper line-numbers</li>\n<li>no bells and whistles like automatic substitutions</li>\n<li>iniconfig raises an Error if two sections have the same name.</li>\n</ul>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/pytest-dev/iniconfig",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/pytest-dev/iniconfig/blob/master/LICENSE",
    "usage_notes": "<h4>Basic Example:</h4>\n<p>If you have an ini file like this:</p>\n<pre><code>\n# content of example.ini<br>\n[section1] # comment<br>\nname1=value1  # comment<br>\nname1b=value1,value2  # comment<br>\n<br>\n[section2]<br>\nname2=<br>\n    line1<br>\n    line2<br>\n</code></pre>\n\n<p>then you can perform:</p>\n\n<pre><code>\n&gt;&gt;&gt; import iniconfig<br>\n&gt;&gt;&gt; ini = iniconfig.IniConfig(\"example.ini\")<br>\n&gt;&gt;&gt; ini['section1']['name1'] # raises KeyError if not exists<br>\n'value1'<br>\n&gt;&gt;&gt; ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))<br>\n['value1', 'value2']<br>\n&gt;&gt;&gt; ini.get('section1', 'notexist', [], lambda x: x.split(\",\"))<br>\n[]<br>\n&gt;&gt;&gt; [x.name for x in list(ini)]<br>\n['section1', 'section2']<br>\n&gt;&gt;&gt; list(list(ini)[0].items())<br>\n[('name1', 'value1'), ('name1b', 'value1,value2')]<br>\n&gt;&gt;&gt; 'section1' in ini<br>\nTrue<br>\n&gt;&gt;&gt; 'inexistendsection' in ini<br>\nFalse<br>\n</code></pre>",
    "tags": "programming_tools utility",
    "versions": {
      "2.0.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374"
          }
        ]
      }
    }
  },
  "alembic": {
    "image_name": "alembic",
    "alt_image_name": "alembic",
    "description": "<p>Alembic is a database migrations tool written by the author of SQLAlchemy.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/sqlalchemy/alembic",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/sqlalchemy/alembic/blob/main/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/sqlalchemy/alembic\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.15.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "487c2acea1c39d9369c44367f9fbc87fe6d582abeb9ce1ebb76b36a4db1ee295"
          }
        ]
      }
    }
  },
  "jupyterhub-nativeauthenticator": {
    "image_name": "jupyterhub-nativeauthenticator",
    "alt_image_name": "jupyterhub-nativeauthenticator",
    "description": "<p>This is a relatively simple authenticator for small or medium-sized JupyterHub applications. Signup and authentication are implemented as native to JupyterHub without relying on external services.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyterhub/nativeauthenticator",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyterhub/nativeauthenticator/blob/main/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://native-authenticator.readthedocs.io/en/stable/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.2.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "43230ad49c6cf756149321173d9265120e97ef0d8c69e5b72541843f7a64f2b2"
          }
        ]
      }
    }
  },
  "qtpy": {
    "image_name": "qtpy",
    "alt_image_name": "qtpy",
    "description": "<p>QtPy is a small abstraction layer that lets you write applications using a single API call to either PyQt or PySide.</p>\n\n<p>It provides support for <code>PyQt5</code>, <code>PyQt6</code>, <code>PySide6</code>, <code>PySide2</code> using the Qt5 layout (where the QtGui module has been split into QtGui and QtWidgets).</p>\n\n<p>Basically, you can write your code as if you were using PyQt or PySide directly, but import Qt modules from <code>qtpy</code> instead of <code>PyQt5</code>, <code>PyQt6</code>, <code>PySide2</code>, or <code>PySide6</code>.</p>\n\n<p>Accordingly, when porting code between different Qt bindings (PyQt vs PySide) or Qt versions (Qt5 vs Qt6), QtPy makes this much more painless, and allows you to easily and incrementally transition between them. QtPy handles incompatibilities and differences between bindings or Qt versions for you while keeping your project running, so you can focus more on your own code and less on keeping track of supporting every Qt version and binding. Furthermore, when you do want to upgrade or support new bindings, it allows you to update your project module by module rather than all at once.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/spyder-ide/qtpy",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/spyder-ide/qtpy/blob/master/LICENSE.txt",
    "usage_notes": "<p>For examples of usage, refer to projects using QtPy such as <a href=\"https://github.com/git-cola/git-cola/issues/232\">git-cola</a>.</p>",
    "tags": "programming_tools graphics",
    "versions": {
      "2.4.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "3645be3cfdf12fb8737c86eb7c03d8a335420d17e2ede501014f62fe60a21850"
          }
        ]
      }
    }
  },
  "executing": {
    "image_name": "executing",
    "alt_image_name": "executing",
    "description": "<p>Get the currently executing AST node of a frame, and other information. This mini-package lets you get information about what a frame is currently doing, particularly the AST node being executed.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/alexmojaki/executing",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/alexmojaki/executing/blob/master/LICENSE.txt",
    "usage_notes": "<h3>Getting the AST node:</h3>\n\n<pre><code>\nimport executing<br>\n<br>\nnode = executing.Source.executing(frame).node<br>\n</code></pre>\n\n<p>Then <code>node</code> will be an AST node (from the <code>ast</code> standard library module) or None if the node couldn't be identified (which may happen often and should always be checked).</p>\n\n<p><code>node</code> will always be the same instance for multiple calls with frames at the same point of execution.</p>\n\n<p>If you have a traceback object, pass it directly to <code>Source.executing()</code> rather than the <code>tb_frame</code> attribute to get the correct node.</p>\n\n<h3>Getting the source code of the node:</h3>\n\n<p>For this you will need to separately install the <code>asttokens</code> library, then obtain an <code>ASTTokens</code> object:</p>\n\n<pre><code>\nexecuting.Source.executing(frame).source.asttokens()<br>\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>\nexecuting.Source.for_frame(frame).asttokens()<br>\n</code></pre>\n\n<p>or use one of the convenience methods:</p>\n\n<pre><code>\nexecuting.Source.executing(frame).text()<br>\nexecuting.Source.executing(frame).text_range()<br>\n</code></pre>\n\n<h3>Getting the __qualname__ of the current function:</h3>\n\n<pre><code>\nexecuting.Source.executing(frame).code_qualname()<br>\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>\nexecuting.Source.for_frame(frame).code_qualname(frame.f_code)<br>\n</code></pre>\n\n<h3>The Source class:</h3>\n\n<p>Everything goes through the <code>Source</code> class. Only one instance of the class is created for each filename. Subclassing it to add more attributes on creation or methods is recommended. The classmethods such as <code>executing</code> will respect this. See the source code and docstrings for more detail.</p>\n",
    "tags": "programming_tools",
    "versions": {
      "1.2.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "0314a69e37426e3608aada02473b4161d4caf5a4b244d1d0c48072b8fee7bacc"
          }
        ]
      }
    }
  },
  "rfc3339-validator": {
    "image_name": "rfc3339-validator",
    "alt_image_name": "rfc3339-validator",
    "description": "<p>A pure python RFC3339 validator.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/naimetti/rfc3339-validator",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/naimetti/rfc3339-validator/blob/master/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/naimetti/rfc3339-validator\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.1.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "5b9bae7fb739b5c6335723a3e97a843b25a938f621b58f6b3eff2a7d272e594e"
          }
        ]
      }
    }
  },
  "flask-restful": {
    "image_name": "Flask-RESTful",
    "alt_image_name": "Flask-RESTful",
    "description": "<p>Flask-RESTful provides the building blocks for creating a great REST API.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/flask-restful/flask-restful",
    "site_name_license": "BSD 3",
    "link_to_license": "https://github.com/flask-restful/flask-restful/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"http://flask-restful.readthedocs.io/\">readthedocs.io</a>.</p>",
    "tags": "web",
    "versions": {
      "0.3.9": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "d0a42c2a37cc486511f5bc7eaa291aaf0f679ffb0eac7ed0fc096629bb921325"
          }
        ]
      }
    }
  },
  "distlib": {
    "image_name": "distlib",
    "alt_image_name": "distlib",
    "description": "<p>Distlib is a library which implements low-level functions that relate to packaging and distribution of Python software.   </p>\n",
    "site_name": "github.com",
    "link_to_site": "https://github.com/pypa/distlib",
    "site_name_license": "Python Software Foundation",
    "link_to_license": "https://github.com/pypa/distlib/blob/master/LICENSE.txt",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://distlib.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "0.3.8": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "034db59a0b96f8ca18035f36290806a9a6e6bd9d1ff91e45a7f172eb17e51784"
          }
        ]
      }
    }
  },
  "ibm-db": {
    "image_name": "ibm-db",
    "alt_image_name": "ibm-db",
    "description": "\n<p>Provides Python interface for connecting to IBM Db2 for LUW, IBM Informix and IBM Db2 for z/OS. </p>",
    "site_name": "github.com/ibm-z-oss-oda/python-ibmdb",
    "link_to_site": "https://github.com/ibm-z-oss-oda/python-ibmdb",
    "site_name_license": "Apache License 2.0",
    "link_to_license": "https://github.com/ibm-z-oss-oda/python-ibmdb/blob/master/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/ibmdb/python-ibmdb\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "3.2.6": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "8e303cdda90253f3ad3d14bd40207b06de54cfff9eb12e31b24ea941fc516e20"
          },
          {
            "py_version": "cp312",
            "sha256": "240388db4a3a5a1698cf067092698fd32d9fc5e33b56814555404c8f387374d0"
          },
          {
            "py_version": "cp313",
            "sha256": "9f8f291e3d771fec17db325af4b4d0c03acd238070d943587162afb737c57ad6"
          }
        ]
      }
    }
  },
  "oauthlib": {
    "image_name": "oauthlib",
    "alt_image_name": "oauthlib",
    "description": "<p>OAuthLib is a framework which implements the logic of OAuth1 or OAuth2 without assuming a specific HTTP request object or web framework.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/oauthlib/oauthlib",
    "site_name_license": "BSD 3",
    "link_to_license": "https://github.com/oauthlib/oauthlib/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/oauthlib/oauthlib\">github.com</a>.</p>",
    "tags": "security web",
    "versions": {
      "3.2.2.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "e3d1cacfef9ef237752a2ffba7aafdaa5194259d1833f0420c7b4d6ec10bf605"
          }
        ]
      }
    }
  },
  "toolz": {
    "image_name": "toolz",
    "alt_image_name": "toolz",
    "description": "<p>Toolz provides a set of utility functions for iterators, functions, and dictionaries. These functions interoperate well and form the building blocks of common data analytic operations. They extend the standard libraries itertools and functools and borrow heavily from the standard libraries of contemporary functional languages.</p>\n\n<p>Toolz provides a suite of functions which have the following functional virtues:</p>\n<ul>\n    <li>Composable: They interoperate due to their use of core data structures.</li>\n    <li>Pure: They don\u2019t change their inputs or rely on external state.</li>\n    <li>Lazy: They don\u2019t run until absolutely necessary, allowing them to support large streaming data sets.</li>\n</ul>\n<p>Toolz functions are pragmatic. They understand that most programmers have deadlines.</p>\n<ul>\n    <li>Low Tech: They\u2019re just functions, no syntax or magic tricks to learn</li>\n    <li>Tuned: They\u2019re profiled and optimized</li>\n    <li>Serializable: They support common solutions for parallel computing</li>\n</ul>\n<p>This gives developers the power to write powerful programs to solve complex problems with relatively simple code. This code can be easy to understand without sacrificing performance. Toolz enables this approach, commonly associated with functional programming, within a natural Pythonic style suitable for most developers.</p>",
    "site_name": "readthedocs.io",
    "link_to_site": "https://toolz.readthedocs.io/en/latest/",
    "site_name_license": "here",
    "link_to_license": "https://github.com/pytoolz/toolz/blob/master/LICENSE.txt",
    "usage_notes": "<p>This example builds a standard wordcount function from pieces within <code>toolz</code>:</p>\n<pre><code>\n>>> def stem(word):<br>\n...     \"\"\" Stem word to primitive form \"\"\"<br>\n...     return word.lower().rstrip(\",.!:;'-\\\"\").lstrip(\"'\\\"\")<br>\n<br>\n>>> from toolz import compose, frequencies<br>\n>>> from toolz.curried import map<br>\n>>> wordcount = compose(frequencies, map(stem), str.split)<br>\n<br>\n>>> sentence = \"This cat jumped over this other cat!\"<br>\n>>> wordcount(sentence)<br>\n{'this': 2, 'cat': 2, 'jumped': 1, 'over': 1, 'other': 1}<br>\n</code></pre>\n<p>Full documentation is available on <a href=\"https://toolz.readthedocs.io/en/latest/\">readthedocs.io</a></p>",
    "tags": "utility",
    "versions": {
      "0.12.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "50aedb1be0b4d951a29a9d17aa17d649cf37131c72e47c4d0628c2b824218fac"
          }
        ]
      }
    }
  },
  "uwsgi": {
    "image_name": "uwsgi",
    "alt_image_name": "uwsgi",
    "description": "<p>The uWSGI project aims at developing a full stack for building hosting services.</p>\n\n<p>Application servers (for various programming languages and protocols), proxies, process managers and monitors are all implemented using a common api and a common configuration style.</p>\n\n<p>Thanks to its pluggable architecture it can be extended to support more platforms and languages.</p>\n\n<p>Currently, you can write plugins in C, C++ and Objective-C.</p>\n\n<p>The \u201cWSGI\u201d part in the name is a tribute to the namesake Python standard, as it has been the first developed plugin for the project.</p>\n\n<p>Versatility, performance, low-resource usage and reliability are the strengths of the project (and the only rules followed).</p>",
    "site_name": "readthedocs.io",
    "link_to_site": "https://uwsgi-docs.readthedocs.io/en/latest/",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/unbit/uwsgi/blob/master/LICENSE",
    "usage_notes": "<p>Please refer to documentation <a href=\"https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html\">here</a>.</p>",
    "tags": "web",
    "versions": {
      "2.0.29": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "3e3090dbcc251a10790d226d71fe736984c70b6a205b79f798a58c9c995667b6"
          }
        ]
      }
    }
  },
  "statsmodels": {
    "image_name": "statsmodels",
    "alt_image_name": "statsmodels",
    "description": "<p>statsmodels is a Python package that provides a complement to scipy for statistical computations including descriptive statistics and estimation and inference for statistical models. An extensive list of result statistics are available for each estimator.</p>",
    "site_name": "statsmodels.org",
    "link_to_site": "https://www.statsmodels.org/stable/index.html",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/statsmodels/statsmodels/blob/main/LICENSE.txt",
    "usage_notes": "<p>Extensive usage documentation is available at <a href=\"https://www.statsmodels.org/stable/user-guide.html\">statsmodels.org</a>.</p>",
    "tags": "math",
    "versions": {
      "0.13.5.post0": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "e1164462fbae42959734942beeb2d69ebc67be5eefdb22dee7dfb3043c1a7bac"
          }
        ]
      }
    }
  },
  "cffi": {
    "image_name": "cffi",
    "alt_image_name": "cffi",
    "description": "<p>C Foreign Function Interface for Python. Interact with almost any C code from Python, based on C-like declarations that you can often copy-paste from header files or documentation.</p>\n",
    "site_name": "readthedocs.io",
    "link_to_site": "https://cffi.readthedocs.io/en/latest/",
    "site_name_license": "MIT",
    "link_to_license": "https://foss.heptapod.net/pypy/cffi/-/blob/branch/default/LICENSE",
    "usage_notes": "<p>Full documentation is available on <a href=\"https://cffi.readthedocs.io/en/latest/overview.html\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "1.17.1": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "26f9c6753f36f0b75d971f3f05027f921ee071273c8a56b9fd05a0dc8e10a49c"
          }
        ]
      }
    }
  },
  "gunicorn": {
    "image_name": "gunicorn",
    "alt_image_name": "gunicorn",
    "description": "<p>Gunicorn \u2018Green Unicorn\u2019 is a Python WSGI HTTP Server for UNIX. </p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ibm-z-oss-oda/gunicorn",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/gunicorn/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://docs.gunicorn.org/en/stable/\">gunicorn.org</a>.</p>",
    "tags": "web",
    "versions": {
      "23.0.0.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "c90ddff765d7ea7ea8ff1ff517dad22ed6db8cb8fa91574e6c67c690c9680416"
          }
        ]
      }
    }
  },
  "idna": {
    "image_name": "idna",
    "alt_image_name": "idna",
    "description": "<p>Support for the Internationalised Domain Names in Applications (IDNA) protocol as specified in <a href=\"https://tools.ietf.org/html/rfc5891\">RFC 5891</a>. This is the latest version of the protocol and is sometimes referred to as \u201cIDNA 2008\u201d.</p>\n\n<p>This library also provides support for Unicode Technical Standard 46, <a href=\"https://unicode.org/reports/tr46/\">Unicode IDNA Compatibility Processing</a>.</p>\n\n<p>This acts as a suitable replacement for the \u201cencodings.idna\u201d module that comes with the Python standard library, but which only supports the older superseded IDNA specification <a href=\"https://tools.ietf.org/html/rfc3490\">(RFC 3490)</a>.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/kjd/idna",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/kjd/idna/blob/master/LICENSE.md",
    "usage_notes": "<p>For typical usage, the <code>encode</code> and <code>decode</code> functions will take a domain name argument and perform a conversion to A-labels or U-labels respectively.</p>\n<pre><code>\n&gt;&gt;&gt; import idna<br>\n&gt;&gt;&gt; idna.encode('\u30c9\u30e1\u30a4\u30f3.\u30c6\u30b9\u30c8')<br>\nb'xn--eckwd4c7c.xn--zckzah'<br>\n&gt;&gt;&gt; print(idna.decode('xn--eckwd4c7c.xn--zckzah'))<br>\n\u30c9\u30e1\u30a4\u30f3.\u30c6\u30b9\u30c8<br>\n</code></pre>\n\n<p>You may use the codec encoding and decoding methods using the idna.codec module:</p>\n<pre><code>\n&gt;&gt;&gt; import idna.codec<br>\n&gt;&gt;&gt; print('\u0434\u043e\u043c\u0435\u043d.\u0438\u0441\u043f\u044b\u0442\u0430\u043d\u0438\u0435'.encode('idna'))<br>\nb'xn--d1acufc.xn--80akhbyknj4f'<br>\n&gt;&gt;&gt; print(b'xn--d1acufc.xn--80akhbyknj4f'.decode('idna'))<br>\n\u0434\u043e\u043c\u0435\u043d.\u0438\u0441\u043f\u044b\u0442\u0430\u043d\u0438\u0435<br>\n</code></pre>\n\n<p>Conversions can be applied at a per-label basis using the ulabel or alabel functions if necessary:</p>\n<pre><code>\n>>> idna.alabel('\u6d4b\u8bd5')<br>\nb'xn--0zwm56d'<br>\n</code></pre>\n<p>Please refer to <a href=\"https://github.com/kjd/idna/blob/master/README.rst\">github</a> for further usage instructions.</p>",
    "tags": "languages utility",
    "versions": {
      "3.10.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "c00743b86354caf6caadf725ada5f265fd0119fac6435eb44fe586b062076e3f"
          }
        ]
      }
    }
  },
  "send2trash": {
    "image_name": "send2trash",
    "alt_image_name": "send2trash",
    "description": "<p>Send2Trash is a small package that sends files to the Trash (or Recycle Bin) <i>natively</i> and on <i>all platforms</i>. On OS X, it uses native <code>FSMoveObjectToTrashSync</code> Cocoa calls or can use pyobjc with NSFileManager. On Windows, it uses native IFileOperation call if on Vista or newer and pywin32 is installed or falls back to SHFileOperation calls. On other platforms, if PyGObject and GIO are available, it will use this. Otherwise, it will fallback to its own implementation of the <a href=\"http://freedesktop.org/wiki/Specifications/trash-spec/\">trash specifications</a> from freedesktop.org.</p>\n\n<p><code>ctypes</code> is used to access native libraries, so no compilation is necessary.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/arsenetar/send2trash",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/arsenetar/send2trash/blob/master/LICENSE",
    "usage_notes": "<pre><code>\n&gt;&gt;&gt; from send2trash import send2trash<br>\n&gt;&gt;&gt; send2trash('some_file')<br>\n&gt;&gt;&gt; send2trash(['some_file1', 'some_file2'])<br>\n</code></pre>\n\n<p>On Freedesktop platforms (Linux, BSD, etc.), you may not be able to efficiently trash some files. In these cases, an exception <code>send2trash.TrashPermissionError</code> is raised, so that the application can handle this case. This inherits from <code>PermissionError</code> (<code>OSError</code> on Python 2). Specifically, this affects files on a different device to the user\u2019s home directory, where the root of the device does not have a <code>.Trash</code> directory, and we don\u2019t have permission to create a <code>.Trash-$UID</code> directory.</p>\n\n<p>For any other problem, <code>OSError</code> is raised.</p>",
    "tags": "utility",
    "versions": {
      "1.8.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6a84ab3b7a0d2f8f078d3e4b5ac703f97b9d3ea75bbc006bd594f935871b17f1"
          }
        ]
      }
    }
  },
  "xlsxwriter": {
    "image_name": "xlsxwriter",
    "alt_image_name": "xlsxwriter",
    "description": "\n<p>A Python module for creating Excel XLSX files. </p>",
    "site_name": "github",
    "link_to_site": "https://github.com/ibm-z-oss-oda/XlsxWriter",
    "site_name_license": "BSD 2",
    "link_to_license": "https://github.com/ibm-z-oss-oda/XlsxWriter/blob/main/LICENSE.txt",
    "usage_notes": "<p>Documentation can be found on <a href=\"https://xlsxwriter.readthedocs.io/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "3.1.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9c41968409e7a1c41d4c1dcf91b62a442dbc1f6b55c56102b7e9d3bb8c243cbf"
          }
        ]
      }
    }
  },
  "pyasn1": {
    "image_name": "pyasn1",
    "alt_image_name": "pyasn1",
    "description": "<p>This is a free and open source implementation of ASN.1 types and codecs as a Python package. It has been first written to support particular protocol (SNMP) but then generalized to be suitable for a wide range of protocols based on <a href=\"https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-X.208-198811-W!!PDF-E&type=items\">ASN.1 specification</a>.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/etingof/pyasn1",
    "site_name_license": "BSD2",
    "link_to_license": "https://github.com/etingof/pyasn1/blob/master/LICENSE.rst",
    "usage_notes": "<p>With pyasn1 you can build Python objects from ASN.1 data structures. For example, the following ASN.1 data structure:</p>\n\n<pre><code>\nRecord ::= SEQUENCE {<br>\n  id        INTEGER,<br>\n  room  [0] INTEGER OPTIONAL,<br>\n  house [1] INTEGER DEFAULT 0<br>\n}<br>\n</code></pre>\n\n<p>Could be expressed in pyasn1 like this:</p>\n\n<pre><code>\nclass Record(Sequence):<br>\n    componentType = NamedTypes(<br>\n        NamedType('id', Integer()),<br>\n        OptionalNamedType(<br>\n            'room', Integer().subtype(<br>\n                implicitTag=Tag(tagClassContext, tagFormatSimple, 0)<br>\n            )<br>\n        ),<br>\n        DefaultedNamedType(<br>\n            'house', Integer(0).subtype(<br>\n                implicitTag=Tag(tagClassContext, tagFormatSimple, 1)<br>\n            )<br>\n        )<br>\n    )<br>\n</code></pre>\n\n<p>Refer to <a href=\"https://github.com/etingof/pyasn1/blob/master/README.md\">github</a> for more documentation.</p>",
    "tags": "security utility",
    "versions": {
      "0.4.9": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "4a19b29bbe3123a676df77cb0edafea7b8b6631bcf7c6e3121209f77f39688bf"
          }
        ]
      }
    }
  },
  "jupyter-events": {
    "image_name": "jupyter-events",
    "alt_image_name": "jupyter-events",
    "description": "<p>An event system for Jupyter Applications and extensions.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyter/jupyter_events",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyter/jupyter_events/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://jupyter-events.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.6.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "29f5de1e45f1617fd3aa7b532cb664e74d17ed04ee0dae9e6d5656343ba2642a"
          }
        ]
      }
    }
  },
  "jupyter-lsp": {
    "image_name": "jupyter-lsp",
    "alt_image_name": "jupyter-lsp",
    "description": "<p>Language Server Protocol integration for Jupyter(Lab).</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyter-lsp/jupyterlab-lsp",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyter-lsp/jupyterlab-lsp/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/jupyter-lsp/jupyterlab-lsp\">github.com</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "2.2.4.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9d2716525a33f65fe6d2c0f8a75156b1684517680d2e7e411cfd0779ebf42537"
          }
        ]
      }
    }
  },
  "pyzmq": {
    "image_name": "pyzmq",
    "alt_image_name": "pyzmq",
    "description": "<p>This package contains Python bindings for <a href=\"https://zeromq.org/\">\u00d8MQ</a>. \u00d8MQ is a lightweight and fast messaging implementation.</p>\n",
    "site_name": "readthedocs.io",
    "link_to_site": "https://pyzmq.readthedocs.io/en/latest/",
    "site_name_license": "here",
    "link_to_license": "https://github.com/zeromq/pyzmq/blob/main/COPYING.BSD",
    "usage_notes": "<p>For usage instructions, please refer to <a href=\"https://zguide.zeromq.org/\">zguide.zeromq.org</a>, which implements every example in pyzmq.</p>",
    "tags": "programming_tools web utility",
    "versions": {
      "25.1.2": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "ab0ad60d06dbdcd3a88157d91be1728f87928e9a4d38a851c862cb52b9e2f001"
          }
        ]
      }
    }
  },
  "jupyterhub": {
    "image_name": "jupyterhub",
    "alt_image_name": "jupyterhub",
    "description": "<p>Multi-user server for Jupyter notebooks. </p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyterhub/jupyterhub",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyterhub/jupyterhub/blob/main/COPYING.md",
    "usage_notes": "<p>To successfully start JupyterHub, you will need cryptography. However, cryptography is delivered by IBM Open Enterprise SDK for Python. In this way, you will need to install cryptography into your python virtual environment just by adding an option \"--system-site-packages\" in the following virtual environment creation command.</p>\n\n<pre><code>\npython3 -m venv --system-site-packages venv-userID <br>\n</code></pre>\n<hr>\n<p>For jupyterhub, the following new parameters are added to support ports range specification to replace the original random ports for new notebook servers.</p>\n<ul>\n <li>c.SimpleLocalProcessSpawner.starting_port</li>\n <li>c.SimpleLocalProcessSpawner.max_users</li>\n</ul>\n<p>For <b>c.SimpleLocalProcessSpawner.starting_port</b>, the default 0 means that a random port will be picked up. An Integer other than 0 means the exact starting port, which will be combined with max_users to provide a range of ports to be automatically selected.</p>\n<p><b>c.SimpleLocalProcessSpawner.max_users</b> is to set the max users allowed for accessing servers in JupyterHub. The default 0 means that there is no limitation. An Integer other than 0 means the exact allowed users, which will be combined with starting_port to provide a range of ports to be automatically selected.</p>\n<hr>\n<p>The following parameters are added to support global notebook configuration directory setting for jupyter_notebook_config.py, and support whether the already existed jupyter_notebook_config.py in the target directory is overwritten.</p>\n<ul>\n <li>c.Spawner.global_notebook_config_dir (to set the Path to the global jupyter_notebook_config.py, the default value is blank)</li>\n <li>c.SimpleLocalProcessSpawner.max_users (to set whether jupyter_notebook_config.py will be overwritten by the global notebook config file, the default value is False)</li>\n</ul>\n<hr>\n<p>The following parameter is added to support _BPX_JOBNAME setting for user to filter related newly spawned processes.</p>\n<ul>\n <li>c.Spawner._BPX_JOBNAME (to set the _BPX_JOBNAME environment variable for spawned processes, the default value is blank.)</li>\n</ul>\n<hr>\n<p>More information is available on <a href=\"https://jupyterhub.readthedocs.io/\">readthedocs.io</a>.</p>",
    "tags": "utility web",
    "versions": {
      "4.1.5.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "c1656ef90ccb88d8d1a58ff0fe157f3d56f98a67be023d6c7dd17cea6bc56cbb"
          }
        ]
      }
    }
  },
  "asttokens": {
    "image_name": "asttokens",
    "alt_image_name": "asttokens",
    "description": "\n<p>The <code>asttokens</code> module annotates Python abstract syntax trees (ASTs) with the positions of tokens and text in the source code that generated them.</p>\n\n<p>It makes it possible for tools that work with logical AST nodes to find the particular text that resulted in those nodes, for example for automated refactoring or highlighting.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/gristlabs/asttokens",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/gristlabs/asttokens/blob/master/LICENSE",
    "usage_notes": "\n<p>ASTTokens can annotate both trees built by <a href=\"https://docs.python.org/2/library/ast.html\">ast</a>, AND those built by <a href=\"https://github.com/PyCQA/astroid\">astroid</a>.</p>\n\n<p>Here\u2019s an example:</p>\n\n<pre><code>\nimport asttokens, ast<br>\nsource = \"Robot('blue').walk(steps=10*n)\"<br>\natok = asttokens.ASTTokens(source, parse=True)<br>\n</code></pre>\n\n<p>Once the tree has been marked, nodes get <code>.first_token</code>, <code>.last_token</code> attributes, and the <code>ASTTokens</code> object offers helpful methods:</p>\n\n<pre><code>\nattr_node = next(n for n in ast.walk(atok.tree) if isinstance(n, ast.Attribute))<br>\nprint(atok.get_text(attr_node))<br>\nstart, end = attr_node.last_token.startpos, attr_node.last_token.endpos<br>\nprint(atok.text[:start] + 'RUN' + atok.text[end:])<br>\n</code></pre>\n\n<p>Which produces this output:</p>\n\n<pre><code>\nRobot('blue').walk<br>\nRobot('blue').RUN(steps=10*n)<br>\n</code></pre>\n\n<p>The <code>ASTTokens</code> object also offers methods to walk and search the list of tokens that make up the code (or a particular AST node), which is more useful and powerful than dealing with the text directly.</p>\n\n<p>Refer to <a href=\"https://asttokens.readthedocs.io/en/latest/api-index.html\">readthedocs.io</a> for further reference.</p>",
    "tags": "programming_tools",
    "versions": {
      "3.0.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "e755b5a8be7b49aed61fcdb9fcdd659f224549de1c51c2e560eb10cd9fe94021"
          }
        ]
      }
    }
  },
  "setuptools": {
    "image_name": "setuptools",
    "alt_image_name": "setuptools",
    "description": "<p><code>setuptools</code> comprises a useful component for <a href=\"https://packaging.python.org/en/latest/tutorials/installing-packages/#ensure-pip-setuptools-and-wheel-are-up-to-date\">Python Packaging / Package Management</a> along with <code>pip</code> and <code>wheel</code>.</p>\n\n<p>Setuptools is a fully-featured, actively-maintained, and stable library designed to facilitate packaging Python projects.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/pypa/setuptools",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/pypa/setuptools/blob/main/LICENSE",
    "usage_notes": "<p>For basic use of setuptools, you will need a <code>pyproject.toml</code> with the exact following info, which declares you want to use <code>setuptools</code> to package your project:</p>\n\n<pre><code>\n[build-system]<br>\nrequires = [\"setuptools\"]<br>\nbuild-backend = \"setuptools.build_meta\"[build-system]<br>\nrequires = [\"setuptools\"]<br>\nbuild-backend = \"setuptools.build_meta\"<br>\n</code></pre>\n\n<p>Then, you will need to specify your package information such as metadata, contents, dependencies, etc.</p>\n\n<p>Setuptools currently supports configurations from either <code>setup.cfg</code>, <code>setup.py</code> or <code>pyproject.toml</code> files, however, configuring new projects via setup.py is discouraged.</p>\n\n<p>The following example demonstrates a minimum configuration: </p>\n\n<h4>setup.cfg</h4>\n\n<pre><code>\n[metadata]<br>\nname = mypackage<br>\nversion = 0.0.1<br>\n<br>\n[options]<br>\npackages = mypackage<br>\ninstall_requires =<br>\n    requests<br>\n    importlib-metadata; python_version &lt; \"3.8\"<br>\n</code></pre>\n\n<h4>setup.py</h4>\n\n<pre><code>\nfrom setuptools import setup<br>\n<br>\nsetup(<br>\n    name='mypackage',<br>\n    version='0.0.1',<br>\n    packages=['mypackage'],<br>\n    install_requires=[<br>\n        'requests',<br>\n        'importlib-metadata; python_version == \"3.8\"',<br>\n    ],<br>\n)<br>\n</code></pre>\n\n<p>This is what your project would look like:</p>\n\n<pre><code>\n~/mypackage/<br>\n    pyproject.toml<br>\n    setup.cfg # or setup.py<br>\n    mypackage/__init__.py<br>\n</code></pre>\n\n<p>Then, you need a builder, such as <a href=\"https://pypa-build.readthedocs.io/en/latest/index.html\">PyPA build</a>. After downloading it, invoke the builder:</p>\n\n<pre><code>\npython -m build<br>\n</code></pre>\n\n<p>You now have your distribution ready!</p>\n\n<p>Full documentation can be found on <a href=\"https://setuptools.pypa.io/en/latest/userguide/quickstart.html\">the official guide</a>.</p>",
    "tags": "utility programming_tools",
    "versions": {
      "80.9.0.post20250718": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "99ba32cbd30f13494717fefbdb104f2d573a7a85235d9e4ac5fa39ce99d21499"
          }
        ]
      }
    }
  },
  "typing-extensions": {
    "image_name": "typing-extensions",
    "alt_image_name": "typing-extensions",
    "description": "\n<p>Backported and experimental type hints for Python  </p>",
    "site_name": "github",
    "link_to_site": "https://github.com/ibm-z-oss-oda/typing_extensions",
    "site_name_license": "OSI PSFL",
    "link_to_license": "https://github.com/ibm-z-oss-oda/typing_extensions/blob/main/LICENSE",
    "usage_notes": "<p>Documentation can be found on <a href=\"https://typing-extensions.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "4.13.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "c5801e35676e63a32c514ec7deca65628eb0a2b2f6b33cc13f8f0b37fc3645d1"
          }
        ]
      }
    }
  },
  "virtualenv": {
    "image_name": "virtualenv",
    "alt_image_name": "virtualenv",
    "description": "<p>A tool for creating isolated virtual python environments. </p>",
    "site_name": "https://github.com/ibm-z-oss-oda/virtualenv",
    "link_to_site": "https://github.com/ibm-z-oss-oda/virtualenv",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/virtualenv/blob/main/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://virtualenv.pypa.io/en/latest/\">pypa.io</a>.</p>",
    "tags": "utility programming_tools",
    "versions": {
      "20.29.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "0f7f4ed2a6ba42fdd4cb39a887f5d9d4316fcd17b8ca13b5037837358396a364"
          }
        ]
      }
    }
  },
  "pexpect": {
    "image_name": "pexpect",
    "alt_image_name": "pexpect",
    "description": "<p>Pexpect is a pure Python module for spawning child applications; controlling them; and responding to expected patterns in their output. Pexpect works like Don Libes\u2019 Expect. Pexpect allows your script to spawn a child application and control it as if a human were typing commands.</p>\n\n<p>Pexpect can be used for automating interactive applications such as ssh, ftp, passwd, telnet, etc. It can be used to a automate setup scripts for duplicating software package installations on different servers. It can be used for automated software testing. Pexpect is in the spirit of Don Libes\u2019 Expect, but Pexpect is pure Python.</p>\n\n<p>The main features of Pexpect require the pty module in the Python standard library, which is only available on Unix-like systems. Some features\u2014waiting for patterns from file descriptors or subprocesses\u2014are also available on Windows.</p>",
    "site_name": "readthedocs.io",
    "link_to_site": "https://pexpect.readthedocs.io/en/stable/",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/pexpect/pexpect/blob/master/LICENSE",
    "usage_notes": "<p>Full documentation should be referenced at <a href=\"https://pexpect.readthedocs.io/en/stable/index.html\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "4.8.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "949992575485df41d6179996a0e2a3caa447d827db936ea97b8ef27a688c3bea"
          }
        ]
      }
    }
  },
  "jsonschema": {
    "image_name": "jsonschema",
    "alt_image_name": "jsonschema",
    "description": "<p>jsonschema is an implementation of the <a href=\"https://json-schema.org/\">JSON Schema</a> specification for Python.</p>\n\n<p>JSON Schema is a vocabulary that allows you to annotate and validate JSON documents. It provides several benefits:</p>\n\n<ul>\n<li>Describes your existing data format(s).</li>\n<li>Provides clear human- and machine- readable documentation.</li>\n<li>Validates data which is useful for:<br>\n- Automated testing.<br>\n- Ensuring quality of client submitted data.</li>\n</ul>",
    "site_name": "github",
    "link_to_site": "https://github.com/python-jsonschema/jsonschema",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/python-jsonschema/jsonschema/blob/main/COPYING",
    "usage_notes": "<p>The package can be used like this - here's an example of the <code>validate</code> method.</p>\n\n<pre><code>\nfrom jsonschema import validate<br>\n<br>\n# A sample schema, like what we'd get from json.load()<br>\n<br>\nschema = {<br>\n<br>\n    \"type\" : \"object\",<br>\n<br>\n    \"properties\" : {<br>\n<br>\n        \"price\" : {\"type\" : \"number\"},<br>\n<br>\n        \"name\" : {\"type\" : \"string\"},<br>\n<br>\n    },<br>\n<br>\n}<br>\n<br>\n# If no exception is raised by validate(), the instance is valid.<br>\n<br>\nvalidate(instance={\"name\" : \"Eggs\", \"price\" : 34.99}, schema=schema)<br>\n<br>\nvalidate(<br>\n<br>\n    instance={\"name\" : \"Eggs\", \"price\" : \"Invalid\"}, schema=schema,<br>\n<br>\n)            <br>\n</code></pre>\n<br>\n<pre><code>\nTraceback (most recent call last):<br>\n    ...<br>\nValidationError: 'Invalid' is not of type 'number'<br>\n</code></pre>\n\n\n<p>Please access <a href=\"https://python-jsonschema.readthedocs.io/en/latest/\">readthedocs.io</a> for further usage instructions.</p>",
    "tags": "utility",
    "versions": {
      "4.17.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "a870ad254da1a8ca84b6a2905cac29d265f805acc57af304784962a2aa6508f6"
          }
        ]
      }
    }
  },
  "itsdangerous": {
    "image_name": "itsdangerous",
    "alt_image_name": "itsdangerous",
    "description": "\n<p>\"\u2026 so better sign this\"</p>\n\n<p>Various helpers to pass data to untrusted environments and to get it back safe and sound. Data is cryptographically signed to ensure that a token has not been tampered with.</p>\n\n<p>It\u2019s possible to customize how data is serialized. Data is compressed as needed. A timestamp can be added and verified automatically while loading a token.</p>\n",
    "site_name": "palletsprojects.com/p/itsdangerous",
    "link_to_site": "https://palletsprojects.com/p/itsdangerous/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/pallets/itsdangerous/blob/main/LICENSE.rst",
    "usage_notes": "\n<p>A Simple Example:<br>\n\nHere\u2019s how you could generate a token for transmitting a user\u2019s id and name between web requests.</p>\n\n<p><code>\nfrom itsdangerous import URLSafeSerializer<br>\nauth_s = URLSafeSerializer(\"secret key\", \"auth\")<br>\ntoken = auth_s.dumps({\"id\": 5, \"name\": \"itsdangerous\"})<br>\n<br>\nprint(token)<br>\n# eyJpZCI6NSwibmFtZSI6Iml0c2Rhbmdlcm91cyJ9.6YP6T0BaO67XP--9UzTrmurXSmg<br>\n<br>\ndata = auth_s.loads(token)<br>\nprint(data[\"name\"])<br>\n# itsdangerous<br>\n</code></p>\n<p>See the <a href=\"https://itsdangerous.palletsprojects.com/en/2.1.x/\">package documentation</a> for more information.</p>",
    "tags": "security",
    "versions": {
      "2.2.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "2beff36d48b5322a97b38764560dc43a3c2c5d8b0910ce02b89cbaca2399f535"
          }
        ]
      }
    }
  },
  "jupyterlab": {
    "image_name": "jupyterlab",
    "alt_image_name": "jupyterlab",
    "description": "<p>An extensible environment for interactive and reproducible computing, based on the Jupyter Notebook and Architecture.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyterlab/jupyterlab",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyterlab/jupyterlab/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://jupyterlab.readthedocs.io/en/stable/\">readthedocs.io</a>.</p>",
    "tags": "utility web",
    "versions": {
      "4.1.2.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "2463c368d7d3cdfc87dcebf0bc38bc0cc904a62c137cbbc78978a09b51f66ef0"
          }
        ]
      }
    }
  },
  "tornado": {
    "image_name": "tornado",
    "alt_image_name": "tornado",
    "description": "<p>Tornado is a Python web framework and asynchronous networking library, originally developed at <a href=\"https://en.wikipedia.org/wiki/FriendFeed\">FriendFeed</a>. By using non-blocking network I/O, Tornado can scale to tens of thousands of open connections, making it ideal for <a href=\"https://en.wikipedia.org/wiki/Push_technology#Long_polling\">long polling</a>, <a href=\"https://en.wikipedia.org/wiki/WebSocket\">WebSockets</a>, and other applications that require a long-lived connection to each user.</p>",
    "site_name": "tornadoweb.org",
    "link_to_site": "https://www.tornadoweb.org/en/stable/",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/tornadoweb/tornado/blob/master/LICENSE",
    "usage_notes": "<p>Here is a simple \u201cHello, world\u201d example web app for Tornado:</p>\n<pre><code>\nimport tornado.ioloop<br>\nimport tornado.web<br>\n<br>\nclass MainHandler(tornado.web.RequestHandler):<br>\n    def get(self):<br>\n        self.write(\"Hello, world\")<br>\n<br>\ndef make_app():<br>\n    return tornado.web.Application([<br>\n        (r\"/\", MainHandler),<br>\n    ])<br>\n<br>\nif __name__ == \"__main__\":<br>\n    app = make_app()<br>\n    app.listen(8888)<br>\n    tornado.ioloop.IOLoop.current().start()<br>\n</code></pre>\n<p>This example does not use any of Tornado\u2019s asynchronous features; for that see this <a href=\"https://github.com/tornadoweb/tornado/tree/stable/demos/chat\">simple chat room</a> from Github. Documentation and usage notes for this package can be found on the <a href=\"https://www.tornadoweb.org/en/stable/guide.html\">user's guide</a>.</p>",
    "tags": "web",
    "versions": {
      "6.5.1": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "6013bf2f63217587fe401f06baf446aca537246d64941f28861fc9088568b0fe"
          },
          {
            "py_version": "cp312",
            "sha256": "6eeaa3fa9635bfd9f2c5b246807749db2290e54ca3d212facc3a82cf9aecf59a"
          },
          {
            "py_version": "cp313",
            "sha256": "765a1f1c964c6be43f204c3c81ecc848352b827d6e75acd82640de0467239aa5"
          }
        ]
      }
    }
  },
  "imageio": {
    "image_name": "imageio",
    "alt_image_name": "imageio",
    "description": "<p>Imageio is a Python library that provides an easy interface to read and write a wide range of image data, including animated images, volumetric data, and scientific formats. It is cross-platform, runs on Python 3.5+, and is easy to install.<p>",
    "site_name": "imageio.readthedocs.io",
    "link_to_site": "https://imageio.readthedocs.io/",
    "site_name_license": "BSD2",
    "link_to_license": "https://github.com/imageio/imageio/blob/master/LICENSE",
    "usage_notes": "<p>Example of Usage to Read / Write Images:</p>\n<p>\n<code>\n>>> import imageio<br>\n>>> im = imageio.imread('imageio:astronaut.png')<br>\n>>> im.shape  # im is a numpy array<br>\n(512, 512, 3)<br>\n>>> imageio.imwrite('astronaut-gray.jpg', im[:, :, 0])<br>\n</code>\n</p>\n<p>See the <a href=\"https://imageio.readthedocs.io/en/stable/reference/index.html\">API Reference</a> or <a href=\"https://imageio.readthedocs.io/en/stable/examples.html\">examples</a> for more information.</p>",
    "tags": "graphics",
    "versions": {
      "2.37.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "e8d516924400f654e466b1b9af7b96483ec23181a56e0b374c72bac6eb570ae7"
          }
        ]
      }
    }
  },
  "async-lru": {
    "image_name": "async-lru",
    "alt_image_name": "async-lru",
    "description": "<p>This package is a port of Python's built-in functools.lru_cache function for asyncio.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/aio-libs/async-lru",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/aio-libs/async-lru/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/aio-libs/async-lru\">github.com</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "2.0.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "03b9c4c98c517cc797f1ef5ec6da5540a0b409157a5c6c24c43d84f20d764eae"
          }
        ]
      }
    }
  },
  "pycparser": {
    "image_name": "pycparser",
    "alt_image_name": "pycparser",
    "description": "<p>\npycparser is a complete parser of the C language, written in pure Python using the PLY parsing library. It parses C code into an AST and can serve as a front-end for C compilers or analysis tools.\n</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/eliben/pycparser",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/eliben/pycparser/blob/master/LICENSE",
    "usage_notes": "<p>See <a href=\"https://github.com/eliben/pycparser#using\">github</a> for usage instructions.</p>",
    "tags": "languages programming_tools",
    "versions": {
      "2.20": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "065c227e57443b8c3e8445071454286947ac1342e7e80cb37070cde8710398e2"
          }
        ]
      }
    }
  },
  "pyrsistent": {
    "image_name": "pyrsistent",
    "alt_image_name": "pyrsistent",
    "description": "<p>Pyrsistent is a number of persistent collections (by some referred to as functional data structures). Persistent in the sense that they are immutable.</p>\n\n<p>All methods on a data structure that would normally mutate it instead return a new copy of the structure containing the requested updates. The original structure is left untouched.</p>\n\n<p>This will simplify the reasoning about what a program does since no hidden side effects ever can take place to these data structures. You can rest assured that the object you hold a reference to will remain the same throughout its lifetime and need not worry that somewhere five stack levels below you in the darkest corner of your application someone has decided to remove that element that you expected to be there.</p>\n\n<p>Pyrsistent is influenced by persistent data structures such as those found in the standard library of Clojure. The data structures are designed to share common elements through path copying. It aims at taking these concepts and make them as pythonic as possible so that they can be easily integrated into any python program without hassle.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/tobgu/pyrsistent/",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/tobgu/pyrsistent/blob/master/LICENSE.mit",
    "usage_notes": "<p>Pyrsistent implements a number of different collection types and key features. Documentation should be referenced at <a href=\"https://pyrsistent.readthedocs.io/en/latest/intro.html\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "0.19.3.post0": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "ace53573214e6240daad807be3b583cbc97d50d0bf1a53b4afe3b6ddd5b3defb"
          },
          {
            "py_version": "cp312",
            "sha256": "22f790e68a7e48441b70edf70f6e2c28fc1001f38c84ff4c6e5c73ee3fb4e359"
          },
          {
            "py_version": "cp313",
            "sha256": "fc6705747066a9be78a1f7338b422432d33e30b4395ec1f9e512ad7fceb913be"
          }
        ]
      }
    }
  },
  "ibm-db-sa": {
    "image_name": "ibm-db-sa",
    "alt_image_name": "ibm-db-sa",
    "description": "\n<p>The IBM_DB_SA adapter provides the Python/SQLAlchemy interface to IBM Data Servers. </p>",
    "site_name": "github.com/ibm-z-oss-oda/python-ibmdbsa",
    "link_to_site": "https://github.com/ibm-z-oss-oda/python-ibmdbsa",
    "site_name_license": "Apache License 2.0",
    "link_to_license": "https://github.com/ibm-z-oss-oda/python-ibmdbsa/blob/master/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/ibmdb/python-ibmdbsa\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.4.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "a5ee925c9e346c0205f81227cfd96d8681897eaac6e7b45c4be2c82b5d09f355"
          }
        ]
      }
    }
  },
  "ruamel.yaml.clib": {
    "image_name": "ruamel.yaml.clib",
    "alt_image_name": "ruamel.yaml.clib",
    "description": "<p>ruamel.yaml.clib is the C based reader/scanner and emitter for ruamel.yaml</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ibm-z-oss-oda/ruamel.yaml.clib",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/ruamel.yaml.clib/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/ibm-z-oss-oda/ruamel.yaml.clib\">github.com</a>.</p>",
    "tags": "utility languages",
    "versions": {
      "0.2.12": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "b9ca0f6d092120512b738d36507b017633d1ec2c0b9ae55077fa18d7798a3479"
          },
          {
            "py_version": "cp312",
            "sha256": "5cff83272877caa4c39de8557f98d10657f1f65a38087b408311e2adf443396f"
          },
          {
            "py_version": "cp313",
            "sha256": "bc6ca39f2b46ddbd52fd8850ba6335f83d8c4b68cb4e02d591d6a15f251dd368"
          }
        ]
      }
    }
  },
  "flask-cors": {
    "image_name": "flask-cors",
    "alt_image_name": "flask-cors",
    "description": "<p>A Flask extension for handling Cross Origin Resource Sharing (CORS), making cross-origin AJAX possible.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ibm-z-oss-oda/flask-cors",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/flask-cors/blob/main/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://flask-cors.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "web",
    "versions": {
      "4.0.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "b8bf3f354884b3a8df35d3a44cc61d4e16ff7499b76427e3046634a5318aee8c"
          }
        ]
      }
    }
  },
  "argon2-cffi-bindings": {
    "image_name": "argon2-cffi-bindings",
    "alt_image_name": "argon2-cffi-bindings",
    "description": "\n<p>argon2-cffi-bindings provides low-level <a href=\"https://cffi.readthedocs.io/\">CFFI</a> bindings to the <a href=\"https://github.com/p-h-c/phc-winner-argon2\">Argon2</a> password hashing algorithm including a vendored version of them.</p>\n\n<p>If you want to hash passwords in an application, this package is not for you. Have a look at argon2-cffi with its high-level abstractions!</p>\n\n<p>These bindings have been extracted from <a href=\"https://argon2-cffi.readthedocs.io/\">argon2-cffi</a> and it remains its main consumer. However, they may be used by other packages that want to use the Argon2 library without dealing with C-related complexities.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/hynek/argon2-cffi-bindings",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/hynek/argon2-cffi-bindings/blob/main/LICENSE",
    "usage_notes": "\n<p>Since this package is intended to be an implementation detail, it uses a private module name to prevent your users from using it by accident.</p>\n\n<p>Therefore you have to import the symbols from <code>_argon2_cffi_bindings</code>:</p>\n\n<pre><code>\nfrom _argon2_cffi_bindings import ffi, lib<br>\n</code></pre>\n\n<p>Please refer to <a href=\"https://cffi.readthedocs.io/en/latest/using.html\">cffi</a> documentation on how to use the <code>ffi</code> and <code>lib</code> objects.</p>\n\n<p>The list of symbols that are provided can be found in the <a href=\"https://github.com/hynek/argon2-cffi-bindings/blob/main/src/_argon2_cffi_bindings/_ffi_build.py\">_ffi_build.py</a> file on github.</p>",
    "tags": "security",
    "versions": {
      "21.2.0.post0": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "9252cc8af1040a0348a69a7781d6b237496446a5f57c9494b65d2dc74c46f786"
          },
          {
            "py_version": "cp312",
            "sha256": "b6003de3b92fd63adc31fb06a22f8bfaca6b088b79085e217a1791d9d89257a8"
          },
          {
            "py_version": "cp313",
            "sha256": "f75efce253965555864156a9c5c33a59ad27bc4c37b248bc198a59e4e03b0bdf"
          }
        ]
      }
    }
  },
  "drain3": {
    "image_name": "drain3",
    "alt_image_name": "drain3",
    "description": "<p>Drain3 is an online log template miner that can extract templates (clusters) from a stream of log messages in a timely manner.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ibm-z-oss-oda/Drain3",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/Drain3/blob/master/LICENSE.txt",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/ibm-z-oss-oda/Drain3\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.9.11": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "eb96470c4a0a4449387f1291ab6f434dacd11164103cfc941c4e1c9409cd52c9"
          }
        ]
      }
    }
  },
  "fqdn": {
    "image_name": "fqdn",
    "alt_image_name": "fqdn",
    "description": "<p>This package validates Fully Qualified Domain Names (FQDNs) conforming to the Internet Engineering Task Force specification.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ypcrts/fqdn",
    "site_name_license": "MPL-2.0",
    "link_to_license": "https://github.com/ypcrts/fqdn/blob/develop/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/ypcrts/fqdn\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.5.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "f60e2ad966475c461bf2a98fe497bfc7b013a94887d8aa392cdedb1efe2dcbde"
          }
        ]
      }
    }
  },
  "libxml2": {
    "image_name": "libxml2",
    "alt_image_name": "libxml2",
    "description": "<p>Libxml2 is the XML C parser and toolkit developed for the Gnome project (but usable outside of the Gnome platform), it is free software available under the MIT License. XML itself is a metalanguage to design markup languages, i.e. text language where semantic and structure are added to the content using extra \"markup\" information enclosed between angle brackets. HTML is the most well-known markup language. Though the library is written in C a variety of language bindings make it available in other environments.</p>\n",
    "site_name": "gitlab.gnome.org/GNOME/libxml2",
    "link_to_site": "https://gitlab.gnome.org/GNOME/libxml2/-/wikis/home",
    "site_name_license": "MIT",
    "link_to_license": "https://gitlab.gnome.org/GNOME/libxml2/-/blob/master/Copyright",
    "usage_notes": "<p>A <a href=\"https://gnome.pages.gitlab.gnome.org/libxml2/devhelp/\">reference manual</a>, <a href=\"https://gnome.pages.gitlab.gnome.org/libxml2/tutorial/\">tutorial</a>, and <a href=\"https://gnome.pages.gitlab.gnome.org/libxml2/examples/\">a set of examples</a> are all available.</p>",
    "tags": "languages",
    "versions": {
      "2.14.2": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "85769f8a40f7868f120c1c3d964a7e6e0ea3764ef96509bb7398e8f09f004982"
          },
          {
            "py_version": "cp312",
            "sha256": "cd8d16ebfa85177b6c33e7ca2269189fafe552b935dce230952c0efafb39e054"
          },
          {
            "py_version": "cp313",
            "sha256": "fd79e5480be9f52e3a2ddadc756d1934bfdbc023a7bebcdc8d386eac2d0d6d25"
          }
        ]
      }
    }
  },
  "h11": {
    "image_name": "h11",
    "alt_image_name": "h11",
    "description": "<p>This is a little HTTP/1.1 library written from scratch in Python, heavily inspired by hyper-h2.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/python-hyper/h11",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/python-hyper/h11/blob/master/LICENSE.txt",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/python-hyper/h11\">github.com</a>.</p>",
    "tags": "web",
    "versions": {
      "0.14.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "cd51351488b66567ca5f2855aaf594c96f8d326656a616d2d44052bf4fd86e37"
          }
        ]
      }
    }
  },
  "jupyter": {
    "image_name": "jupyter",
    "alt_image_name": "jupyter",
    "description": "<p>Jupyter metapackage. Install all the Jupyter components in one go.</p>\n\n<p>This will install the Jupyter system, including the notebook, qtconsole, and the IPython kernel.</p>\n",
    "site_name": "jupyter.org",
    "link_to_site": "https://jupyter.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://opensource.org/licenses/BSD-3-Clause",
    "usage_notes": "<p>Documentation for each of the included components can be found on <a href=\"https://docs.jupyter.org/en/latest/\">jupyter.org</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "1.1.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "52dc0a9d37ea49189700cea3722afd89d5d781ace2c2954fae16e733b80c55ca"
          }
        ]
      }
    }
  },
  "backcall": {
    "image_name": "backcall",
    "alt_image_name": "backcall",
    "description": "<p>Specifications for callback functions passed in to an API</p>\n\n<P>If your code lets other people supply callback functions, it\u2019s important to specify the function signature you expect, and check that functions support that. Adding extra parameters later would break other peoples code unless you\u2019re careful.</p>\n\n<p>backcall provides a way of specifying the callback signature using a prototype function.</p>\n<p>If the callback takes fewer parameters than your prototype, backcall will wrap it in a function that discards the extra arguments. If the callback expects more arguments, a TypeError is thrown when it is registered.</p>\n\n",
    "site_name": "github",
    "link_to_site": "https://github.com/takluyver/backcall",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/takluyver/backcall/blob/master/LICENSE",
    "usage_notes": "<p>Example of specifying the callback signature using the prototype function:</p>\n<pre><code>\nfrom backcall import callback_prototype<br>\n<br>\n@callback_prototype<br>\ndef handle_ping(sender, delay=None):<br>\n    # Specify positional parameters without a default, and keyword<br>\n    # parameters with a default.<br>\n    pass<br>\n<br>\ndef register_ping_handler(callback):<br>\n    # This checks and adapts the function passed in:<br>\n    callback = handle_ping.adapt(callback)<br>\n    ping_callbacks.append(callback)<br>\n</code></pre>\n<p>For more details, see the <a href=\"https://backcall.readthedocs.io/en/latest/\">docs</a> or the <a href=\"https://nbviewer.org/github/takluyver/backcall/blob/master/Demo.ipynb\">Demo notebook</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.2.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "e0a55adb4d86fa337ea93cf29c79a27b063945a4f8d5ca16122cd0fa9fbc5222"
          }
        ]
      }
    }
  },
  "mistune": {
    "image_name": "mistune",
    "alt_image_name": "mistune",
    "description": "<p>A fast yet powerful Python Markdown parser with renderers and plugins, compatible with sane CommonMark rules.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/lepture/mistune",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/lepture/mistune/blob/master/LICENSE",
    "usage_notes": "<p>Mistune is easy to use. Here is how you can convert Markdown formatted text into HTML:</p>\n\n<pre><code>\nimport mistune<br>\n<br>\nmistune.html(YOUR_MARKDOWN_TEXT)<br>\n</code></pre>\n\n<p>The .html() methods has enabled all the features you might want by default:</p>\n\n<ul>\n<li>No escape of HTML tags</li>\n<li>With strikethough plugin</li>\n<li>With table plugin</li>\n<li>With footnote plugin</li>\n</ul>\n\n<p>Please refer to <a href=\"https://mistune.readthedocs.io/en/v2.0.2/guide.html\">readthedocs.io</a> for more information.</p>",
    "tags": "languages",
    "versions": {
      "2.0.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "fb1c77fba8078071b42325a4e1d103d450fdcd93cf8fd4d192ba9a31e7dee928"
          }
        ]
      }
    }
  },
  "setuptools-rust": {
    "image_name": "setuptools-rust",
    "alt_image_name": "setuptools-rust",
    "description": "<p>setuptools-rust is a plugin for setuptools to build Rust Python extensions implemented with PyO3 or rust-cpython.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/PyO3/setuptools-rust",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/PyO3/setuptools-rust/blob/main/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/PyO3/setuptools-rust\">github.com</a>.</p>",
    "tags": "utility programming_tools",
    "versions": {
      "1.11.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "33e2e7543e8336ed02862918e55088840d3b7d3bd6c757799f9800ce33300e70"
          }
        ]
      }
    }
  },
  "jupyter-kernel-gateway": {
    "image_name": "jupyter-kernel-gateway",
    "alt_image_name": "jupyter-kernel-gateway",
    "description": "<p>Jupyter Kernel Gateway is a web server that supports different mechanisms for spawning and communicating with Jupyter kernels. </p>",
    "site_name": "https://github.com/jupyter-server/kernel_gateway",
    "link_to_site": "https://github.com/jupyter-server/kernel_gateway",
    "site_name_license": "BSD 3",
    "link_to_license": "https://github.com/jupyter-server/kernel_gateway/blob/master/LICENSE.md",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://jupyter-kernel-gateway.readthedocs.io/en/latest/getting-started.html\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "2.5.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "735e4c5bf9678e4c6ccb2bf34dcca33c1a4f13599f5e2efe6f0cd0854bc8d3f2"
          }
        ]
      }
    }
  },
  "contourpy": {
    "image_name": "contourpy",
    "alt_image_name": "contourpy",
    "description": "<p>ContourPy is a Python library for calculating contours of 2D quadrilateral grids.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/contourpy/contourpy",
    "site_name_license": "BSD-3",
    "link_to_license": "https://github.com/contourpy/contourpy/blob/main/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://contourpy.readthedocs.io/en/v1.1.0/\">readthedocs.io</a>.</p>",
    "tags": "graphics math",
    "versions": {
      "1.2.0": {
        "dist": [
          {
            "py_version": "cp312",
            "sha256": "e5c556118b1e528d3a3851a5321b360b463efbbc7f5ed789103feb5daeff6b7f"
          },
          {
            "py_version": "cp313",
            "sha256": "c61778df556995483134ce39ac2c20fcbdbed4099bb12264f970381c82882641"
          }
        ]
      }
    }
  },
  "cycler": {
    "image_name": "cycler",
    "alt_image_name": "cycler",
    "description": "<p>The public API of cycler consists of a class <code>Cycler</code>, a factory function <code>cycler()</code>, and a concatenation function <code>concat()</code>. The factory function provides a simple interface for creating \u2018base\u2019 Cycler objects while the class takes care of the composition and iteration logic.</p>\n",
    "site_name": "matplotlib.org",
    "link_to_site": "https://matplotlib.org/cycler/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/matplotlib/cycler/blob/main/LICENSE",
    "usage_notes": "<p>A single entry Cycler object can be used to easily cycle over a single style. To create the Cycler use the <code>cycler()</code> function to link a key/style/kwarg to series of values. The key must be hashable (as it will eventually be used as the key in a dict).</p>\n\n<pre><code>\nIn [1]: from __future__ import print_function<br>\n<br>\nIn [2]: from cycler import cycler<br>\n<br>\nIn [3]: color_cycle = cycler(color=['r', 'g', 'b'])<br>\n<br>\nIn [4]: color_cycle<br>\nOut[4]: cycler('color', ['r', 'g', 'b'])<br>\n<br>\n</code></pre>\n\n<p>The Cycler knows it\u2019s length and keys:</p>\n\n<pre><code>\nIn [5]: len(color_cycle)<br>\nOut[5]: 3<br>\n<br>\nIn [6]: color_cycle.keys<br>\nOut[6]: {'color'}<br>\n</code></pre>\n\n<p>Iterating over this object will yield a series of dict objects keyed on the label</p>\n\n<pre><code>\nIn [7]: for v in color_cycle:<br>\n   ...    print(v)<br>\n   ...   <br>\n{'color': 'r'}<br>\n{'color': 'g'}<br>\n{'color': 'b'}<br>\n</code></pre>\n\n<p>Cycler objects can be passed as the argument to cycler() which returns a new Cycler with a new label, but the same values.</p>\n\n<pre><code>\nIn [8]: cycler(ec=color_cycle)<br>\nOut[8]: cycler('ec', ['r', 'g', 'b'])<br>\n</code></pre>\n\n<p>Iterating over a Cycler results in the finite list of entries, to get an infinite cycle, call the Cycler object (a-la a generator)</p>\n\n<pre><code>\nIn [9]: cc = color_cycle()<br>\nIn [10]: for j, c in zip(range(5),  cc):<br>\n   ...    print(j, c)<br>\n   ...<br>\n0 {'color': 'r'}<br>\n1 {'color': 'g'}<br>\n2 {'color': 'b'}<br>\n3 {'color': 'r'}<br>\n4 {'color': 'g'}<br>\n</code></pre>\n\n<p>See the <a href=\"https://matplotlib.org/cycler/\">website</a> for further instructions.</p>",
    "tags": "graphics",
    "versions": {
      "0.11.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9a5d8a7d291a226322e0ba5ce133e7055ffb89846bfcf194e8f27215bf97f17b"
          }
        ]
      }
    }
  },
  "cython": {
    "image_name": "cython",
    "alt_image_name": "cython",
    "description": "<p>The Cython language makes writing C extensions for the Python language as easy as Python itself. Cython is a source code translator based on <a href=\"http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/\">Pyrex</a>, but supports more cutting edge functionality and optimizations.</p>\n\n<p>The Cython language is a superset of the Python language (almost all Python code is also valid Cython code), but Cython additionally supports optional static typing to natively call C functions, operate with C++ classes and declare fast C types on variables and class attributes. This allows the compiler to generate very efficient C code from Cython code.</p>\n\n<p>This makes Cython the ideal language for writing glue code for external C/C++ libraries, and for fast C modules that speed up the execution of Python code.</p>",
    "site_name": "cython.org",
    "link_to_site": "https://cython.org/",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/cython/cython/blob/master/LICENSE.txt",
    "usage_notes": "<p>Imagine a simple \u201chello world\u201d script in a file <code>hello.pyx</code>:</p>\n\n<pre><code>\ndef say_hello_to(name):<br>\n    print(\"Hello %s!\" % name)<br>\n</code></pre>\n\n<p>The following could be a corresponding <code>setup.py</code> script:</p>\n\n<pre><code>\nfrom setuptools import setup<br>\nfrom Cython.Build import cythonize<br>\n<br>\nsetup(<br>\n    name='Hello world app',<br>\n    ext_modules=cythonize(\"hello.pyx\"),<br>\n    zip_safe=False,<br>\n)<br>\n</code></pre>\n\n<p>To build, run <code>python setup.py build_ext --inplace</code>. Then simply start a Python session and do <code>from hello import say_hello_to</code> and use the imported function as you see fit.</p>\n\n<p>Full documentation can be found on <a href=\"https://cython.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "3.0.10.post0": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "5832f5e38364ca7baa9e6969169b7a4674bc19b3901dd4c1700b3c08411cfd98"
          }
        ]
      }
    }
  },
  "arrow": {
    "image_name": "arrow",
    "alt_image_name": "arrow",
    "description": "<p>Arrow is a Python library that offers a sensible and human-friendly approach to creating, manipulating, formatting and converting dates, times and timestamps.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/arrow-py/arrow",
    "site_name_license": "Apache-2.0",
    "link_to_license": "https://github.com/arrow-py/arrow/blob/master/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://arrow.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.3.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "8b8a45b95d98c43b0d2468b3e03954428c8f06a9415db7b4c7ee76639fa2b080"
          }
        ]
      }
    }
  },
  "six": {
    "image_name": "six",
    "alt_image_name": "six",
    "description": "<p>Six is a Python 2 and 3 compatibility library. It provides utility functions for smoothing over the differences between the Python versions with the goal of writing Python code that is compatible on both Python versions.</p>\n\n<p>Six supports Python 2.7 and 3.3+.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/benjaminp/six",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/benjaminp/six/blob/master/LICENSE",
    "usage_notes": "<p>Here\u2019s example usage of the module:</p>\n\n<pre><code>\nimport six<br>\n<br>\ndef dispatch_types(value):<br>\n    if isinstance(value, six.integer_types):<br>\n        handle_integer(value)<br>\n    elif isinstance(value, six.class_types):<br>\n        handle_class(value)<br>\n    elif isinstance(value, six.string_types):<br>\n        handle_string(value)<br>\n</code></pre>\n\n<p>Documentation should be referenced at <a href=\"https://six.readthedocs.io/\">readthedocs.io</a>.</p>",
    "tags": "utility programming_tools",
    "versions": {
      "1.16.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "31b9420324b64686ad1e85d1a981456eeca115dc8503e168ecae830f8f83d86e"
          }
        ]
      }
    }
  },
  "dash-mantine-components": {
    "image_name": "dash-mantine-components",
    "alt_image_name": "dash-mantine-components",
    "description": "<p>Dash Mantine Components is an extensive (70+) Dash components library based on Mantine React Components Library.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/snehilvj/dash-mantine-components",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/snehilvj/dash-mantine-components#MIT-1-ov-file",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/snehilvj/dash-mantine-components\">github.com</a>.</p>",
    "tags": "web utility",
    "versions": {
      "0.12.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9904e539a98157b6ac67ba8c4013916ad95263edd2969522a181bd3edc697b53"
          }
        ]
      }
    }
  },
  "importlib-resources": {
    "image_name": "importlib_resources",
    "alt_image_name": "importlib_resources",
    "description": "<p><code>importlib_resources</code> is a backport of Python standard library <a href=\"https://docs.python.org/3/library/importlib.html#module-importlib.resources\">importlib.resources</a> module for older Pythons.</p>\n\n<p>The key goal of this module is to replace parts of <a href=\"https://setuptools.readthedocs.io/en/latest/pkg_resources.html\">pkg_resources</a> with a solution in Python's stdlib that relies on well-defined APIs. This makes reading resources included in packages easier, with more stable and consistent semantics.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/python/importlib_resources",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/python/importlib_resources/blob/main/LICENSE",
    "usage_notes": "<h4>Example of usage:</h4>\n<p>Let\u2019s say you are writing an email parsing library and in your test suite you have a sample email message in a file called <code>message.eml</code>. You would like to access the contents of this file for your tests, so you put this in your project under the <code>email/tests/data/message.eml</code> path. Let\u2019s say your unit tests live in <code>email/tests/test_email.py</code>.</p>\n\n<p>Your test could read the data file by doing something like:</p>\n<pre><code>\ndata_dir = os.path.join(os.path.dirname(__file__), 'tests', 'data')<br>\ndata_path = os.path.join(data_dir, 'message.eml')<br>\nwith open(data_path, encoding='utf-8') as fp:<br>\n    eml = fp.read()<br>\n</code></pre>\n\n<p>But there\u2019s a problem with this! The use of <code>__file__</code> doesn\u2019t work if your package lives inside a zip file, since in that case this code does not live on the file system.</p>\n\n<p><code>importlib_resources</code> provides a performant solution to this scenario by being built entirely on the back of the stdlib <code>importlib</code>. By taking advantage of all the efficiencies in Python\u2019s import system, and the fact that it\u2019s built into Python, using <code>importlib_resources</code> can be extremely performant. Our solution using <code>importlib_resources</code> would look like:</p>\n\n<pre><code>\nfrom importlib_resources import files<br>\n# Reads contents with UTF-8 encoding and returns str.<br>\neml = files('email.tests.data').joinpath('message.eml').read_text()<br>\n</code></pre>\n\n<p>Further usage notes are available on <a href=\"https://importlib-resources.readthedocs.io/en/latest/using.html\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "5.8.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "0d3cfa39a26f3ea991cbc07a1cf4213606573b8d54e8799e04a33a82d9d1abe4"
          }
        ]
      }
    }
  },
  "bottle": {
    "image_name": "bottle",
    "alt_image_name": "bottle",
    "description": "<p>Bottle is a fast and simple micro-framework for small web applications. It offers request dispatching (Routes) with url parameter support, templates, a built-in HTTP Server and adapters for many third party WSGI/HTTP-server and template engines - all in a single file and with no dependencies other than the Python Standard Library.</p>",
    "site_name": "bottlepy.org",
    "link_to_site": "http://bottlepy.org",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/bottlepy/bottle/blob/master/LICENSE",
    "usage_notes": "<p>\"Hello World\" example in bottle:</p>\n<pre><code>\nfrom bottle import route, run, template<br>\n<br>\n@route('/hello/<name>')<br>\ndef index(name):<br>\n    return template('%lt;b&gt;Hello {{name}}&lt;/b&gt;!', name=name)<br>\n<br>\nrun(host='localhost', port=8080)<br>\n</code></pre>\n<p>Run this script or paste it into a Python console, then point your browser to <code>http://localhost:8080/hello/world</code> to see it working!</p>\n<p>See <a href=\"http://bottlepy.org/docs/dev/\">official documentation</a> for further information.</p>",
    "tags": "web programming_tools",
    "versions": {
      "0.13.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "8b285b59801eb9a503fb24e0e9882f4441d90d4bef16ac5fbd0d2ed9054f6ce3"
          }
        ]
      }
    }
  },
  "stack-data": {
    "image_name": "stack-data",
    "alt_image_name": "stack-data",
    "description": "<p>This is a library that extracts data from stack frames and tracebacks, particularly to display more useful tracebacks than the default.  </p>\n",
    "site_name": "https://github.com/ibm-z-oss-oda/stack_data",
    "link_to_site": "https://github.com/ibm-z-oss-oda/stack_data",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/stack_data/blob/master/LICENSE.txt",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/alexmojaki/stack_data\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.6.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "deba2972b7c7e2c1e2134d35c1f6af8f593bdcbc3907ef11a1ed2d9dcb9e2a73"
          }
        ]
      }
    }
  },
  "python-dateutil": {
    "image_name": "python-dateutil",
    "alt_image_name": "python-dateutil",
    "description": "<p>The dateutil module provides powerful extensions to the standard datetime module, available in Python.</p>\n\n<p>Features include:</p>\n\n<ul>\n<li>Computing of relative deltas (next month, next year, next Monday, last week of month, etc);</li>\n<li>Computing of relative deltas between two given date and/or datetime objects;</li>\n<li>Computing of dates based on very flexible recurrence rules, using a superset of the iCalendar specification. Parsing of RFC strings is supported as well.</li>\n<li>Generic parsing of dates in almost any string format;</li>\n<li>Timezone (tzinfo) implementations for tzfile(5) format files (/etc/localtime, /usr/share/zoneinfo, etc), TZ environment string (in all known formats), iCalendar format files, given ranges (with help from relative deltas), local machine timezone, fixed offset timezone, UTC timezone, and Windows registry-based time zones.</li>\n<li>Internal up-to-date world timezone information based on Olson's database.</li>\n<li>Computing of Easter Sunday dates for any given year, using Western, Orthodox or Julian algorithms;</li>\n<li>A comprehensive test suite.</li>\n</ul>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/dateutil/dateutil",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/dateutil/dateutil/blob/master/LICENSE",
    "usage_notes": "<p>Suppose you want to know how much time is left, in years/months/days/etc, before the next easter happening on a year with a Friday 13th in August, and you want to get today\u2019s date out of the \u201cdate\u201d unix system command. Here is the code:</p>\n\n<pre><code>\n&gt;&gt;&gt; from dateutil.relativedelta import *<br>\n&gt;&gt;&gt; from dateutil.easter import *<br>\n&gt;&gt;&gt; from dateutil.rrule import *<br>\n&gt;&gt;&gt; from dateutil.parser import *<br>\n&gt;&gt;&gt; from datetime import *<br>\n&gt;&gt;&gt; now = parse(\"Sat Oct 11 17:13:46 UTC 2003\")<br>\n&gt;&gt;&gt; today = now.date()<br>\n&gt;&gt;&gt; year = rrule(YEARLY,dtstart=now,bymonth=8,bymonthday=13,byweekday=FR)[0].year<br>\n&gt;&gt;&gt; rdelta = relativedelta(easter(year), today)<br>\n&gt;&gt;&gt; print(\"Today is: %s\" % today)<br>\nToday is: 2003-10-11<br>\n&gt;&gt;&gt; print(\"Year with next Aug 13th on a Friday is: %s\" % year)<br>\nYear with next Aug 13th on a Friday is: 2004<br>\n&gt;&gt;&gt; print(\"How far is the Easter of that year: %s\" % rdelta)<br>\nHow far is the Easter of that year: relativedelta(months=+6)<br>\n&gt;&gt;&gt; print(\"And the Easter of that year is: %s\" % (today+rdelta))<br>\nAnd the Easter of that year is: 2004-04-11<br>\n</code></pre>\n\n<p>See documentation at <a href=\"https://dateutil.readthedocs.io/en/stable/\">readthedocs.io</a>.</p>",
    "tags": "programming_tools utility",
    "versions": {
      "2.8.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "961d03dc3453ebbc59dbdea9e4e11c5651520a876d0f4db161e8674aae935da9"
          }
        ]
      }
    }
  },
  "comm": {
    "image_name": "comm",
    "alt_image_name": "comm",
    "description": "<p>Comm provides a way to register a Kernel Comm implementation, as per the Jupyter kernel protocol.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ipython/comm",
    "site_name_license": "BSD-3",
    "link_to_license": "https://github.com/ipython/comm#BSD-3-Clause-1-ov-file",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/ipython/comm\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.2.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "5c6cfa57da70d1d1214033aa2e45912f3bdb4300efcf35b0d8ba4762fdd54abb"
          }
        ]
      }
    }
  },
  "pandas-datareader": {
    "image_name": "pandas-datareader",
    "alt_image_name": "pandas-datareader",
    "description": "<p>This package provides data readers extracted from the pandas codebase.</p>\n\n<p>Use this package for up-to-date remote data access for pandas, works for multiple versions of pandas.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/pydata/pandas-datareader",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/pydata/pandas-datareader/blob/main/LICENSE.md",
    "usage_notes": "<p>Package may be used as such: (This example reads 5-years of 10-year constant maturity yields on U.S. government bonds.)</p>\n<pre><code>\nimport pandas_datareader as pdr<br>\npdr.get_data_fred('GS10')<br>\n</code></pre>\n\n<p>Documentation is available on <a href=\"https://pydata.github.io/pandas-datareader/\">pydata.github.io/pandas-datareader</a>.</p>",
    "tags": "math utility machine_learning",
    "versions": {
      "0.10.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "199000ff3a98924c9366d957bc66d663dc0636bc0277bfa4630214b2a7b9393c"
          }
        ]
      }
    }
  },
  "dateutils": {
    "image_name": "dateutils",
    "alt_image_name": "dateutils",
    "description": "<p>The main purpose of this package is to provide more complex arithmetic operations on dates/times. </p>",
    "site_name": "github.com/ibm-z-oss-oda/python-dateutils",
    "link_to_site": "https://github.com/ibm-z-oss-oda/python-dateutils",
    "site_name_license": "BSD",
    "link_to_license": "https://github.com/jmcantrell/python-dateutils/blob/master/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://dateutil.readthedocs.io/en/stable/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.6.12": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "29eae2fb476f45e679250e20c443d17df11c5653b1ce52ae5cb134bcbcfe1960"
          }
        ]
      }
    }
  },
  "libjpeg-turbo": {
    "image_name": "libjpeg-turbo",
    "alt_image_name": "libjpeg-turbo",
    "description": "<p>Libjpeg is a widely used C library for reading and writing JPEG image files. </p>\n",
    "site_name": "sourceforge.net",
    "link_to_site": "https://libjpeg.sourceforge.net/",
    "site_name_license": "OTHER",
    "link_to_license": "https://jpegclub.org/reference/libjpeg-license/",
    "usage_notes": "<p>The libpng manual is available on <a href=\"http://www.faqs.org/faqs/jpeg-faq/\">faqs.org</a>.</p>",
    "tags": "graphics",
    "versions": {
      "3.0.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "ed0e2f5033d3df865eddd5d311ed43d844801055f32187812a4335261d4172ae"
          }
        ]
      }
    }
  },
  "jupyter-core": {
    "image_name": "jupyter-core",
    "alt_image_name": "jupyter-core",
    "description": "<p>Core Jupyter functionality. </p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ibm-z-oss-oda/jupyter_core",
    "site_name_license": "BSD-3",
    "link_to_license": "https://github.com/ibm-z-oss-oda/jupyter_core/blob/main/COPYING.md",
    "usage_notes": "<p>More information is available on <a href=\"https://jupyter-core.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "5.7.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "61450f74ff679ee9dea1a281b9d351e72b7e9134c7e48d0db55a9d5948fb5425"
          }
        ]
      }
    }
  },
  "async-generator": {
    "image_name": "async-generator",
    "alt_image_name": "async-generator",
    "description": "<p>async generators were added in version python3.6 - but this library enables the functionality back to version 3.5.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ibm-z-oss-oda/async_generator",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/async_generator/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/ibm-z-oss-oda/async_generator\">github.com</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "1.10": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "7b9d1f8a8e65f263d3c7ac6857d9052a4f433450682178984afa840a64a552c5"
          }
        ]
      }
    }
  },
  "ebcdic": {
    "image_name": "ebcdic",
    "alt_image_name": "ebcdic",
    "description": "\n<p>EBCDIC is short for Extended Binary Coded Decimal Interchange Code and is a family of character encodings that is mainly used on mainframe computers. </p>\n",
    "site_name": "https://pypi.org/project/ebcdic/",
    "link_to_site": "https://pypi.org/project/ebcdic/",
    "site_name_license": "BSD",
    "link_to_license": "https://pypi.org/project/ebcdic/",
    "usage_notes": "\n<p>For advanced tool documentation, refer to <a href=\"https://pypi.org/project/ebcdic/\">pypi.org</a>.</p>",
    "tags": "Utility",
    "versions": {
      "1.1.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "5f7084965467af4931278f1464629f4c273c41a182248cdbe7b3ad0de4158c2e"
          }
        ]
      }
    }
  },
  "httpcore": {
    "image_name": "httpcore",
    "alt_image_name": "httpcore",
    "description": "<p>The HTTP Core package provides a minimal low-level HTTP client, which does one thing only. Sending HTTP requests.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/encode/httpcore",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/encode/httpcore/blob/master/LICENSE.md",
    "usage_notes": "<p>More information is available on <a href=\"https://www.encode.io/httpcore/\">encode.io</a>.</p>",
    "tags": "web",
    "versions": {
      "1.0.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6e6b5b848138c16cd44d62e6a573348426edfb60f9846264f321e980835e04bf"
          }
        ]
      }
    }
  },
  "ipywidgets": {
    "image_name": "ipywidgets",
    "alt_image_name": "ipywidgets",
    "description": "<p>ipywidgets, also known as jupyter-widgets or simply widgets, are interactive HTML widgets for Jupyter notebooks and the IPython kernel.</p>\n\n<p>Notebooks come alive when interactive widgets are used. Users gain control of their data and can visualize changes in the data.</p>\n\n<p>Learning becomes an immersive, fun experience. Researchers can easily see how changing inputs to a model impact the results.</p>",
    "site_name": "ipython.org",
    "link_to_site": "http://ipython.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter-widgets/ipywidgets/blob/master/LICENSE",
    "usage_notes": "<p>Widgets are eventful python objects that have a representation in the browser, often as a control like a slider, textbox, etc.</p>\n\n<p>You can use widgets to build interactive GUIs for your notebooks.</p>\n\n<p>To use the widget framework, you need to import <code>ipywidgets</code>.</p>\n<pre><code>\nimport ipywidgets as widgets <br>\n</code></pre>\n\n<p>Widgets have their own display <code>repr</code> which allows them to be displayed using IPython\u2019s display framework. Constructing and returning an <code>IntSlider</code> automatically displays the widget. Widgets are displayed inside the output area below the code cell. Clearing cell output will also remove the widget.</p>\n\n<pre><code>\nwidgets.IntSlider()<br>\n</code></pre>\n\n<p>You can also explicitly display the widget using <code>display(...)</code>.</p>\n\n<pre><code>\nfrom IPython.display import display<br>\nw = widgets.IntSlider()<br>\ndisplay(w)<br>\n</code></pre>\n\n<p>Moving forward, you should refer to the tutorial on <a href=\"https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Basics.html\">readthedocs.io</a> to see these widgets in action, and for further usage instruction.</p>",
    "tags": "web graphics",
    "versions": {
      "8.1.5.post1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "1bab492d31ba66db0fda1421a02d1ad2cfe880b484c6206cde17105f5bffbc3c"
          }
        ]
      }
    }
  },
  "networkx": {
    "image_name": "networkx",
    "alt_image_name": "networkx",
    "description": "<p>NetworkX is a Python package for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks.</p>",
    "site_name": "networkx.org",
    "link_to_site": "https://networkx.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/networkx/networkx/blob/main/LICENSE.txt",
    "usage_notes": "<p>Simple example to find the shortest path between two nodes in an undirected graph:</p>\n\n<pre><code>\n&gt;&gt;&gt; import networkx as nx<br>\n&gt;&gt;&gt; G = nx.Graph()<br>\n&gt;&gt;&gt; G.add_edge('A', 'B', weight=4)<br>\n&gt;&gt;&gt; G.add_edge('B', 'D', weight=2)<br>\n&gt;&gt;&gt; G.add_edge('A', 'C', weight=3)<br>\n&gt;&gt;&gt; G.add_edge('C', 'D', weight=4)<br>\n&gt;&gt;&gt; nx.shortest_path(G, 'A', 'D', weight='weight')<br>\n['A', 'B', 'D']<br>\n</code></pre>\n\n<p>See the <a href=\"https://networkx.org/documentation/latest/tutorial.html\">tutorial</a> for more instructions.</p>",
    "tags": "math machine_learning",
    "versions": {
      "3.0b1.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "fc6f6a7d2def3c5ec9b7e9bf324bbbd3a8636a4db9055476744c4b213b0ba5f0"
          }
        ]
      }
    }
  },
  "tinycss2": {
    "image_name": "tinycss2",
    "alt_image_name": "tinycss2",
    "description": "<p>tinycss2 is a low-level CSS parser and generator written in Python: it can parse strings, return objects representing tokens and blocks, and generate CSS strings corresponding to these objects.  </p>",
    "site_name": "https://github.com/ibm-z-oss-oda/tinycss2",
    "link_to_site": "https://github.com/ibm-z-oss-oda/tinycss2",
    "site_name_license": "BSD 3",
    "link_to_license": "https://github.com/ibm-z-oss-oda/tinycss2/blob/master/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/Kozea/tinycss2\">github.com</a>.</p>",
    "tags": "utility web",
    "versions": {
      "1.1.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "510267ac64def0ab08afa5d603158588f7457ae316170f015d1bcb76b57ee003"
          }
        ]
      }
    }
  },
  "matplotlib": {
    "image_name": "matplotlib",
    "alt_image_name": "matplotlib",
    "description": "<p>Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python.</p>\n\n<p>Matplotlib produces publication-quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shell, web application servers, and various graphical user interface toolkits.</p>",
    "site_name": "matplotlib.org",
    "link_to_site": "https://matplotlib.org/",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/matplotlib/matplotlib/blob/main/LICENSE/LICENSE",
    "usage_notes": "<p>Matplotlib.org provides a number of excellent <a href=\"https://matplotlib.org/stable/tutorials/index.html\">tutorials</a> and documentation for using this package.</p>",
    "tags": "graphics",
    "versions": {
      "3.8.4": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "0fc8203ff97fa01fc9e787e5a891ba6ea92328300b6e43f0083379e6afcec371"
          },
          {
            "py_version": "cp312",
            "sha256": "3bfc9431e29b0d0874846e34055da8f116fd0bacef4c6228abf8ebd6079cfc5d"
          },
          {
            "py_version": "cp313",
            "sha256": "d0e25eda4e395a519efa04b96937d9073f91f2f7586cf36ce66b508d26eaf6e9"
          }
        ]
      }
    }
  },
  "tifffile": {
    "image_name": "tifffile",
    "alt_image_name": "tifffile",
    "description": "\n<p>Tifffile is a Python library to store NumPy arrays in TIFF (Tagged Image File Format) files, and read image and metadata from TIFF-like files used in bioimaging. </p>",
    "site_name": "github",
    "link_to_site": "https://github.com/ibm-z-oss-oda/tifffile",
    "site_name_license": "BSD 3",
    "link_to_license": "https://github.com/ibm-z-oss-oda/tifffile/blob/master/LICENSE",
    "usage_notes": "<p>Documentation can be found on <a href=\"https://github.com/ibm-z-oss-oda/tifffile\">github.com</a>.</p>",
    "tags": "graphics",
    "versions": {
      "2025.3.30": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "06a02acec3c9cb782b329af98b496688c33cb0805b92077c94fe8eee2f342290"
          }
        ]
      }
    }
  },
  "nbconvert": {
    "image_name": "nbconvert",
    "alt_image_name": "nbconvert",
    "description": "\n<p>The nbconvert tool, <code>jupyter nbconvert</code>, converts notebooks to various other formats via <a href=\"http://jinja.pocoo.org/\">Jinja</a> templates. The nbconvert tool allows you to convert an <code>.ipynb</code> notebook file into various static formats including:</p>\n<ul>\n    <li>HTML</li>\n    <li>LaTeX</li>\n    <li>PDF</li>\n    <li>Reveal JS</li>\n    <li>Markdown (md)</li>\n    <li>ReStructured Text (rst)</li>\n    <li>executable script</li>\n</ul>",
    "site_name": "jupyter.org",
    "link_to_site": "https://jupyter.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter/nbconvert/blob/main/LICENSE",
    "usage_notes": "<p>Please refer to <a href=\"https://nbconvert.readthedocs.io/en/latest/nbconvert_library.html\">readthedocs.io</a> for instructions on how to use this image.</p>",
    "tags": "web utility",
    "versions": {
      "7.8.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6ea90f6064d7be1ac50abb2480b8ff16d1044a9d4774b983106da822d6dae143"
          }
        ]
      }
    }
  },
  "python-json-logger": {
    "image_name": "python-json-logger",
    "alt_image_name": "python-json-logger",
    "description": "<p>This library is provided to allow standard python logging to output log data as json objects.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/madzak/python-json-logger",
    "site_name_license": "BSD 2",
    "link_to_license": "https://github.com/madzak/python-json-logger/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/madzak/python-json-logger\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "2.0.7": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "118ec6b790adda019b53af3ee247ff75ff7a340165761c11eb4ccc9c8c49b64b"
          }
        ]
      }
    }
  },
  "jupyter-server": {
    "image_name": "jupyter-server",
    "alt_image_name": "jupyter-server",
    "description": "<p>The Jupyter Server provides the backend (i.e. the core services, APIs, and REST endpoints) for Jupyter web applications like Jupyter notebook, JupyterLab, and Voila.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyter-server/jupyter_server",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyter-server/jupyter_server/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://jupyter-server.readthedocs.io/en/latest/?badge=latest\">readthedocs.io</a>.</p>",
    "tags": "web",
    "versions": {
      "2.5.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "586358695858fc3ec4c1a3d33faaab60907dfca65cbbef6b3e0bf8b2c3f1869d"
          }
        ]
      }
    }
  },
  "freetype2": {
    "image_name": "freetype2",
    "alt_image_name": "freetype2",
    "description": "\n<p>FreeType is a software font engine that is designed to be small, efficient, highly customizable, and portable while capable of producing high-quality output (glyph images). It can be used in graphics libraries, display servers, font conversion tools, text image generation tools, and many other products as well.</p>\n\n<p>Note that FreeType is a font service and doesn't provide APIs to perform higher-level features like text layout or graphics processing (e.g., colored text rendering, \u2018hollowing\u2019, etc.). However, it greatly simplifies these tasks by providing a simple, easy to use, and uniform interface to access the content of font files.</p>\n\n<p>Please note that \u2018FreeType\u2019 is also called \u2018FreeType 2\u2019, to distinguish it from the old, deprecated \u2018FreeType 1\u2019 library, a predecessor no longer maintained and supported.</p>\n",
    "site_name": "freetype.org",
    "link_to_site": "https://freetype.org/freetype2/docs/index.html",
    "site_name_license": "OTHER",
    "link_to_license": "https://gitlab.freedesktop.org/freetype/freetype/-/blob/master/LICENSE.TXT",
    "usage_notes": "\n<p>Please refer to documentation on <a href=\"https://freetype.org/freetype2/docs/documentation.html\">freetype.org</a>.</p>",
    "tags": "graphics",
    "versions": {
      "2.13.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "bdcf98b3751c6d454e27be150a4af5b111c1acddeeacd271bb4764974a26a4e2"
          }
        ]
      }
    }
  },
  "sortedcontainers": {
    "image_name": "sortedcontainers",
    "alt_image_name": "sortedcontainers",
    "description": "<p>Sorted Containers is an Apache2 licensed <a href=\"http://www.grantjenks.com/docs/sortedcontainers/\">sorted collections library</a>, written in pure-Python, and fast as C-extensions.</p>\n\n<p>Python\u2019s standard library is great until you need a sorted collections type. Many will attest that you can get really far without one, but the moment you really need a sorted list, sorted dict, or sorted set, you\u2019re faced with a dozen different implementations, most using C-extensions without great documentation and benchmarking.</p>\n\n<p>In Python, we can do better. And we can do it in pure-Python!</p>\n",
    "site_name": "grantjenks.com/docs/sortedcontainers",
    "link_to_site": "https://grantjenks.com/docs/sortedcontainers/",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/grantjenks/python-sortedcontainers/blob/master/LICENSE",
    "usage_notes": "<pre><code>\n&gt;&gt;&gt; from sortedcontainers import SortedList<br>\n&gt;&gt;&gt; sl = SortedList(['e', 'a', 'c', 'd', 'b'])<br>\n&gt;&gt;&gt; sl<br>\nSortedList(['a', 'b', 'c', 'd', 'e'])<br>\n&gt;&gt;&gt; sl *= 10_000_000<br>\n&gt;&gt;&gt; sl.count('c')<br>\n10000000<br>\n&gt;&gt;&gt; sl[-3:]<br>\n['e', 'e', 'e']<br>\n&gt;&gt;&gt; from sortedcontainers import SortedDict<br>\n&gt;&gt;&gt; sd = SortedDict({'c': 3, 'a': 1, 'b': 2})<br>\n&gt;&gt;&gt; sd<br>\nSortedDict({'a': 1, 'b': 2, 'c': 3})<br>\n&gt;&gt;&gt; sd.popitem(index=-1)<br>\n('c', 3)<br>\n&gt;&gt;&gt; from sortedcontainers import SortedSet<br>\n&gt;&gt;&gt; ss = SortedSet('abracadabra')<br>\n&gt;&gt;&gt; ss<br>\nSortedSet(['a', 'b', 'c', 'd', 'r'])<br>\n&gt;&gt;&gt; ss.bisect_left('c')<br>\n2<br>\n</code></pre>\n\n<p>All of the operations shown above run in faster than linear time. The above demo also takes nearly a gigabyte of memory to run. When the sorted list is multiplied by ten million, it stores ten million references to each of \u201ca\u201d through \u201ce\u201d. Each reference requires eight bytes in the sorted container. That\u2019s pretty hard to beat as it\u2019s the cost of a pointer to each object. It\u2019s also 66% less overhead than a typical binary tree implementation (e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for which every node must also store two pointers to children nodes.</p>\n\n<p>Full documentation can be found at <a href=\"https://grantjenks.com/docs/sortedcontainers/\">grantjenks.com/docs/sortedcontainers</a>.</p>",
    "tags": "utility",
    "versions": {
      "2.4.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "68b7a37f75182b47c1655391a5f047225ec0665aeaf5a6420da5ee03f070ced2"
          }
        ]
      }
    }
  },
  "py-zcrypto": {
    "image_name": "py-zcrypto",
    "alt_image_name": "py-zcrypto",
    "description": "<p>This Python package provides API's to access Certificate Management Services (CMS).</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/IBM/py-zcrypto",
    "site_name_license": "Apache 2",
    "link_to_license": "https://github.com/IBM/py-zcrypto?tab=Apache-2.0-1-ov-file#readme",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/IBM/py-zcrypto/blob/main/README.md\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.0.2": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "ccdc3c2a76330b5375984239df843dd524949e4b1bdfca53c74b2eb8dea46a84"
          }
        ]
      }
    }
  },
  "plotly": {
    "image_name": "plotly",
    "alt_image_name": "plotly",
    "description": "\n<p>plotly.py is an interactive, open-source, and browser-based graphing library for Python </p>",
    "site_name": "github.com/ibm-z-oss-oda/plotly.py",
    "link_to_site": "https://github.com/ibm-z-oss-oda/plotly.py",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/plotly.py/blob/master/LICENSE.txt",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://plotly.com/python/\">plotly.com</a>.</p>",
    "tags": "graphics",
    "versions": {
      "5.17.0.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "879a112452b4d08511309b968f0b481bb41fc207cb036687bb40496fc7d2bfa1"
          }
        ]
      }
    }
  },
  "semantic-version": {
    "image_name": "semantic-version",
    "alt_image_name": "semantic-version",
    "description": "<p>This small python library provides a few tools to handle SemVer in Python. It follows strictly the 2.0.0 version of the SemVer scheme.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/rbarrois/python-semanticversion",
    "site_name_license": "BSD 2",
    "link_to_license": "https://github.com/rbarrois/python-semanticversion/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/rbarrois/python-semanticversion\">github.com</a>.</p>",
    "tags": "utility programming_tools",
    "versions": {
      "2.10.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "16f8514f2be59a8e3b3d62b084477b0119c2874955159cd42a46d3e1e2d724eb"
          }
        ]
      }
    }
  },
  "soupsieve": {
    "image_name": "soupsieve",
    "alt_image_name": "soupsieve",
    "description": "<p>Soup Sieve is a CSS selector library designed to be used with Beautiful Soup 4. It aims to provide selecting, matching, and filtering using modern CSS selectors. </p>\n",
    "site_name": "https://github.com/ibm-z-oss-oda/soupsieve",
    "link_to_site": "https://github.com/ibm-z-oss-oda/soupsieve",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/soupsieve/blob/main/LICENSE.md",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://github.com/facelessuser/soupsieve\">github.com</a>.</p>",
    "tags": "utility web",
    "versions": {
      "2.4.post1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "3ac2640b335b0981d6a7fdd11029b009e066cecef343973a1c99c4be1cb846d9"
          }
        ]
      }
    }
  },
  "pillow": {
    "image_name": "pillow",
    "alt_image_name": "pillow",
    "description": "<p>The Python Imaging Library adds image processing capabilities to your Python interpreter.</p>\n\n<p>This library provides extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities.</p>\n\n<p>The core image library is designed for fast access to data stored in a few basic pixel formats. It should provide a solid foundation for a general image processing tool.</p>",
    "site_name": "python-pillow.org",
    "link_to_site": "https://python-pillow.org/",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/python-pillow/Pillow/blob/main/LICENSE",
    "usage_notes": "<p>The most important class in the Python Imaging Library is the <code>Image</code> class, defined in the module with the same name. You can create instances of this class in several ways; either by loading images from files, processing other images, or creating images from scratch.</p>\n\n<p>To load an image from a file, use the <code>open()</code> function in the <code>Image</code> module:</p>\n\n<pre><code>\nfrom PIL import Image<br>\nim = Image.open(\"hopper.ppm\")<br>\n</code></pre>\n\n<p>If successful, this function returns an <code>Image</code> object. You can now use instance attributes to examine the file contents:</p>\n\n<pre><code>\nprint(im.format, im.size, im.mode)<br>\n   PPM (512, 512) RGB<br>\n</code></pre>\n\n<p>The <code>format</code> attribute identifies the source of an image. If the image was not read from a file, it is set to None. The size attribute is a 2-tuple containing width and height (in pixels). The <code>mode</code> attribute defines the number and names of the bands in the image, and also the pixel type and depth. Common modes are \u201cL\u201d (luminance) for greyscale images, \u201cRGB\u201d for true color images, and \u201cCMYK\u201d for pre-press images.</p>\n\n<p>If the file cannot be opened, an <code>OSError</code> exception is raised.</p>\n\n<p>Once you have an instance of the Image class, you can use the methods defined by this class to process and manipulate the image. Refer to <a href=\"https://pillow.readthedocs.io/en/stable/handbook/tutorial.html\">readthedocs.io</a> for more information.</p>",
    "tags": "graphics",
    "versions": {
      "11.0.0.post0": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "521c6fb2a7f12d171fd9368401ff2e46282adc1455b69fd7990815a5eb03b8bb"
          }
        ]
      }
    }
  },
  "xgboost": {
    "image_name": "xgboost",
    "alt_image_name": "xgboost",
    "description": "<p>XGBoost is an optimized distributed gradient boosting library designed to be highly efficient, flexible and portable. It implements machine learning algorithms under the <a href=\"https://en.wikipedia.org/wiki/Gradient_boosting\">Gradient Boosting</a> framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way. The same code runs on major distributed environment (Kubernetes, Hadoop, SGE, MPI, Dask) and can solve problems beyond billions of examples.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/dmlc/xgboost",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/dmlc/xgboost/blob/master/LICENSE",
    "usage_notes": "<p>Documentation for this package should be found on <a href=\"https://xgboost.readthedocs.io/en/stable/python/index.html\">readthedocs.io</a>.</p>",
    "tags": "machine_learning",
    "versions": {
      "1.6.2": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "49d07f7ac96d902fe3ccda5968e090140ee6a7ef6593767c776ac198734767e2"
          }
        ]
      }
    }
  },
  "sklearn-pandas": {
    "image_name": "sklearn-pandas",
    "alt_image_name": "sklearn-pandas",
    "description": "<p>This module provides a bridge between <a href=\"http://scikit-learn.org/stable\">Scikit-Learn's</a> machine learning methods and <a href=\"https://pandas.pydata.org/\">pandas</a>-style Data Frames. In particular, it provides a way to map <code>DataFrame</code> columns to transformations, which are later recombined into features.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/scikit-learn-contrib/sklearn-pandas",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/scikit-learn-contrib/sklearn-pandas/blob/master/LICENSE",
    "usage_notes": "<p>Usage instructions are provided on <a href=\"https://github.com/scikit-learn-contrib/sklearn-pandas/blob/master/README.rst\">github</a>.</p>",
    "tags": "math utility machine-learning",
    "versions": {
      "2.2.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "696cdad0ceb563c20185f409af7bc6f55006801d7e440f10e383fccb59ebcc4f"
          }
        ]
      }
    }
  },
  "isoduration": {
    "image_name": "isoduration",
    "alt_image_name": "isoduration",
    "description": "<p>Operations with ISO 8601 durations.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/bolsote/isoduration",
    "site_name_license": "ISC",
    "link_to_license": "https://github.com/bolsote/isoduration/blob/master/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/bolsote/isoduration\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "20.11.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "d722925176b4aaf1ecc14035b80a8af343c89692298b05fe63ca54a7bd66f71e"
          }
        ]
      }
    }
  },
  "dash": {
    "image_name": "dash",
    "alt_image_name": "dash",
    "description": "<p>Dash ties modern UI elements like dropdowns, sliders, and graphs directly to your analytical Python code.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/plotly/dash",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/plotly/dash#MIT-1-ov-file",
    "usage_notes": "<p>Usage information is available on <a href=\"https://dash.plotly.com/\">dash.plotly.com</a>.</p>",
    "tags": "web",
    "versions": {
      "3.0.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "16a83e31ac47607a4c676bffe07a5c1ceb2cfbcd3bfafc15f25554b9fffe7891"
          }
        ]
      }
    }
  },
  "flask": {
    "image_name": "flask",
    "alt_image_name": "flask",
    "description": "\n<p>Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around Werkzeug and Jinja and has become one of the most popular Python web application frameworks.</p>\n\n<p>Flask offers suggestions, but doesn\u2019t enforce any dependencies or project layout. It is up to the developer to choose the tools and libraries they want to use. There are many extensions provided by the community that make adding new functionality easy.</p>\n",
    "site_name": "palletsprojects.com/p/flask",
    "link_to_site": "https://palletsprojects.com/p/flask/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/pallets/flask/blob/main/LICENSE.rst",
    "usage_notes": "<h4>A simple example:</h4>\n<pre><code>\n# save this as app.py<br>\nfrom flask import Flask<br>\n<br>\napp = Flask(__name__)<br>\n<br>\n@app.route(\"/\")<br>\ndef hello():<br>\n    return \"Hello, World!\"<br>\n</code></pre>\n<br>\n<pre><code>",
    " flask run<br>": "  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)<br>\n</code></pre>\n<p>Accessing <code>http://127.0.0.1:5000/</code> should now bring up the \"Hello, World!\" page!</p>\n<p>Further usage notes are available <a href=\"https://flask.palletsprojects.com/en/2.0.x/\">here</a>.</p>",
    "tags": "web",
    "versions": {
      "2.2.5.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "54cd0c0f462de77257309efd462caa14bff4034b05cfdb4b6aba795b818a3641"
          }
        ]
      }
    }
  },
  "requests": {
    "image_name": "requests",
    "alt_image_name": "requests",
    "description": "<p>Requests is a simple, yet elegant, HTTP library.</p>\n\n<p>Requests allows you to send HTTP/1.1 requests extremely easily. There\u2019s no need to manually add query strings to your URLs, or to form-encode your PUT & POST data \u2014 but nowadays, just use the <code>json</code> method!</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/psf/requests",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/psf/requests/blob/main/LICENSE",
    "usage_notes": "<p>Usage example:</p>\n<pre><code>\n&gt;&gt;&gt; import requests<br>\n&gt;&gt;&gt; r = requests.get('https://httpbin.org/basic-auth/user/pass', auth=('user', 'pass'))<br>\n&gt;&gt;&gt; r.status_code<br>\n200<br>\n&gt;&gt;&gt; r.headers['content-type']<br>\n'application/json; charset=utf8'<br>\n&gt;&gt;&gt; r.encoding<br>\n'utf-8'<br>\n&gt;&gt;&gt; r.text<br>\n'{\"authenticated\": true, ...'<br>\n&gt;&gt;&gt; r.json()<br>\n{'authenticated': True, ...}<br>\n</code></pre>\n\n<p>See usage instructions at <a href=\"https://docs.python-requests.org/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "web",
    "versions": {
      "2.32.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9464793afbff5c8982e7721538a3eb9dbae68cc9143519e863b56f592a196046"
          }
        ]
      }
    }
  },
  "jinja2": {
    "image_name": "jinja2",
    "alt_image_name": "jinja2",
    "description": "\n<p>Jinja is a fast, expressive, extensible templating engine. Special placeholders in the template allow writing code similar to Python syntax. Then the template is passed data to render the final document.</p>\n\n<p>It includes:</p>\n<ul>\n    <li>Template inheritance and inclusion.</li>\n    <li>Define and import macros within templates.</li>\n    <li>HTML templates can use autoescaping to prevent XSS from untrusted user input.</li>\n    <li>A sandboxed environment can safely render untrusted templates.</li>\n    <li>AsyncIO support for generating templates and calling async functions.</li>\n    <li>I18N support with Babel.</li>\n    <li>Templates are compiled to optimized Python code just-in-time and cached, or can be compiled ahead-of-time.</li>\n    <li>Exceptions point to the correct line in templates to make debugging easier.</li>\n    <li>Extensible filters, tests, functions, and even syntax.</li>\n\n</ul>\n\n<p>Jinja\u2019s philosophy is that while application logic belongs in Python if possible, it shouldn\u2019t make the template designer\u2019s job difficult by restricting functionality too much.</p>",
    "site_name": "palletsprojects.com/p/jinja",
    "link_to_site": "https://palletsprojects.com/p/jinja/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/pallets/jinja/blob/main/LICENSE.rst",
    "usage_notes": "<p>Jinja uses a central object called the template Environment. Instances of this class are used to store the configuration and global objects, and are used to load templates from the file system or other locations. Even if you are creating templates from strings by using the constructor of Template class, an environment is created automatically for you, albeit a shared one.</p>\n\n<p>Most applications will create one Environment object on application initialization and use that to load templates. In some cases however, it\u2019s useful to have multiple environments side by side, if different configurations are in use.</p>\n\n<p>The simplest way to configure Jinja to load templates for your application is to use PackageLoader.</p>\n\n<pre><code>\nfrom jinja2 import Environment, PackageLoader, select_autoescape<br>\nenv = Environment(<br>\n    loader=PackageLoader(\"yourapp\"),<br>\n    autoescape=select_autoescape()<br>\n)<br>\n</code></pre>\n\n<p>This will create a template environment with a loader that looks up templates in the <code>templates</code> folder inside the <code>yourapp</code> Python package (or next to the <code>yourapp.py</code> Python module). It also enables autoescaping for HTML files. This loader only requires that <code>yourapp</code> is importable, it figures out the absolute path to the folder for you.</p>\n\n<p>Different loaders are available to load templates in other ways or from other locations. You can also write your own if you want to load templates from a source that\u2019s more specialized to your project.</p>\n\n<p>To load a template from this environment, call the get_template() method, which returns the loaded Template.</p>\n\n<pre><code>\ntemplate = env.get_template(\"mytemplate.html\")<br>\n</code></pre>\n\n<p>To render it with some variables, call the render() method.</p>\n\n<pre><code>\nprint(template.render(the=\"variables\", go=\"here\"))<br>\n</code></pre>\n\n<p>Using a template loader rather than passing strings to Template or Environment.from_string() has multiple advantages. Besides being a lot easier to use it also enables template inheritance.</p>\n\n<p>Moving forward, please refer to <a href=\"https://jinja.palletsprojects.com/en/3.0.x/api/\">this guide</a> on getting started with jinja2.</p>",
    "tags": "languages",
    "versions": {
      "3.1.6": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "e469db8741126801274ea28cc0e205284863b47af7be3410cdcaba0821cabad6"
          }
        ]
      }
    }
  },
  "pytz": {
    "image_name": "pytz",
    "alt_image_name": "pytz",
    "description": "\n<p>pytz brings the Olson tz database into Python. This library allows accurate and cross platform timezone calculations. It also solves the issue of ambiguous times at the end of daylight saving time, which you can read more about in the Python Library Reference (<code>datetime.tzinfo</code>).</p>\n\n<p>Almost all of the Olson timezones are supported.</p>\n",
    "site_name": "pythonhosted.org/pytz",
    "link_to_site": "https://pythonhosted.org/pytz/",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/stub42/pytz/blob/master/LICENSE.txt",
    "usage_notes": "<p>Localized times and date arithmetic:</p>\n\n<pre><code>\n&gt;&gt;&gt; from datetime import datetime, timedelta<br>\n&gt;&gt;&gt; from pytz import timezone<br>\n&gt;&gt;&gt; import pytz<br>\n&gt;&gt;&gt; utc = pytz.utc<br>\n&gt;&gt;&gt; utc.zone<br>\n'UTC'<br>\n&gt;&gt;&gt; eastern = timezone('US/Eastern')<br>\n&gt;&gt;&gt; eastern.zone<br>\n'US/Eastern'<br>\n&gt;&gt;&gt; amsterdam = timezone('Europe/Amsterdam')<br>\n&gt;&gt;&gt; fmt = '%Y-%m-%d %H:%M:%S %Z%z'<br>\n</code></pre>\n\n<p>Further documentation is available on <a href=\"https://pythonhosted.org/pytz/\"pythonhosted.org</a>.</p>",
    "tags": "utility",
    "versions": {
      "2022.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6eb3220e93b321d88847ef5da93ac8036cca1ad821d3dc6e956139acc91c1264"
          }
        ]
      }
    }
  },
  "kiwisolver": {
    "image_name": "kiwisolver",
    "alt_image_name": "kiwisolver",
    "description": "\n<p>Kiwi is an efficient C++ implementation of the Cassowary constraint solving algorithm. Kiwi is an implementation of the algorithm based on the <a href=\"https://constraints.cs.washington.edu/solvers/cassowary-tochi.pdf\">seminal Cassowary paper</a>. It is not a refactoring of the original C++ solver. Kiwi has been designed from the ground up to be lightweight and fast. Kiwi ranges from 10x to 500x faster than the original Cassowary solver with typical usecases gaining a 40x improvement. Memory savings are consistently > 5x.</p>\n\n<p>In addition to the C++ solver, Kiwi ships with hand-rolled Python bindings for Python 3.7+.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/nucleic/kiwi",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/nucleic/kiwi/blob/main/LICENSE",
    "usage_notes": "\n<p>Syntactical notes on the use of Kiwisolver are available on <a href=\"https://kiwisolver.readthedocs.io/en/latest/basis/index.html\">readthedocs.io</a>. These will cover basic usage such as creating a system of constraints, and solving and updating it. However, using this project generally will require familiarity with Cassowary, or with constraints solvers in general. Readthedocs.io also provides real-world <a href=\"https://kiwisolver.readthedocs.io/en/latest/use_cases/index.html\">use cases</a> to help explain the package's usage in practice.</p>",
    "tags": "math graphics",
    "versions": {
      "1.4.5": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "0bb0bdd40673b7af4d79ccedd181269658d80446ed6690aa93a5760fa6d3aa63"
          },
          {
            "py_version": "cp312",
            "sha256": "5fca12edf5b64120e8ebf08929bd047025e78a7522fb4ca2fbf51cf8e38a845c"
          },
          {
            "py_version": "cp313",
            "sha256": "c5cbf61db7b037e96f5bfe3327fa299b00541729d9ca83d35a641f792c1e540b"
          }
        ]
      }
    }
  },
  "patsy": {
    "image_name": "patsy",
    "alt_image_name": "patsy",
    "description": "<p>Patsy is a Python library for describing statistical models (especially linear models, or models that have a linear component) and building design matrices. Patsy brings the convenience of <a href=\"http://www.r-project.org/\">R \u201cformulas\u201d</a> to Python.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/pydata/patsy",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/pydata/patsy/blob/master/LICENSE.txt",
    "usage_notes": "<p>Complete documentation is available on <a href=\"https://patsy.readthedocs.io/en/latest/quickstart.html\">readthedocs.io</a>.</p>",
    "tags": "math languages",
    "versions": {
      "1.0.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "fd2654ab7f8b61b908f5333ff0efab80391f9ce3bbc1703f2a8bed70db2d6d52"
          }
        ]
      }
    }
  },
  "importlib-metadata": {
    "image_name": "importlib_metadata",
    "alt_image_name": "importlib_metadata",
    "description": "<p>Library to access the metadata for a Python package.</p>\n\n<p>This package supplies third-party access to the functionality of <a href=\"https://docs.python.org/3/library/importlib.metadata.html\">importlib.metadata</a> including improvements added to subsequent Python versions.</p>\n\n",
    "site_name": "github",
    "link_to_site": "https://github.com/python/importlib_metadata",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/python/importlib_metadata/blob/main/LICENSE",
    "usage_notes": "<p>Let\u2019s say you wanted to get the version string for a package you\u2019ve installed using pip. We start by creating a virtual environment and installing something into it:</p>\n<pre><code>",
    " python3 -m venv example<br>": "",
    " source example/bin/activate<br>": "(example) $ pip install importlib_metadata<br>\n(example) $ pip install wheel<br>\n</code></pre>\n\n<p>You can get the version string for <code>wheel</code> by running the following:</p>\n<pre><code>\n(example) $ python<br>\n&gt;&gt;&gt; from importlib_metadata import version<br>\n&gt;&gt;&gt; version('wheel')<br>\n'0.32.3'<br>\n</code></pre>\n\n<p>You can also get a collection of entry points selectable by properties of the EntryPoint (typically \u2018group\u2019 or \u2018name\u2019), such as <code>console_scripts</code>, <code>distutils.commands</code> and others. Each group contains a collection of EntryPoint objects.</p>\n\n<p>You can get the metadata for a distribution:</p>\n<pre><code>\n&gt;&gt;&gt; list(metadata('wheel'))<br>\n['Metadata-Version', 'Name', 'Version', 'Summary', 'Home-page', 'Author', 'Author-email', 'Maintainer', 'Maintainer-email', 'License', 'Project-URL', 'Project-URL', 'Project-URL', 'Keywords', 'Platform', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Classifier', 'Requires-Python', 'Provides-Extra', 'Requires-Dist', 'Requires-Dist']<br>\n</code></pre>\n\n<p>Please refer to the <a href=\"https://importlib-metadata.readthedocs.io/en/latest/using.html#using\">readthedocs.io</a> guide for more instructions on using this package.</p>",
    "tags": "programming_tools",
    "versions": {
      "6.8.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "1eb5061d8f8cfd8eacec346f9c1435f6731e676c5000fc5dbde012fef65869d2"
          }
        ]
      }
    }
  },
  "beautifulsoup4": {
    "image_name": "beautifulsoup4",
    "alt_image_name": "beautifulsoup4",
    "description": "<p>Beautiful Soup is a library that makes it easy to scrape information from web pages. It sits atop an HTML or XML parser, providing Pythonic idioms for iterating, searching, and modifying the parse tree.</p>\n\n",
    "site_name": "https://www.crummy.com/software/BeautifulSoup/",
    "link_to_site": "https://www.crummy.com/software/BeautifulSoup/",
    "site_name_license": "MIT License (MIT)",
    "link_to_license": "https://github.com/wention/BeautifulSoup4/blob/master/COPYING.txt",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://www.crummy.com/software/BeautifulSoup/\">www.crummy.com/software/BeautifulSoup/</a>.</p>",
    "tags": "utility web",
    "versions": {
      "4.11.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "1d24392d77fafbbec078c74ec0cff269424ec8323302970bfe0cf44a24cccf0b"
          }
        ]
      }
    }
  },
  "cytoolz": {
    "image_name": "cytoolz",
    "alt_image_name": "cytoolz",
    "description": "<p>Cython implementation of the\n<a class=\"reference external\" href=\"https://github.com/pytoolz/toolz\"><tt class=\"docutils literal\">toolz</tt></a> <a class=\"reference external\" href=\"https://pypi.python.org/pypi/toolz/\">package,</a> which\nprovides high performance utility functions for iterables, functions,\nand dictionaries.</p>\n<p><tt class=\"docutils literal\">toolz</tt> is a pure Python package that borrows heavily from contemporary\nfunctional languanges.  It is designed to interoperate seamlessly with other\nlibraries including <tt class=\"docutils literal\">itertools</tt>, <tt class=\"docutils literal\">functools</tt>, and third party libraries.\nHigh performance functional data analysis is possible with builtin types\nlike <tt class=\"docutils literal\">list</tt> and <tt class=\"docutils literal\">dict</tt>, and user-defined data structures; and low memory\nusage is achieved by using the iterator protocol and returning iterators\nwhenever possible.</p>\n<p><tt class=\"docutils literal\">cytoolz</tt> implements the same API as <tt class=\"docutils literal\">toolz</tt>.  The main differences are\nthat <tt class=\"docutils literal\">cytoolz</tt> is faster (typically 2-5x faster with a few spectacular\nexceptions) and <tt class=\"docutils literal\">cytoolz</tt> offers a C API that is accessible to other\nprojects developed in Cython.  Since <tt class=\"docutils literal\">toolz</tt> is able to process very\nlarge (potentially infinite) data sets, the performance increase gained by\nusing <tt class=\"docutils literal\">cytoolz</tt> can be significant.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/pytoolz/cytoolz",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/pytoolz/cytoolz/blob/master/LICENSE.txt",
    "usage_notes": "<p>Complete documentation is available at <a href=\"https://toolz.readthedocs.io/en/latest/\">github</a> including the <a href=\"https://toolz.readthedocs.io/en/latest/api.html\">API reference</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.12.3.post0": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "1df8c88e5f0341e96343bdc76b3f95b72278691192adf3c01660609a367aeb31"
          }
        ]
      }
    }
  },
  "jupyter-telemetry": {
    "image_name": "jupyter-telemetry",
    "alt_image_name": "jupyter-telemetry",
    "description": "<p>Jupyter Telemetry enables Jupyter Applications (e.g. Jupyter Server, Jupyter Notebook, JupyterLab, JupyterHub, etc.) to record events\u2014i.e. actions by application users\u2014and transmit them to remote (or local) destinations as structured data.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyter/telemetry",
    "site_name_license": "BSD 3",
    "link_to_license": "https://github.com/ibm-z-oss-oda/telemetry/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/jupyter/telemetry\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "0.1.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "21bd4563f9a1f20302dbcad07bfdf36d9de67f9d2cb121dfcc7f9e9426645a90"
          }
        ]
      }
    }
  },
  "markdown": {
    "image_name": "markdown",
    "alt_image_name": "markdown",
    "description": "\n<p>This is a Python implementation of John Gruber's <a href=\"https://daringfireball.net/projects/markdown/\">Markdown</a>. It is almost completely compliant with the reference implementation, though there are a few known issues. See <a href=\"https://python-markdown.github.io/#Features\">Features</a> for information on what exactly is supported and what is not.</p>\n\n<p>Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML).</p>\n\n<p>Thus, \u201cMarkdown\u201d is two things: (1) a plain text formatting syntax; and (2) a software tool that converts the plain text formatting to HTML.</p>",
    "site_name": "python-markdown.github.io",
    "link_to_site": "https://python-markdown.github.io/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/Python-Markdown/markdown/blob/master/LICENSE.md",
    "usage_notes": "<p>First and foremost, Python-Markdown is intended to be a python library module used by various projects to convert Markdown syntax into HTML.</p>\n<p>To use markdown as a module:</p>\n<pre><code>\nimport markdown<br>\nhtml = markdown.markdown(your_text_string)<br>\n</code></pre>\n<p>Additional notes can be found on the official <a href=\"https://python-markdown.github.io/reference/\">reference</a>.</p>",
    "tags": "languages",
    "versions": {
      "3.4.1.post1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "b1faacc92c940b2947d591197b61d664412f9d6c1a71c60a72494ebc02206a17"
          }
        ]
      }
    }
  },
  "tqdm": {
    "image_name": "tqdm",
    "alt_image_name": "tqdm",
    "description": "<p><code>tqdm</code> means \"progress\" in Arabic (taqadum) and is an abbreviation for \"I love you so much\" in Spanish (te quiero demasiado).</p>\n\n<p>Instantly make your loops show a smart progress meter - just wrap any iterable with tqdm(iterable), and you're done!</p>\n",
    "site_name": "tqdm.github.io",
    "link_to_site": "https://tqdm.github.io/",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/tqdm/tqdm/blob/master/LICENCE",
    "usage_notes": "<pre><code>\nfrom tqdm import tqdm<br>\nfor i in tqdm(range(10000)):<br>\n    ...<br>\n</code></pre>\n\n<br>\n\n\n<pre><code>\n76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         | 7568/10000 [00:33<00:10, 229.00it/s]<br>\n</code></pre>\n\n<p>See full docs on <a href=\"https://tqdm.github.io/\">tqdm.github.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "4.66.5": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "493c440a5da9fb22b24296bfbb7abc2bf22fc5cd219f80e348cf660fa73ae570"
          }
        ]
      }
    }
  },
  "treelib": {
    "image_name": "treelib",
    "alt_image_name": "treelib",
    "description": "<p>The <a href=\"http://en.wikipedia.org/wiki/Tree_%28data_structure%29\">Tree</a> is an important data structure in computer science. Examples are shown in ML algorithm designs such as random forest tree and software engineering such as file system index. <code>treelib</code> is created to provide an efficient implementation of tree data structure in Python.</p>\n\n<p>The main features of treelib include:</p>\n\n<ul>\n\n<li>Efficient operation of node searching, O(1).</li>\n\n<li>Support common tree operations like traversing, insertion, deletion, node moving, shallow/deep copying, subtree cutting etc. </li>\n\n<li>Support user-defined data payload to accelerate your model construction. </li>\n\n<li>Pretty tree showing and text/json dump for pretty show and offline analysis. </li>\n\n</ul>",
    "site_name": "readthedocs.io",
    "link_to_site": "https://treelib.readthedocs.io/en/latest/",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/caesar0301/treelib/blob/master/LICENSE",
    "usage_notes": "<p>Basic usage:</p>\n\n<pre><code>\n&gt;&gt;&gt; from treelib import Node, Tree<br>\n&gt;&gt;&gt; tree = Tree()<br>\n&gt;&gt;&gt; tree.create_node(\"Harry\", \"harry\")  # root node<br>\n&gt;&gt;&gt; tree.create_node(\"Jane\", \"jane\", parent=\"harry\")<br>\n&gt;&gt;&gt; tree.create_node(\"Bill\", \"bill\", parent=\"harry\")<br>\n&gt;&gt;&gt; tree.create_node(\"Diane\", \"diane\", parent=\"jane\")<br>\n&gt;&gt;&gt; tree.create_node(\"Mary\", \"mary\", parent=\"diane\")<br>\n&gt;&gt;&gt; tree.create_node(\"Mark\", \"mark\", parent=\"jane\")<br>\n&gt;&gt;&gt; tree.show()<br>\nHarry<br>\n\u251c\u2500\u2500 Bill<br>\n\u2514\u2500\u2500 Jane<br>\n    \u251c\u2500\u2500 Diane<br>\n    \u2502   \u2514\u2500\u2500 Mary<br>\n    \u2514\u2500\u2500 Mark<br>\n</code></pre>\n\n<p>Refer to <a href=\"https://treelib.readthedocs.io/en/latest/\">readthedocs.io</a> for more information.</p>",
    "tags": "utility graphics",
    "versions": {
      "1.6.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "20df4af4a554df9fd891ecefd31508436614942c822c043e3f5dcead07760395"
          }
        ]
      }
    }
  },
  "certipy": {
    "image_name": "certipy",
    "alt_image_name": "certipy",
    "description": "<p>A simple python tool for creating certificate authorities and certificates on the fly.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/LLNL/certipy",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/LLNL/certipy/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/LLNL/certipy/blob/master/README.md\">github.com</a>.</p>",
    "tags": "security",
    "versions": {
      "0.1.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "22187da55d5f541a4c1d1559a6a30dd6e4824123e0f21d243e68e8c8a331beb8"
          }
        ]
      }
    }
  },
  "cachetools": {
    "image_name": "cachetools",
    "alt_image_name": "cachetools",
    "description": "<p>This module provides various memoizing collections and decorators.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/tkem/cachetools",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/tkem/cachetools/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://cachetools.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "4.2.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "2c010ef2d9f9ceacb0b87eb3f91de00dc7fda3337df5e2f0eb2f5f87efe2d1bb"
          }
        ]
      }
    }
  },
  "libxslt": {
    "image_name": "libxslt",
    "alt_image_name": "libxslt",
    "description": "<p>libxslt is the <a href=\"https://www.w3.org/TR/xslt\">XSLT</a> C library developed for the GNOME project. XSLT itself is a an XML language to define transformation for XML. libxslt is based on libxml2, the XML C library developed for the GNOME project. It also implements most of the <a href=\"http://www.exslt.org/\">EXSLT</a> set of processor-portable extension functions and some of Saxon's evaluate and expressions extensions.</p>\n\n<p>People can either embed the library in their application or use xsltproc, the command line processing tool. This library is free software and can be reused in commercial applications.</p>\n",
    "site_name": "gitlab.gnome.org/GNOME/libxslt/",
    "link_to_site": "https://gitlab.gnome.org/GNOME/libxslt/-/wikis/home",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/GNOME/libxslt/blob/master/Copyright",
    "usage_notes": "<p>A <a href=\"https://gnome.pages.gitlab.gnome.org/libxslt/devhelp/\"reference manual</a> and <a href=\"https://gnome.pages.gitlab.gnome.org/libxslt/tutorial/libxslttutorial.html\">tutorial</a> and <a href=\"https://gnome.pages.gitlab.gnome.org/libxslt/tutorial2/libxslt_pipes.html\">extended tutorial</a> are available for documentation.</p>",
    "tags": "languages",
    "versions": {
      "1.1.43": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "8743a1f4b564956bb9c2f5ce08053a91aa17f30a762cce65cd0e42300103ec39"
          }
        ]
      }
    }
  },
  "uri-template": {
    "image_name": "uri-template",
    "alt_image_name": "uri-template",
    "description": "<p>An implementation of RFC 6570 URI Templates.</p>",
    "site_name": "gitlab.linss.com",
    "link_to_site": "https://gitlab.linss.com/open-source/python/uri-template",
    "site_name_license": "MIT",
    "link_to_license": "https://gitlab.linss.com/open-source/python/uri-template/-/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://gitlab.linss.com/open-source/python/uri-template\">gitlab.linss.com</a>.</p>",
    "tags": "utility web",
    "versions": {
      "1.3.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "23ad977f7555c9de5f375ad2ef43bcc0c7ee83422bfe4ead5a7b041e769e2c07"
          }
        ]
      }
    }
  },
  "tenacity": {
    "image_name": "tenacity",
    "alt_image_name": "tenacity",
    "description": "\n<p>Tenacity is an Apache 2.0 licensed general-purpose retrying library, written in Python, to simplify the task of adding retry behavior to just about anything. </p>",
    "site_name": "github.com/ibm-z-oss-oda/tenacity",
    "link_to_site": "https://github.com/ibm-z-oss-oda/tenacity",
    "site_name_license": "Apache License 2.0",
    "link_to_license": "https://github.com/ibm-z-oss-oda/tenacity/blob/main/LICENSE",
    "usage_notes": "<p>For advanced tool documentation, refer to <a href=\"https://tenacity.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "8.2.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "6a6c7933448844f8cb50cad5881398395d11eb699e546fc04dedc2a095305211"
          }
        ]
      }
    }
  },
  "dask": {
    "image_name": "dask",
    "alt_image_name": "dask",
    "description": "<p>Dask is a flexible library for parallel computing in Python.</p>\n\n<p>Dask is composed of two parts:</p>\n<ul>\n<li>Dynamic task scheduling optimized for computation. This is similar to Airflow, Luigi, Celery, or Make, but optimized for interactive computational workloads.</li>\n\n<li>\u201cBig Data\u201d collections like parallel arrays, dataframes, and lists that extend common interfaces like NumPy, Pandas, or Python iterators to larger-than-memory or distributed environments. These parallel collections run on top of dynamic task schedulers.</li>\n</ul>",
    "site_name": "dask.org",
    "link_to_site": "https://dask.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/dask/dask/blob/main/LICENSE.txt",
    "usage_notes": "<p>Reference the <a href=\"https://docs.dask.org/en/stable/10-minutes-to-dask.html\">10 minutes to dask</a> tutorial from <a href=\"https://dask.org/\">dask.org</a> for a guide to getting started and further documentation.</p>",
    "tags": "programming_tools math machine_learning",
    "versions": {
      "2024.9.1.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "198b6d6a85cffa14b54cf9c9822b4ff81d6a55aca1d92ef19185a0ef48567998"
          }
        ]
      }
    }
  },
  "sqlalchemy": {
    "image_name": "sqlalchemy",
    "alt_image_name": "sqlalchemy",
    "description": "<p>SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL. SQLAlchemy provides a full suite of well known enterprise-level persistence patterns, designed for efficient and high-performing database access, adapted into a simple and Pythonic domain language.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/sqlalchemy/sqlalchemy",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/sqlalchemy/sqlalchemy/blob/main/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/sqlalchemy/sqlalchemy\">github.com</a>.</p>",
    "tags": "programming_tools database",
    "versions": {
      "2.0.37": {
        "dist": [
          {
            "py_version": "cp313",
            "sha256": "9e22192f6a87a4614875975d1095304b73efe196aef31eff1b3d2600cf987b54"
          }
        ]
      }
    }
  },
  "notebook-shim": {
    "image_name": "notebook-shim",
    "alt_image_name": "notebook-shim",
    "description": "<p>This project provides a way for JupyterLab and other frontends to switch to Jupyter Server for their Python Web application backend.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyter/notebook_shim",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyter/notebook_shim/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/jupyter/notebook_shim\">github.com</a>.</p>",
    "tags": "utility web",
    "versions": {
      "0.2.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "951a6dd620afb5d3829dd7963a8fd73d961d3ca5b45f54c62ce9a3d9265e86e3"
          }
        ]
      }
    }
  },
  "entrypoints": {
    "image_name": "entrypoints",
    "alt_image_name": "etrypoints",
    "description": "\n<p>Entry points are a way for Python packages to advertise objects with some common interface. The most common examples are <code>console_scripts</code> entry points, which define shell commands by identifying a Python function to run.</p>\n\n<p>Groups of entry points, such as <code>console_scripts</code>, point to objects with similar interfaces. An application might use a group to find its plugins, or multiple groups if it has different kinds of plugins.</p>\n\n<p>The entrypoints module contains functions to find and load entry points.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/takluyver/entrypoints",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/takluyver/entrypoints/blob/master/LICENSE",
    "usage_notes": "<p>To use this image, refer to <a href=\"https://github.com/takluyver/entrypoints/blob/master/README.rst\">github</a> and the <a href=\"https://packaging.python.org/en/latest/guides/distributing-packages-using-setuptools/#entry-points\">entry_points</a> section of the Python Packaging User Guide.</p>",
    "tags": "utility programming_tools",
    "versions": {
      "0.4": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "49c1e85ebfaa0d251db6e2d1f6dba2c69316e88907c71048f1cb4cde33aac320"
          }
        ]
      }
    }
  },
  "tblib": {
    "image_name": "tblib",
    "alt_image_name": "tblib",
    "description": "<p>Serialization library for Exceptions and Tracebacks. It allows you to:</p>\n\n<ul>\n\n<li><a href=\"https://docs.python.org/3/library/pickle.html\">Pickle</a> tracebacks and raise exceptions with pickled tracebacks in different processes. This allows better error handling when running code over multiple processes (imagine multiprocessing, billiard, futures, celery etc). </li>\n\n<li>Create traceback objects from strings (the <code>from_string</code> method). No pickling is used. </li>\n\n<li>Serialize tracebacks to/from plain dicts (the <code>from_dict</code> and <code>to_dict</code> methods). No pickling is used. </li>\n\n<li>Raise the tracebacks created from the aforementioned sources. </li>\n\n<li>Pickle an Exception together with its traceback and exception chain (<code>raise ... from ...</code>)</li>\n\n</ul>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/ionelmc/python-tblib",
    "site_name_license": "BSD2",
    "link_to_license": "https://github.com/ionelmc/python-tblib/blob/master/LICENSE",
    "usage_notes": "<p>Documentation for this package is available on <a href=\"https://python-tblib.readthedocs.io/en/latest/readme.html\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "1.7.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "f3cd22a63042625ea011d5dda3828e561eacfc343e8d84abef50b85f4170a1d9"
          }
        ]
      }
    }
  },
  "ipython": {
    "image_name": "ipython",
    "alt_image_name": "ipython",
    "description": "\n<p>IPython provides a rich toolkit to help you make the most out of using Python interactively. Its main components are:</p>\n\n<p> - A powerful interactive Python shell</p>\n\n<p> - A Jupyter kernel to work with Python code in Jupyter notebooks and other interactive frontends.</p>",
    "site_name": "ipython.org",
    "link_to_site": "https://ipython.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/ipython/ipython/blob/master/LICENSE",
    "usage_notes": "<p>You don\u2019t need to know anything beyond Python to start using IPython \u2013 just type commands as you would at the standard Python prompt. But IPython can do much more than the standard prompt.</p>\n\n<p>Start IPython by issuing the ipython command from your shell, you should be greeted by the following:</p>\n<pre><code>\nPython 3.6.0<br>\nType 'copyright', 'credits' or 'license' for more information<br>\nIPython 6.0.0.dev -- An enhanced Interactive Python. Type '?' for help.<br>\n<br>\nIn [1]:<br>\n</code></pre>\n\n<p>Unlike the Python REPL, you will see that the input prompt is <code>In [N]:</code> instead of <code>&gt;&gt;&gt;</code>. The number <code>N</code> in the prompt will be used later in this tutorial but should usually not impact the computation.</p>\n\n<p>You should be able to type single line expressions and press enter to evaluate them. If an expression is incomplete, IPython will automatically detect this and add a new line when you press Enter instead of executing right away.</p>\n\n<p>Feel free to explore multi-line text input. Unlike many other REPLs, with IPython you can use the up and down arrow keys when editing multi-line code blocks.</p>\n\n<p>Here is an example of a longer interaction with the IPython REPL, which we often refer to as an IPython session:</p>\n<pre><code>\nIn [1]: print('Hello IPython')<br>\nHello IPython<br>\n<br>\nIn [2]: 21 * 2<br>\nOut[2]: 42<br>\n<br>\nIn [3]: def say_hello(name):<br>\n   ...:     print('Hello {name}'.format(name=name))<br>\n   ...:<br>\n</code></pre>\n\n<p>Moving forward, refer to the tutorial on <a href=\"https://ipython.readthedocs.io/en/stable/interactive/tutorial.html\">readthedocs.io</a> for next steps and further details.</p>",
    "tags": "programming_tools",
    "versions": {
      "8.13.2.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "1740e53831df2046deb2e59906b879751fcaf01b707e9d22e27c4ccdcfac0494"
          }
        ]
      }
    }
  },
  "wcwidth": {
    "image_name": "wcwidth",
    "alt_image_name": "wcwidth",
    "description": "<p>This library is mainly for CLI programs that carefully produce output for Terminals, or make pretend to be an emulator.</p><p> The printable length of most strings are equal to the number of cells they occupy on the screen <code>1 charater : 1 cell</code>. However, there are categories of characters that occupy 2 cells (full-wide), and others that occupy 0 cells (zero-width).</p><p>POSIX.1-2001 and POSIX.1-2008 conforming systems provide <a href=\"http://man7.org/linux/man-pages/man3/wcwidth.3.html\">wcwidth(3)</a> and <a href=\"http://man7.org/linux/man-pages/man3/wcswidth.3.html\">wcswidth(3)</a> C functions of which this python module\u2019s functions precisely copy. These functions return the number of cells a unicode string is expected to occupy.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/jquast/wcwidth",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/jquast/wcwidth/blob/master/LICENSE",
    "usage_notes": "<p> given the following phrase (Japanese),</p>\n<code> text = u'\u30b3\u30f3\u30cb\u30c1\u30cf'</code>\n\n<p>Python incorrectly uses the string length of 5 codepoints rather than the printible length of 10 cells, so that when using the rjust function, the output length is wrong:</p>\n\n<pre><code>\n&gt;&gt;&gt; print(len('\u30b3\u30f3\u30cb\u30c1\u30cf'))<br>\n5<br>\n<br>\n&gt;&gt;&gt; print('\u30b3\u30f3\u30cb\u30c1\u30cf'.rjust(20, '_'))<br>\n_____\u30b3\u30f3\u30cb\u30c1\u30cf<br>\n</code></pre>\n\n<p>By defining our own \u201crjust\u201d function that uses wcwidth, we can correct this:</p>\n\n<pre><code>\n&gt;&gt;&gt; def wc_rjust(text, length, padding=' '):<br>\n...    from wcwidth import wcswidth<br>\n...    return padding * max(0, (length - wcswidth(text))) + text<br>\n...<br>\n</code></pre>\n\n<p>Our Solution uses wcswidth to determine the string length correctly:</p>\n\n<pre><code>\n&gt;&gt;&gt; from wcwidth import wcswidth<br>\n&gt;&gt;&gt; print(wcswidth('\u30b3\u30f3\u30cb\u30c1\u30cf'))<br>\n10<br>\n<br>\n>>> print(wc_rjust('\u30b3\u30f3\u30cb\u30c1\u30cf', 20, '_'))<br>\n__________\u30b3\u30f3\u30cb\u30c1\u30cf<br>\n</code></pre>",
    "tags": "utility",
    "versions": {
      "0.2.6": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "795b138f6875577cd91bba52baf9e445cd5118fd32723b460e30a0af30ea230e"
          }
        ]
      }
    }
  },
  "future": {
    "image_name": "future",
    "alt_image_name": "future",
    "description": "<p><code>python-future</code> is the missing compatibility layer between Python 2 and Python 3. It allows you to use a single, clean Python 3.x-compatible codebase to support both Python 2 and Python 3 with minimal overhead.</p>",
    "site_name": "python-future.org",
    "link_to_site": "https://python-future.org/",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/PythonCharmers/python-future/blob/master/LICENSE.txt",
    "usage_notes": "<p><code>future</code> is designed to be used as follows:</p>\n<pre><code>\nfrom __future__ import (absolute_import, division,<br>\n                        print_function, unicode_literals)<br>\nfrom builtins import (<br>\n         bytes, dict, int, list, object, range, str,<br>\n         ascii, chr, hex, input, next, oct, open,<br>\n         pow, round, super,<br>\n         filter, map, zip)<br>\n</code></pre>\n<p>followed by predominantly standard, idiomatic Python 3 code that then runs similarly on Python 2.6/2.7 and Python 3.3+.</p>\n<p>The imports have no effect on Python 3. On Python 2, they shadow the corresponding builtins, which normally have different semantics on Python 3 versus 2, to provide their Python 3 semantics.</p>\n<p>Refer to further notes on <a href=\"https://python-future.org/quickstart.html\">python-future.org</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "0.18.3.post3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "9db0f8fa25df620e8c6cee1a1d53dc852f4fad80f248fea3940f71024e18eb94"
          }
        ]
      }
    }
  },
  "qtconsole": {
    "image_name": "qtconsole",
    "alt_image_name": "qtconsole",
    "description": "<p>A rich Qt-based console for working with Jupyter kernels, supporting rich media output, session export, and more.</p>\n\n<p>The Qtconsole is a very lightweight application that largely feels like a terminal, but provides a number of enhancements only possible in a GUI, such as inline figures, proper multiline editing with syntax highlighting, graphical calltips, and more.</p>",
    "site_name": "jupyter.org",
    "link_to_site": "https://jupyter.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/jupyter/qtconsole/blob/master/LICENSE",
    "usage_notes": "<p>The console can be run with <code>jupyter qtconsole</code>.</p>\n<p>Please refer to <a href=\"https://qtconsole.readthedocs.io/en/latest/\">readthedocs.io</a> for usage notes.</p>",
    "tags": "programming_tools web",
    "versions": {
      "5.3.2.post2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "63ab18eb13317ecbe7005d5907e5d5fe16719b04b25d87aee080f4006ba3cbc9"
          }
        ]
      }
    }
  },
  "exceptiongroup": {
    "image_name": "exceptiongroup",
    "alt_image_name": "exceptiongroup",
    "description": "<p>This is a backport of the BaseExceptionGroup and ExceptionGroup classes from Python 3.11.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/agronholm/exceptiongroup",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/agronholm/exceptiongroup/blob/main/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://pypi.org/project/exceptiongroup/\">pypi.org</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "1.2.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "e80f0bbcfc6cdbadabbc3ccb4e8435a6b7251289b075e31b45ca3a22fce64324"
          }
        ]
      }
    }
  },
  "markdown-editor": {
    "image_name": "markdown-editor",
    "alt_image_name": "markdown-editor",
    "description": "<p>Markdown-editor provides a standalone editor for your local markdown files.</p>\n<p>Features include:</p>\n\n<ul>\n<li>Side-by-side markdown editor & html preview</li>\n<li>Live, when you type html preview</li>\n<li>Codehilite & markdown extra syntax support by default</li>\n<li>Github syntax support</li>\n<li>Github styles for rendering and codehilite</li>\n<li>Scrollbars sync</li>\n</ul>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/ncornette/Python-Markdown-Editor",
    "site_name_license": "MIT",
    "link_to_license": "https://opensource.org/licenses/MIT",
    "usage_notes": "<p>Try entering <code>markdown_edit README.md</code> for a file <code>README.md</a></p>\n<p>It will open the editor in your browser!</p>\n\n<p>Launch editor without input file: <code>markdown_edit</code></p>\n\n<p>Edit markdown file and save both markdown and html outputs: <code>markdown_edit -f README.html README.md</code></p>\n\n<p>You can import this script as a module to write your own applications based on the markdown editor:</p>\n\n<pre><code>\nfrom markdown_editor import web_edit<br>\nfrom markdown_editor.editor import MarkdownDocument<br>\n<br>\n# ...<br>\n<br>\nMY_HTML_HEAD = 'Editor title'<br>\n<br>\ndef action_send(document):<br>\n<br>\n    send_markdown_text(document.text)<br>\n    # or<br>\n    send_raw_html_code(document.getHtml())<br>\n    # or<br>\n    send_html_with_styles(document.getHtmlPage())<br>\n<br>\n    return html_to_display_as_result, keep_running_local_server<br>\n<br>\nif __name__ == '__main__:<br>\n    doc = MarkdownDocument()<br>\n    web_edit.start(doc,<br>\n        custom_actions=[<br>\n                ('Send', action_send),<br>\n        ],<br>\n        title=MY_HTML_HEAD)<br>\n</code></pre>",
    "tags": "programming_tools web",
    "versions": {
      "1.0.7.post3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "039f0c5320f9283bcb5b36ea38ed02d07b634fc9bee9d51fca155293cb84cd2e"
          }
        ]
      }
    }
  },
  "jupyterhub-idle-culler": {
    "image_name": "jupyterhub-idle-culler",
    "alt_image_name": "jupyterhub-idle-culler",
    "description": "<p>jupyterhub-idle-culler provides a JupyterHub service to identify and stop idle or long-running Jupyter servers via JupyterHub.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyterhub/jupyterhub-idle-culler",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyterhub/jupyterhub-idle-culler/blob/main/COPYING.md",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/jupyterhub/jupyterhub-idle-culler/blob/main/README.md\">github.com</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.3.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "02dc2d76df24c56b9b34303f33f65bf4cf20f32f017fdac20af91c6e58a44921"
          }
        ]
      }
    }
  },
  "regex": {
    "image_name": "regex",
    "alt_image_name": "regex",
    "description": "\n<p>This regex implementation is backwards-compatible with the standard 're' module, but offers additional functionality. </p>",
    "site_name": "github",
    "link_to_site": "https://github.com/ibm-z-oss-oda/mrab-regex",
    "site_name_license": "Apache 2.0",
    "link_to_license": "https://github.com/ibm-z-oss-oda/mrab-regex/blob/hg/LICENSE.txt",
    "usage_notes": "<p>Documentation can be found on <a href=\"https://github.com/ibm-z-oss-oda/mrab-regex\">github.com</a>.</p>",
    "tags": "utility languages",
    "versions": {
      "2024.11.6": {
        "dist": [
          {
            "py_version": "cp311",
            "sha256": "213d5df0025839f77348dc19c482c1c589dd886c698652f8eacd3a3f0adf4de7"
          },
          {
            "py_version": "cp312",
            "sha256": "869e9c76ecb9818d14d0d4838a5cc6dbec06bcee7aabbd2b1027a389819a59fd"
          },
          {
            "py_version": "cp313",
            "sha256": "19af83f3369b4b3fb8f2c52db47b6eb99920829744087c5e80312dde525ce22a"
          }
        ]
      }
    }
  },
  "joblib": {
    "image_name": "joblib",
    "alt_image_name": "joblib",
    "description": "<p>Joblib is a set of tools to provide lightweight pipelining in Python. In particular, it offers:</p>\n    <p>1 - transparent disk-caching of functions and lazy re-evaluation (memoize pattern)</p>\n    <p>2 - easy simple parallel computing</p>\n\n<p>Joblib is optimized to be fast and robust on large data in particular and has specific optimizations for numpy arrays. </p>",
    "site_name": "readthedocs.io",
    "link_to_site": "https://joblib.readthedocs.io/en/latest/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/joblib/joblib/blob/master/LICENSE.txt",
    "usage_notes": "<p>Features of Joblib include:</p>\n\n<h4>Transparent and fast disk-caching of output value:</h4>\n<p>A memoize or make-like functionality for Python functions that works well for arbitrary Python objects, including very large numpy arrays. Separate persistence and flow-execution logic from domain logic or algorithmic code by writing the operations as a set of steps with well-defined inputs and outputs: Python functions. Joblib can save their computation to disk and rerun it only if necessary:</p>\n\n<pre><code>\n&gt;&gt;&gt; from joblib import Memory<br>\n&gt;&gt;&gt; cachedir = 'your_cache_dir_goes_here'<br>\n&gt;&gt;&gt; mem = Memory(cachedir)<br>\n&gt;&gt;&gt; import numpy as np<br>\n&gt;&gt;&gt; a = np.vander(np.arange(3)).astype(float)<br>\n&gt;&gt;&gt; square = mem.cache(np.square)<br>\n&gt;&gt;&gt; b = square(a)                    <br>\n________________________________________________________________________________<br>\n[Memory] Calling square...<br>\nsquare(array([[0., 0., 1.],<br>\n       [1., 1., 1.],<br>\n       [4., 2., 1.]]))<br>\n___________________________________________________________square - 0...s, 0.0min<br>\n<br>\n&gt;&gt;&gt; c = square(a)<br>\n&gt;&gt;&gt; # The above call did not trigger an evaluation<br>\n</code></pre>\n\n<h4>Embarrassingly parallel helper:</h4>\n<p>To make it easy to write readable parallel code and debug it quickly:</p>\n\n<pre><code>\n&gt;&gt;&gt; from joblib import Parallel, delayed<br>\n&gt;&gt;&gt; from math import sqrt<br>\n&gt;&gt;&gt; Parallel(n_jobs=1)(delayed(sqrt)(i**2) for i in range(10))<br>\n[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]<br>\n</code></pre>\n\n<h4>Fast compressed Persistence:</h4>\n<p>A replacement for pickle to work efficiently on Python objects containing large data ( joblib.dump & joblib.load ).</p>\n\n<p>Please see further documentation on <a href=\"https://joblib.readthedocs.io/en/latest/index.html\">readthedocs.io</a>.</p>",
    "tags": "utility",
    "versions": {
      "1.4.2.post0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "529822025a2cb3577cbdfda757f7397748c73512fa7d8cf5d10ff95bcdbcf265"
          }
        ]
      }
    }
  },
  "lxml": {
    "image_name": "lxml",
    "alt_image_name": "lxml",
    "description": "<p>lxml is a Pythonic, mature binding for the libxml2 and libxslt libraries. It provides safe and convenient access to these libraries using the ElementTree API.</p>\n\n<p>It extends the ElementTree API significantly to offer support for XPath, RelaxNG, XML Schema, XSLT, C14N and much more.</p>",
    "site_name": "lxml.de",
    "link_to_site": "https://lxml.de/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/lxml/lxml/blob/master/LICENSE.txt",
    "usage_notes": "<p>lxml.etree follows the <a href=\"http://effbot.org/zone/element-index.htm\">ElementTree</a> API as much as possible, building it on top of the native libxml2 tree. Therefore, it's useful to start\nby examining <code>lxml.etree</code> first.</p>\n\n<p>A common way to import lxml.etree is as follows:</p>\n\n<pre><code>\n&gt;&gt;&gt; from lxml import etree<br>\n</code></pre>\n\n<p>If your code only uses the ElementTree API and does not rely on any functionality that is specific to <code>lxml.etree</code>, you can also use (any part of) the following import chain as a fall-back to the original ElementTree:</p>\n\n<pre><code>\ntry:<br>\n  from lxml import etree<br>\n  print(\"running with lxml.etree\")<br>\nexcept ImportError:<br>\n  try:<br>\n    # Python 2.5<br>\n    import xml.etree.cElementTree as etree<br>\n    print(\"running with cElementTree on Python 2.5+\")<br>\n  except ImportError:<br>\n    try:<br>\n      # Python 2.5<br>\n      import xml.etree.ElementTree as etree<br>\n      print(\"running with ElementTree on Python 2.5+\")<br>\n    except ImportError:<br>\n      try:<br>\n        # normal cElementTree install<br>\n        import cElementTree as etree<br>\n        print(\"running with cElementTree\")<br>\n      except ImportError:<br>\n        try:<br>\n          # normal ElementTree install<br>\n          import elementtree.ElementTree as etree<br>\n          print(\"running with ElementTree\")<br>\n        except ImportError:<br>\n          print(\"Failed to import ElementTree from any known place\")<br>\n</code></pre>\n\n<p>Please proceed to the tutorial on <a href=\"https://lxml.de/tutorial.html\">lxml.de</a> for further tutorials and documentation.</p>",
    "tags": "languages",
    "versions": {
      "5.1.0": {
        "dist": [
          {
            "py_version": "cp312",
            "sha256": "50eca9c30d25c2d7e71b63bfe63d35fd52272fee79ffa09d242fc5a0b9dc4166"
          },
          {
            "py_version": "cp313",
            "sha256": "3662846e500b5648d9f9db9b8853c39417c74614daadeefcc67057740f408fe4"
          }
        ]
      }
    }
  },
  "glib": {
    "image_name": "glib",
    "alt_image_name": "glib",
    "description": "<p>GLib is the low-level core library that forms the basis for projects such as GTK and GNOME. It provides data structure handling for C, portability wrappers, and interfaces for such runtime functionality as an event loop, threads, dynamic loading, and an object system.</p>\n",
    "site_name": "https://www.gtk.org/",
    "link_to_site": "https://www.gtk.org/",
    "site_name_license": "LGPL",
    "link_to_license": "https://github.ibm.com/ibm-z-oss-oda/glib/blob/main/LICENSES/LGPL-2.1-or-later.txt",
    "usage_notes": "<p>Please refer to documentation on <a href=\"https://docs.gtk.org/glib/\">docs.gtk.org</a>.</p>",
    "tags": "graphics utility",
    "versions": {
      "2.83.2": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "acfdc4dddf7472ab439f8167198625a7a1c25bd83486bd6c59190bcf59b0f5bc"
          }
        ]
      }
    }
  },
  "bleach": {
    "image_name": "bleach",
    "alt_image_name": "bleach",
    "description": "<p>Bleach is an allowed-list-based HTML sanitizing library that escapes or strips\nmarkup and attributes.</p>\n<p>Bleach can also linkify text safely, applying filters that Django's <tt class=\"docutils literal\">urlize</tt>\nfilter cannot, and optionally setting <tt class=\"docutils literal\">rel</tt> attributes, even on links already\nin the text.</p>\n<p>Bleach is intended for sanitizing text from <em>untrusted</em> sources. If you find\nyourself jumping through hoops to allow your site administrators to do lots of\nthings, you're probably outside the use cases. Either trust those users, or\ndon't.</p>\n<p>Because it relies on <a class=\"reference external\" href=\"https://github.com/html5lib/html5lib-python\">html5lib</a>, Bleach is as good as modern browsers at dealing\nwith weird, quirky HTML fragments. And <em>any</em> of Bleach's methods will fix\nunbalanced or mis-nested tags.</p>",
    "site_name": "github",
    "link_to_site": "https://github.com/mozilla/bleach",
    "site_name_license": "APACHE2",
    "link_to_license": "https://github.com/mozilla/bleach/blob/main/LICENSE",
    "usage_notes": "<p>The simplest way to use Bleach is as such:</p>\n<pre><code>\n>>> import bleach<br>\n<br>\n>>> bleach.clean('an &lt;script&gt;evil()&lt;/script&gt; example')<br>\nu'an &amp;lt;script&amp;gt;evil()&amp;lt;/script&amp;gt; example'<br>\n<br>\n>>> bleach.linkify('an http://example.com url')<br>\nu'an &lt;a href=\"http://example.com\" rel=\"nofollow\"&gt;http://example.com&lt;/a&gt; url'<br>\n</pre></code>\n<p>See <a href=\"https://bleach.readthedocs.io/en/latest/\">readthedocs.io</a> for me information.</p>",
    "tags": "security programming_tools",
    "versions": {
      "6.2.0.post1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "fc2c098b3a0484005ba9d1478a756c1bd1c2656d09acd439e4bb5ce59347055b"
          }
        ]
      }
    }
  },
  "jupyterlab-server": {
    "image_name": "jupyterlab-server",
    "alt_image_name": "jupyterlab-server",
    "description": "<p>JupyterLab Server sits between JupyterLab and Jupyter Server, and provides a set of REST API handlers and utilities that are used by JupyterLab.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/jupyterlab/jupyterlab_server",
    "site_name_license": "BSD-3-Clause",
    "link_to_license": "https://github.com/jupyterlab/jupyterlab_server/blob/main/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://jupyterlab-server.readthedocs.io/en/stable/api/index.html\">readthedocs.io</a>.</p>",
    "tags": "utility web",
    "versions": {
      "2.19.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "0c8db5141b2b23dd403e277ee556ec6c9dd8a4da5a3376493c2c488cd5212cd1"
          }
        ]
      }
    }
  },
  "libtiff": {
    "image_name": "libtiff",
    "alt_image_name": "libtiff",
    "description": "<p>PyLibTiff is a package that provides:</p>\n\n    <p>1- a wrapper to the <a href=\"http://www.simplesystems.org/libtiff/\">libtiff</a> library to Python using <a href=\"http://docs.python.org/library/ctypes.html\">ctypes</a>.</p>\n\n    <p>2 - a pure Python module for reading and writing TIFF and LSM files. The images are read as <code>numpy.memmap</code> objects so that it is possible to open images that otherwise would not fit to computers RAM. Both TIFF strips and tiles are supported for low-level data storage.</p>\n\n<p>There exists many Python packages that support reading and writing TIFF files. The PyLibTiff project was started to have an efficient and direct way to read and write TIFF files using the libtiff library without the need to install any unnecessary packages or libraries. The pure Python module was created for reading \"broken\" TIFF files such as LSM files that in some places use different interpretation of TIFF tags than what specified in the TIFF specification document. The libtiff library would just fail reading such files. In addition, the pure Python module is more memory efficient as the arrays are returned as memory maps. Support for compressed files is not implemented yet.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/pearu/pylibtiff",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/pearu/pylibtiff/blob/master/LICENSE",
    "usage_notes": "<p>Example usage of package:</p>\n\n<pre><code>\n&gt;&gt;&gt; from libtiff import TIFFfile, TIFFimage<br>\n&gt;&gt;&gt; # to open a tiff file for reading<br>\n&gt;&gt;&gt; tif = TIFFfile('filename.tif')<br>\n&gt;&gt;&gt; # to return memmaps of images and sample names (eg channel names, SamplesPerPixel>=1)<br>\n&gt;&gt;&gt; samples, sample_names = tiff.get_samples()<br>\n&gt;&gt;&gt; # to create a tiff structure from image data<br>\n&gt;&gt;&gt; tiff = TIFFimage(data, description='')<br>\n&gt;&gt;&gt; # to write tiff structure to file<br>\n&gt;&gt;&gt; tiff.write_file('filename.tif', compression='none') # or 'lzw'<br>\n&gt;&gt;&gt; del tiff # flushes data to disk<br>\n</code></pre>\n\n<p>Additional usage notes are available on <a href=\"https://github.com/pearu/pylibtiff/blob/master/README.md\">github</a>.</p>",
    "tags": "graphics utility",
    "versions": {
      "4.7.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "5d3b1ed29e97a23220133325b8df2018d6f604453761c299532ba66867c05fe3"
          }
        ]
      }
    }
  },
  "parso": {
    "image_name": "parso",
    "alt_image_name": "parso",
    "description": "<p>Parso is a Python parser that supports error recovery and round-trip parsing for different Python versions (in multiple Python versions). Parso is also able to list multiple syntax errors in your python file.</p>\n\n<p>Parso has been battle-tested by <a href=\"https://github.com/davidhalter/jedi\">jedi</a>. It was pulled out of jedi to be useful for other projects as well.</p>\n\n<p>Parso consists of a small API to parse Python and analyse the syntax tree.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/davidhalter/parso",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/davidhalter/parso/blob/master/LICENSE.txt",
    "usage_notes": "<p>A simple example:</p>\n\n<pre><code>\n&gt;&gt;&gt; import parso<br>\n&gt;&gt;&gt; module = parso.parse('hello + 1', version=\"3.9\")<br>\n&gt;&gt;&gt; expr = module.children[0]<br>\n&gt;&gt;&gt; expr<br>\nPythonNode(arith_expr, [<Name: hello@1,0>, <Operator: +>, <Number: 1>])<br>\n&gt;&gt;&gt; print(expr.get_code())<br>\nhello + 1<br>\n&gt;&gt;&gt; name = expr.children[0]<br>\n&gt;&gt;&gt; name<br>\n&lt;Name: hello@1,0&gt;<br>\n&gt;&gt;&gt; name.end_pos<br>\n(1, 5)<br>\n&gt;&gt;&gt; expr.end_pos<br>\n(1, 9)<br>\n</code></pre>\n\n<p>See documentation on <a href=\"https://parso.readthedocs.io/en/latest/\">readthedocs.io</a>.</p>",
    "tags": "programming_tools",
    "versions": {
      "0.8.3": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "08d95674796cc92ce27d43ce8fe938cb9816e7438bff9f10694d42f07d6adfc1"
          }
        ]
      }
    }
  },
  "pandas": {
    "image_name": "pandas",
    "alt_image_name": "pandas",
    "description": "<p>Pandas is a Python package that provides fast, flexible, and expressive data structures designed to make working with \"relational\" or \"labeled\" data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python. Additionally, it has the broader goal of becoming the most powerful and flexible open source data analysis / manipulation tool available in any language. It is already well on its way towards this goal.</p>",
    "site_name": "pandas.pydata.org",
    "link_to_site": "https://pandas.pydata.org/",
    "site_name_license": "BSD3",
    "link_to_license": "https://github.com/pandas-dev/pandas/blob/main/LICENSE",
    "usage_notes": "<p>Please refer to <a href=\"https://pandas.pydata.org/pandas-docs/stable/\">pandas.pydata.org</a> for full package documentation.</p>",
    "tags": "programming_tools math machine_learning",
    "versions": {
      "1.5.1.post3": {
        "dist": [
          {
            "py_version": "cp312",
            "sha256": "6830019e5d42f074636b63a9ef672275d853279f2bf82794b5660e14c65d32e6"
          },
          {
            "py_version": "cp311",
            "sha256": "4eff346445d975fb3a434eb82f5b9de8e03218588b444a27656db964c648e6f7"
          }
        ]
      }
    }
  },
  "onetimepass": {
    "image_name": "onetimepass",
    "alt_image_name": "onetimepass",
    "description": "<p>OneTimePass (actually onetimepass) is a module for generating one-time passwords, namely HOTPs (HMAC-based one-time passwords) and TOTPs (time-based one-time passwords).</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/tadeck/onetimepass",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/tadeck/onetimepass/blob/master/LICENSE.rst",
    "usage_notes": "<p>More information is available on <a href=\"https://github.com/tadeck/onetimepass\">github.com</a>.</p>",
    "tags": "security",
    "versions": {
      "1.0.1": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "e20859247888972752f317639aeaae52c784fa25f9ae5774ba6647de7943596e"
          }
        ]
      }
    }
  },
  "ptyprocess": {
    "image_name": "ptyprocess",
    "alt_image_name": "ptyprocess",
    "description": "<p>Launch a subprocess in a pseudo terminal (pty), and interact with both the process and its pty.</p><p>Sometimes, piping stdin and stdout is not enough. There might be a password prompt that doesn\u2019t read from stdin, output that changes when it\u2019s going to a pipe rather than a terminal, or curses-style interfaces that rely on a terminal. If you need to automate these things, running the process in a pseudo terminal (pty) is the answer.</p>\n",
    "site_name": "github",
    "link_to_site": "https://github.com/pexpect/ptyprocess",
    "site_name_license": "OTHER",
    "link_to_license": "https://github.com/pexpect/ptyprocess/blob/master/LICENSE",
    "usage_notes": "<p>Interface:</p>\n<pre><code>\np = PtyProcessUnicode.spawn(['python'])<br>\np.read(20)<br>\np.write('6+6\\n')<br>\np.read(20)<br>\n</code></pre>\n\n<p>Refer to <a href=\"https://ptyprocess.readthedocs.io/en/latest/\">readthedocs.io</a> for documentation.</p>",
    "tags": "programming_tools utility",
    "versions": {
      "0.7.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "4b41f3967fce3af57cc7e94b888626c18bf37a083e3651ca8feeb66d492fef35"
          }
        ]
      }
    }
  },
  "ruamel.yaml": {
    "image_name": "ruamel.yaml",
    "alt_image_name": "ruamel.yaml",
    "description": "<p>ruamel.yaml is a YAML 1.2 loader/dumper package for Python.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/ibm-z-oss-oda/ruamel.yaml",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/ibm-z-oss-oda/ruamel.yaml/blob/master/LICENSE",
    "usage_notes": "<p>Usage information is available on <a href=\"https://github.com/ibm-z-oss-oda/ruamel.yaml\">github.com</a>.</p>",
    "tags": "utility languages",
    "versions": {
      "0.18.10": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "aa9e5fe65baeb5dd5746f0789a04c6f8807a8f5c41fdd484f5457cca142c2d30"
          }
        ]
      }
    }
  },
  "anyio": {
    "image_name": "anyio",
    "alt_image_name": "anyio",
    "description": "<p>AnyIO is an asynchronous networking and concurrency library that works on top of either asyncio or trio.</p>",
    "site_name": "github.com",
    "link_to_site": "https://github.com/agronholm/anyio",
    "site_name_license": "MIT",
    "link_to_license": "https://github.com/agronholm/anyio/blob/master/LICENSE",
    "usage_notes": "<p>More information is available on <a href=\"https://anyio.readthedocs.io/en/stable/\">readthedocs.io</a>.</p>",
    "tags": "web",
    "versions": {
      "4.6.0": {
        "dist": [
          {
            "py_version": "py3",
            "sha256": "514f049af88774c06ab7059bd0ce3746ef218bceeb42a20b064187628df851b0"
          }
        ]
      }
    }
  }
}